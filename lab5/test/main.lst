
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000018e4  00001978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000102  00800100  00800100  00001978  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002476  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eca  00000000  00000000  00003f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed6  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  00005cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000766  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001906  00000000  00000000  000067da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 14 01 	jmp	0x228	; 0x228 <__ctors_end>
       4:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
       c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      10:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      14:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      18:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      1c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      20:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      24:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      28:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      2c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      30:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      34:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      38:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      3c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      40:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      48:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      4c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      50:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      54:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      58:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      5c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      60:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      64:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      68:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      6c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      70:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      74:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      78:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      7c:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      80:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      84:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_33>
      88:	0c 94 26 01 	jmp	0x24c	; 0x24c <__bad_interrupt>
      8c:	1b 06       	cpc	r1, r27
      8e:	f2 05       	cpc	r31, r2
      90:	f2 05       	cpc	r31, r2
      92:	f2 05       	cpc	r31, r2
      94:	f2 05       	cpc	r31, r2
      96:	f2 05       	cpc	r31, r2
      98:	f2 05       	cpc	r31, r2
      9a:	f2 05       	cpc	r31, r2
      9c:	1b 06       	cpc	r1, r27
      9e:	f2 05       	cpc	r31, r2
      a0:	f2 05       	cpc	r31, r2
      a2:	f2 05       	cpc	r31, r2
      a4:	f2 05       	cpc	r31, r2
      a6:	f2 05       	cpc	r31, r2
      a8:	f2 05       	cpc	r31, r2
      aa:	f2 05       	cpc	r31, r2
      ac:	25 06       	cpc	r2, r21
      ae:	f2 05       	cpc	r31, r2
      b0:	f2 05       	cpc	r31, r2
      b2:	f2 05       	cpc	r31, r2
      b4:	f2 05       	cpc	r31, r2
      b6:	f2 05       	cpc	r31, r2
      b8:	f2 05       	cpc	r31, r2
      ba:	f2 05       	cpc	r31, r2
      bc:	f2 05       	cpc	r31, r2
      be:	f2 05       	cpc	r31, r2
      c0:	f2 05       	cpc	r31, r2
      c2:	f2 05       	cpc	r31, r2
      c4:	f2 05       	cpc	r31, r2
      c6:	f2 05       	cpc	r31, r2
      c8:	f2 05       	cpc	r31, r2
      ca:	f2 05       	cpc	r31, r2
      cc:	25 06       	cpc	r2, r21
      ce:	f2 05       	cpc	r31, r2
      d0:	f2 05       	cpc	r31, r2
      d2:	f2 05       	cpc	r31, r2
      d4:	f2 05       	cpc	r31, r2
      d6:	f2 05       	cpc	r31, r2
      d8:	f2 05       	cpc	r31, r2
      da:	f2 05       	cpc	r31, r2
      dc:	f2 05       	cpc	r31, r2
      de:	f2 05       	cpc	r31, r2
      e0:	f2 05       	cpc	r31, r2
      e2:	f2 05       	cpc	r31, r2
      e4:	f2 05       	cpc	r31, r2
      e6:	f2 05       	cpc	r31, r2
      e8:	f2 05       	cpc	r31, r2
      ea:	f2 05       	cpc	r31, r2
      ec:	3c 06       	cpc	r3, r28
      ee:	f2 05       	cpc	r31, r2
      f0:	f2 05       	cpc	r31, r2
      f2:	f2 05       	cpc	r31, r2
      f4:	f2 05       	cpc	r31, r2
      f6:	f2 05       	cpc	r31, r2
      f8:	f2 05       	cpc	r31, r2
      fa:	f2 05       	cpc	r31, r2
      fc:	40 06       	cpc	r4, r16
      fe:	f2 05       	cpc	r31, r2
     100:	f2 05       	cpc	r31, r2
     102:	f2 05       	cpc	r31, r2
     104:	f2 05       	cpc	r31, r2
     106:	f2 05       	cpc	r31, r2
     108:	f2 05       	cpc	r31, r2
     10a:	f2 05       	cpc	r31, r2
     10c:	f2 05       	cpc	r31, r2
     10e:	f2 05       	cpc	r31, r2
     110:	f2 05       	cpc	r31, r2
     112:	f2 05       	cpc	r31, r2
     114:	f2 05       	cpc	r31, r2
     116:	f2 05       	cpc	r31, r2
     118:	f2 05       	cpc	r31, r2
     11a:	f2 05       	cpc	r31, r2
     11c:	4e 06       	cpc	r4, r30
     11e:	f2 05       	cpc	r31, r2
     120:	f2 05       	cpc	r31, r2
     122:	f2 05       	cpc	r31, r2
     124:	f2 05       	cpc	r31, r2
     126:	f2 05       	cpc	r31, r2
     128:	f2 05       	cpc	r31, r2
     12a:	f2 05       	cpc	r31, r2
     12c:	0c 06       	cpc	r0, r28

0000012e <__trampolines_end>:
     12e:	00 40       	sbci	r16, 0x00	; 0
     130:	7a 10       	cpse	r7, r10
     132:	f3 5a       	subi	r31, 0xA3	; 163
     134:	00 a0       	ldd	r0, Z+32	; 0x20
     136:	72 4e       	sbci	r23, 0xE2	; 226
     138:	18 09       	sbc	r17, r8
     13a:	00 10       	cpse	r0, r0
     13c:	a5 d4       	rcall	.+2378   	; 0xa88 <lcd_int16+0x8c>
     13e:	e8 00       	.word	0x00e8	; ????
     140:	00 e8       	ldi	r16, 0x80	; 128
     142:	76 48       	sbci	r23, 0x86	; 134
     144:	17 00       	.word	0x0017	; ????
     146:	00 e4       	ldi	r16, 0x40	; 64
     148:	0b 54       	subi	r16, 0x4B	; 75
     14a:	02 00       	.word	0x0002	; ????
     14c:	00 ca       	rjmp	.-3072   	; 0xfffff54e <__eeprom_end+0xff7ef54e>
     14e:	9a 3b       	cpi	r25, 0xBA	; 186
     150:	00 00       	nop
     152:	00 e1       	ldi	r16, 0x10	; 16
     154:	f5 05       	cpc	r31, r5
     156:	00 00       	nop
     158:	80 96       	adiw	r24, 0x20	; 32
     15a:	98 00       	.word	0x0098	; ????
     15c:	00 00       	nop
     15e:	40 42       	sbci	r20, 0x20	; 32
     160:	0f 00       	.word	0x000f	; ????
     162:	00 00       	nop
     164:	a0 86       	std	Z+8, r10	; 0x08
     166:	01 00       	.word	0x0001	; ????
     168:	00 00       	nop
     16a:	10 27       	eor	r17, r16
     16c:	00 00       	nop
     16e:	00 00       	nop
     170:	e8 03       	fmulsu	r22, r16
     172:	00 00       	nop
     174:	00 00       	nop
     176:	64 00       	.word	0x0064	; ????
     178:	00 00       	nop
     17a:	00 00       	nop
     17c:	0a 00       	.word	0x000a	; ????
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	01 00       	.word	0x0001	; ????
     184:	00 00       	nop
     186:	00 00       	nop
     188:	2c 76       	andi	r18, 0x6C	; 108
     18a:	d8 88       	ldd	r13, Y+16	; 0x10
     18c:	dc 67       	ori	r29, 0x7C	; 124
     18e:	4f 08       	sbc	r4, r15
     190:	23 df       	rcall	.-442    	; 0xffffffd8 <__eeprom_end+0xff7effd8>
     192:	c1 df       	rcall	.-126    	; 0x116 <__SREG__+0xd7>
     194:	ae 59       	subi	r26, 0x9E	; 158
     196:	e1 b1       	in	r30, 0x01	; 1
     198:	b7 96       	adiw	r30, 0x27	; 39
     19a:	e5 e3       	ldi	r30, 0x35	; 53
     19c:	e4 53       	subi	r30, 0x34	; 52
     19e:	c6 3a       	cpi	r28, 0xA6	; 166
     1a0:	e6 51       	subi	r30, 0x16	; 22
     1a2:	99 76       	andi	r25, 0x69	; 105
     1a4:	96 e8       	ldi	r25, 0x86	; 134
     1a6:	e6 c2       	rjmp	.+1484   	; 0x774 <lcd_init+0xa8>
     1a8:	84 26       	eor	r8, r20
     1aa:	eb 89       	ldd	r30, Y+19	; 0x13
     1ac:	8c 9b       	sbis	0x11, 4	; 17
     1ae:	62 ed       	ldi	r22, 0xD2	; 210
     1b0:	40 7c       	andi	r20, 0xC0	; 192
     1b2:	6f fc       	.word	0xfc6f	; ????
     1b4:	ef bc       	out	0x2f, r14	; 47
     1b6:	9c 9f       	mul	r25, r28
     1b8:	40 f2       	brcs	.-112    	; 0x14a <__trampolines_end+0x1c>
     1ba:	ba a5       	ldd	r27, Y+42	; 0x2a
     1bc:	6f a5       	ldd	r22, Y+47	; 0x2f
     1be:	f4 90       	lpm	r15, Z
     1c0:	05 5a       	subi	r16, 0xA5	; 165
     1c2:	2a f7       	brpl	.-54     	; 0x18e <__trampolines_end+0x60>
     1c4:	5c 93       	st	X, r21
     1c6:	6b 6c       	ori	r22, 0xCB	; 203
     1c8:	f9 67       	ori	r31, 0x79	; 121
     1ca:	6d c1       	rjmp	.+730    	; 0x4a6 <int2lcd+0xe>
     1cc:	1b fc       	.word	0xfc1b	; ????
     1ce:	e0 e4       	ldi	r30, 0x40	; 64
     1d0:	0d 47       	sbci	r16, 0x7D	; 125
     1d2:	fe f5       	brtc	.+126    	; 0x252 <spi_init+0x2>
     1d4:	20 e6       	ldi	r18, 0x60	; 96
     1d6:	b5 00       	.word	0x00b5	; ????
     1d8:	d0 ed       	ldi	r29, 0xD0	; 208
     1da:	90 2e       	mov	r9, r16
     1dc:	03 00       	.word	0x0003	; ????
     1de:	94 35       	cpi	r25, 0x54	; 84
     1e0:	77 05       	cpc	r23, r7
     1e2:	00 80       	ld	r0, Z
     1e4:	84 1e       	adc	r8, r20
     1e6:	08 00       	.word	0x0008	; ????
     1e8:	00 20       	and	r0, r0
     1ea:	4e 0a       	sbc	r4, r30
     1ec:	00 00       	nop
     1ee:	00 c8       	rjmp	.-4096   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
     1f0:	0c 33       	cpi	r16, 0x3C	; 60
     1f2:	33 33       	cpi	r19, 0x33	; 51
     1f4:	33 0f       	add	r19, r19
     1f6:	98 6e       	ori	r25, 0xE8	; 232
     1f8:	12 83       	std	Z+2, r17	; 0x02
     1fa:	11 41       	sbci	r17, 0x11	; 17
     1fc:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1fe:	21 14       	cp	r2, r1
     200:	89 3b       	cpi	r24, 0xB9	; 185
     202:	e6 55       	subi	r30, 0x56	; 86
     204:	16 cf       	rjmp	.-468    	; 0x32 <__FUSE_REGION_LENGTH__+0x2f>
     206:	fe e6       	ldi	r31, 0x6E	; 110
     208:	db 18       	sub	r13, r11
     20a:	d1 84       	ldd	r13, Z+9	; 0x09
     20c:	4b 38       	cpi	r20, 0x8B	; 139
     20e:	1b f7       	brvc	.-58     	; 0x1d6 <__trampolines_end+0xa8>
     210:	7c 1d       	adc	r23, r12
     212:	90 1d       	adc	r25, r0
     214:	a4 bb       	out	0x14, r26	; 20
     216:	e4 24       	eor	r14, r4
     218:	20 32       	cpi	r18, 0x20	; 32
     21a:	84 72       	andi	r24, 0x24	; 36
     21c:	5e 22       	and	r5, r30
     21e:	81 00       	.word	0x0081	; ????
     220:	c9 f1       	breq	.+114    	; 0x294 <refresh_lcd+0xa>
     222:	24 ec       	ldi	r18, 0xC4	; 196
     224:	a1 e5       	ldi	r26, 0x51	; 81
     226:	3d 27       	eor	r19, r29

00000228 <__ctors_end>:
     228:	11 24       	eor	r1, r1
     22a:	1f be       	out	0x3f, r1	; 63
     22c:	cf ef       	ldi	r28, 0xFF	; 255
     22e:	d0 e1       	ldi	r29, 0x10	; 16
     230:	de bf       	out	0x3e, r29	; 62
     232:	cd bf       	out	0x3d, r28	; 61

00000234 <__do_clear_bss>:
     234:	22 e0       	ldi	r18, 0x02	; 2
     236:	a0 e0       	ldi	r26, 0x00	; 0
     238:	b1 e0       	ldi	r27, 0x01	; 1
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	a2 30       	cpi	r26, 0x02	; 2
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	0e 94 13 07 	call	0xe26	; 0xe26 <main>
     248:	0c 94 70 0c 	jmp	0x18e0	; 0x18e0 <_exit>

0000024c <__bad_interrupt>:
     24c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000250 <spi_init>:
//Initalizes the SPI port on the mega128. Does not do any further
// external device specific initalizations.
//********************************************************************
void spi_init(void)
{
    DDRB |= 0x07; //Turn on SS, MOSI, SCLK
     250:	87 b3       	in	r24, 0x17	; 23
     252:	87 60       	ori	r24, 0x07	; 7
     254:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st,
    //no interrupts, enable SPI, clk low initially, rising edge sample
    SPCR = (1 << SPE) | (1 << MSTR);
     256:	80 e5       	ldi	r24, 0x50	; 80
     258:	8d b9       	out	0x0d, r24	; 13
    SPSR = (1 << SPI2X); //SPI at 2x speed (8 MHz)
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	8e b9       	out	0x0e, r24	; 14
     25e:	08 95       	ret

00000260 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	81 11       	cpse	r24, r1
     264:	01 c0       	rjmp	.+2      	; 0x268 <send_lcd+0x8>
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     26a:	77 9b       	sbis	0x0e, 7	; 14
     26c:	fe cf       	rjmp	.-4      	; 0x26a <send_lcd+0xa>
  SPDR = byte;                        //send payload
     26e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     270:	77 9b       	sbis	0x0e, 7	; 14
     272:	fe cf       	rjmp	.-4      	; 0x270 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     278:	88 60       	ori	r24, 0x08	; 8
     27a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     27e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     282:	87 7f       	andi	r24, 0xF7	; 247
     284:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     288:	08 95       	ret

0000028a <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     28a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <i.2094>
     28e:	82 0f       	add	r24, r18
     290:	91 1d       	adc	r25, r1
     292:	fc 01       	movw	r30, r24
     294:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     29a:	77 9b       	sbis	0x0e, 7	; 14
     29c:	fe cf       	rjmp	.-4      	; 0x29a <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     29e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2a0:	77 9b       	sbis	0x0e, 7	; 14
     2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2a8:	88 60       	ori	r24, 0x08	; 8
     2aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2b2:	87 7f       	andi	r24, 0xF7	; 247
     2b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
     2b8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.2094>
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     2c2:	80 31       	cpi	r24, 0x10	; 16
     2c4:	d9 f0       	breq	.+54     	; 0x2fc <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     2c6:	80 32       	cpi	r24, 0x20	; 32
     2c8:	09 f0       	breq	.+2      	; 0x2cc <refresh_lcd+0x42>
     2ca:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2cc:	85 ed       	ldi	r24, 0xD5	; 213
     2ce:	8a 95       	dec	r24
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <refresh_lcd+0x44>
     2d2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2d6:	77 9b       	sbis	0x0e, 7	; 14
     2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     2da:	80 e8       	ldi	r24, 0x80	; 128
     2dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2de:	77 9b       	sbis	0x0e, 7	; 14
     2e0:	fe cf       	rjmp	.-4      	; 0x2de <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2e6:	88 60       	ori	r24, 0x08	; 8
     2e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2f0:	87 7f       	andi	r24, 0xF7	; 247
     2f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     2f6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <i.2094>
     2fa:	08 95       	ret
     2fc:	f5 ed       	ldi	r31, 0xD5	; 213
     2fe:	fa 95       	dec	r31
     300:	f1 f7       	brne	.-4      	; 0x2fe <refresh_lcd+0x74>
     302:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     304:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     306:	77 9b       	sbis	0x0e, 7	; 14
     308:	fe cf       	rjmp	.-4      	; 0x306 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
     30a:	80 ec       	ldi	r24, 0xC0	; 192
     30c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     30e:	77 9b       	sbis	0x0e, 7	; 14
     310:	fe cf       	rjmp	.-4      	; 0x30e <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     312:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     316:	88 60       	ori	r24, 0x08	; 8
     318:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     31c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     320:	87 7f       	andi	r24, 0xF7	; 247
     322:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     326:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <i.2094>
     32a:	cd cf       	rjmp	.-102    	; 0x2c6 <refresh_lcd+0x3c>

0000032c <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     32c:	66 0f       	add	r22, r22
     32e:	66 0f       	add	r22, r22
     330:	66 0f       	add	r22, r22
     332:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     334:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     336:	77 9b       	sbis	0x0e, 7	; 14
     338:	fe cf       	rjmp	.-4      	; 0x336 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     33a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     33c:	77 9b       	sbis	0x0e, 7	; 14
     33e:	fe cf       	rjmp	.-4      	; 0x33c <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     340:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     344:	28 60       	ori	r18, 0x08	; 8
     346:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     34a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     34e:	27 7f       	andi	r18, 0xF7	; 247
     350:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     354:	25 ed       	ldi	r18, 0xD5	; 213
     356:	2a 95       	dec	r18
     358:	f1 f7       	brne	.-4      	; 0x356 <set_custom_character+0x2a>
     35a:	00 00       	nop
     35c:	fc 01       	movw	r30, r24
     35e:	9c 01       	movw	r18, r24
     360:	28 5f       	subi	r18, 0xF8	; 248
     362:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     364:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     366:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     368:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     36a:	77 9b       	sbis	0x0e, 7	; 14
     36c:	fe cf       	rjmp	.-4      	; 0x36a <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     36e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     370:	77 9b       	sbis	0x0e, 7	; 14
     372:	fe cf       	rjmp	.-4      	; 0x370 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     374:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     378:	88 60       	ori	r24, 0x08	; 8
     37a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     37e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     382:	87 7f       	andi	r24, 0xF7	; 247
     384:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     388:	85 ed       	ldi	r24, 0xD5	; 213
     38a:	8a 95       	dec	r24
     38c:	f1 f7       	brne	.-4      	; 0x38a <set_custom_character+0x5e>
     38e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     390:	e2 17       	cp	r30, r18
     392:	f3 07       	cpc	r31, r19
     394:	41 f7       	brne	.-48     	; 0x366 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     396:	08 95       	ret

00000398 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     398:	90 e4       	ldi	r25, 0x40	; 64
     39a:	89 9f       	mul	r24, r25
     39c:	60 0d       	add	r22, r0
     39e:	11 24       	eor	r1, r1
     3a0:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3a2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3a4:	77 9b       	sbis	0x0e, 7	; 14
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     3a8:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3aa:	77 9b       	sbis	0x0e, 7	; 14
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3b2:	88 60       	ori	r24, 0x08	; 8
     3b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3bc:	87 7f       	andi	r24, 0xF7	; 247
     3be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3c2:	08 95       	ret

000003c4 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     3c4:	81 11       	cpse	r24, r1
     3c6:	13 c0       	rjmp	.+38     	; 0x3ee <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3cc:	77 9b       	sbis	0x0e, 7	; 14
     3ce:	fe cf       	rjmp	.-4      	; 0x3cc <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     3d0:	80 e3       	ldi	r24, 0x30	; 48
     3d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3d4:	77 9b       	sbis	0x0e, 7	; 14
     3d6:	fe cf       	rjmp	.-4      	; 0x3d4 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3e6:	87 7f       	andi	r24, 0xF7	; 247
     3e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3ec:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     3ee:	84 36       	cpi	r24, 0x64	; 100
     3f0:	b0 f4       	brcc	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     3f2:	8a 30       	cpi	r24, 0x0A	; 10
     3f4:	60 f5       	brcc	.+88     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3fa:	77 9b       	sbis	0x0e, 7	; 14
     3fc:	fe cf       	rjmp	.-4      	; 0x3fa <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     3fe:	9d ec       	ldi	r25, 0xCD	; 205
     400:	89 9f       	mul	r24, r25
     402:	91 2d       	mov	r25, r1
     404:	11 24       	eor	r1, r1
     406:	96 95       	lsr	r25
     408:	96 95       	lsr	r25
     40a:	96 95       	lsr	r25
     40c:	2a e0       	ldi	r18, 0x0A	; 10
     40e:	92 9f       	mul	r25, r18
     410:	80 19       	sub	r24, r0
     412:	11 24       	eor	r1, r1
     414:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     416:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     418:	77 9b       	sbis	0x0e, 7	; 14
     41a:	fe cf       	rjmp	.-4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     41c:	dd cf       	rjmp	.-70     	; 0x3d8 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     41e:	99 e2       	ldi	r25, 0x29	; 41
     420:	89 9f       	mul	r24, r25
     422:	91 2d       	mov	r25, r1
     424:	11 24       	eor	r1, r1
     426:	92 95       	swap	r25
     428:	9f 70       	andi	r25, 0x0F	; 15
     42a:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     430:	77 9b       	sbis	0x0e, 7	; 14
     432:	fe cf       	rjmp	.-4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
  SPDR = byte;                        //send payload
     434:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     436:	77 9b       	sbis	0x0e, 7	; 14
     438:	fe cf       	rjmp	.-4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     43a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     43e:	98 60       	ori	r25, 0x08	; 8
     440:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     444:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     448:	97 7f       	andi	r25, 0xF7	; 247
     44a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     44e:	99 e2       	ldi	r25, 0x29	; 41
     450:	89 9f       	mul	r24, r25
     452:	91 2d       	mov	r25, r1
     454:	11 24       	eor	r1, r1
     456:	92 95       	swap	r25
     458:	9f 70       	andi	r25, 0x0F	; 15
     45a:	38 2f       	mov	r19, r24
     45c:	24 e6       	ldi	r18, 0x64	; 100
     45e:	92 9f       	mul	r25, r18
     460:	30 19       	sub	r19, r0
     462:	11 24       	eor	r1, r1
     464:	2d ec       	ldi	r18, 0xCD	; 205
     466:	32 9f       	mul	r19, r18
     468:	91 2d       	mov	r25, r1
     46a:	11 24       	eor	r1, r1
     46c:	96 95       	lsr	r25
     46e:	96 95       	lsr	r25
     470:	96 95       	lsr	r25
     472:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     478:	77 9b       	sbis	0x0e, 7	; 14
     47a:	fe cf       	rjmp	.-4      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
  SPDR = byte;                        //send payload
     47c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     47e:	77 9b       	sbis	0x0e, 7	; 14
     480:	fe cf       	rjmp	.-4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     482:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     486:	98 60       	ori	r25, 0x08	; 8
     488:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     48c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     490:	97 7f       	andi	r25, 0xF7	; 247
     492:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     496:	af cf       	rjmp	.-162    	; 0x3f6 <uint2lcd+0x32>

00000498 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     498:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     49a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4a2:	77 9b       	sbis	0x0e, 7	; 14
     4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     4a6:	9d e2       	ldi	r25, 0x2D	; 45
     4a8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4aa:	77 9b       	sbis	0x0e, 7	; 14
     4ac:	fe cf       	rjmp	.-4      	; 0x4aa <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4b2:	98 60       	ori	r25, 0x08	; 8
     4b4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4b8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4bc:	97 7f       	andi	r25, 0xF7	; 247
     4be:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4c2:	95 ed       	ldi	r25, 0xD5	; 213
     4c4:	9a 95       	dec	r25
     4c6:	f1 f7       	brne	.-4      	; 0x4c4 <int2lcd+0x2c>
     4c8:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     4ca:	81 95       	neg	r24
     4cc:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <uint2lcd>

000004d0 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4d0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4d2:	77 9b       	sbis	0x0e, 7	; 14
     4d4:	fe cf       	rjmp	.-4      	; 0x4d2 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     4d6:	8e e0       	ldi	r24, 0x0E	; 14
     4d8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4da:	77 9b       	sbis	0x0e, 7	; 14
     4dc:	fe cf       	rjmp	.-4      	; 0x4da <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4e2:	88 60       	ori	r24, 0x08	; 8
     4e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4ec:	87 7f       	andi	r24, 0xF7	; 247
     4ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4f2:	08 95       	ret

000004f4 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4f4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4f6:	77 9b       	sbis	0x0e, 7	; 14
     4f8:	fe cf       	rjmp	.-4      	; 0x4f6 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     4fa:	8c e0       	ldi	r24, 0x0C	; 12
     4fc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4fe:	77 9b       	sbis	0x0e, 7	; 14
     500:	fe cf       	rjmp	.-4      	; 0x4fe <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     502:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     506:	88 60       	ori	r24, 0x08	; 8
     508:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     50c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     510:	87 7f       	andi	r24, 0xF7	; 247
     512:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     516:	08 95       	ret

00000518 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     518:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     51a:	77 9b       	sbis	0x0e, 7	; 14
     51c:	fe cf       	rjmp	.-4      	; 0x51a <shift_right+0x2>
  SPDR = byte;                        //send payload
     51e:	8e e1       	ldi	r24, 0x1E	; 30
     520:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     522:	77 9b       	sbis	0x0e, 7	; 14
     524:	fe cf       	rjmp	.-4      	; 0x522 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     526:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     52a:	88 60       	ori	r24, 0x08	; 8
     52c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     530:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     534:	87 7f       	andi	r24, 0xF7	; 247
     536:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     53a:	08 95       	ret

0000053c <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     53c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     53e:	77 9b       	sbis	0x0e, 7	; 14
     540:	fe cf       	rjmp	.-4      	; 0x53e <shift_left+0x2>
  SPDR = byte;                        //send payload
     542:	88 e1       	ldi	r24, 0x18	; 24
     544:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     546:	77 9b       	sbis	0x0e, 7	; 14
     548:	fe cf       	rjmp	.-4      	; 0x546 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     54a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     54e:	88 60       	ori	r24, 0x08	; 8
     550:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     554:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     558:	87 7f       	andi	r24, 0xF7	; 247
     55a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     55e:	08 95       	ret

00000560 <strobe_lcd>:
     560:	e2 e6       	ldi	r30, 0x62	; 98
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	88 60       	ori	r24, 0x08	; 8
     568:	80 83       	st	Z, r24
     56a:	80 81       	ld	r24, Z
     56c:	87 7f       	andi	r24, 0xF7	; 247
     56e:	80 83       	st	Z, r24
     570:	08 95       	ret

00000572 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     572:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     574:	77 9b       	sbis	0x0e, 7	; 14
     576:	fe cf       	rjmp	.-4      	; 0x574 <clear_display+0x2>
  SPDR = byte;                        //send payload
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     57c:	77 9b       	sbis	0x0e, 7	; 14
     57e:	fe cf       	rjmp	.-4      	; 0x57c <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     580:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     584:	88 60       	ori	r24, 0x08	; 8
     586:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     58a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     58e:	87 7f       	andi	r24, 0xF7	; 247
     590:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     594:	8f e1       	ldi	r24, 0x1F	; 31
     596:	9c e1       	ldi	r25, 0x1C	; 28
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <clear_display+0x26>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <clear_display+0x2c>
     59e:	00 00       	nop
     5a0:	08 95       	ret

000005a2 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5a2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5a4:	77 9b       	sbis	0x0e, 7	; 14
     5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5ac:	77 9b       	sbis	0x0e, 7	; 14
     5ae:	fe cf       	rjmp	.-4      	; 0x5ac <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b4:	88 60       	ori	r24, 0x08	; 8
     5b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5be:	87 7f       	andi	r24, 0xF7	; 247
     5c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5c4:	8f e6       	ldi	r24, 0x6F	; 111
     5c6:	97 e1       	ldi	r25, 0x17	; 23
     5c8:	01 97       	sbiw	r24, 0x01	; 1
     5ca:	f1 f7       	brne	.-4      	; 0x5c8 <cursor_home+0x26>
     5cc:	00 c0       	rjmp	.+0      	; 0x5ce <cursor_home+0x2c>
     5ce:	00 00       	nop
     5d0:	08 95       	ret

000005d2 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5d2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5d4:	77 9b       	sbis	0x0e, 7	; 14
     5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     5d8:	80 ec       	ldi	r24, 0xC0	; 192
     5da:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5dc:	77 9b       	sbis	0x0e, 7	; 14
     5de:	fe cf       	rjmp	.-4      	; 0x5dc <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e4:	88 60       	ori	r24, 0x08	; 8
     5e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ee:	87 7f       	andi	r24, 0xF7	; 247
     5f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5f4:	08 95       	ret

000005f6 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5f6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5f8:	77 9b       	sbis	0x0e, 7	; 14
     5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     5fc:	80 e8       	ldi	r24, 0x80	; 128
     5fe:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     600:	77 9b       	sbis	0x0e, 7	; 14
     602:	fe cf       	rjmp	.-4      	; 0x600 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     604:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     60e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     612:	87 7f       	andi	r24, 0xF7	; 247
     614:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     618:	08 95       	ret

0000061a <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     61a:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     61c:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     61e:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     620:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     622:	77 9b       	sbis	0x0e, 7	; 14
     624:	fe cf       	rjmp	.-4      	; 0x622 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     626:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     628:	77 9b       	sbis	0x0e, 7	; 14
     62a:	fe cf       	rjmp	.-4      	; 0x628 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     62c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     630:	88 60       	ori	r24, 0x08	; 8
     632:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     636:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     63a:	87 7f       	andi	r24, 0xF7	; 247
     63c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     640:	85 ed       	ldi	r24, 0xD5	; 213
     642:	8a 95       	dec	r24
     644:	f1 f7       	brne	.-4      	; 0x642 <fill_spaces+0x28>
     646:	00 00       	nop
     648:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     64a:	51 f7       	brne	.-44     	; 0x620 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     64c:	08 95       	ret

0000064e <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     652:	77 9b       	sbis	0x0e, 7	; 14
     654:	fe cf       	rjmp	.-4      	; 0x652 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     656:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     658:	77 9b       	sbis	0x0e, 7	; 14
     65a:	fe cf       	rjmp	.-4      	; 0x658 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     65c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     660:	88 60       	ori	r24, 0x08	; 8
     662:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     666:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     66a:	87 7f       	andi	r24, 0xF7	; 247
     66c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     670:	08 95       	ret

00000672 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     672:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     674:	40 e0       	ldi	r20, 0x00	; 0
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     67a:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     67c:	df 01       	movw	r26, r30
     67e:	a4 0f       	add	r26, r20
     680:	b5 1f       	adc	r27, r21
     682:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     684:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     686:	77 9b       	sbis	0x0e, 7	; 14
     688:	fe cf       	rjmp	.-4      	; 0x686 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     68a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     68c:	77 9b       	sbis	0x0e, 7	; 14
     68e:	fe cf       	rjmp	.-4      	; 0x68c <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     690:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     694:	98 60       	ori	r25, 0x08	; 8
     696:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     69a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     69e:	97 7f       	andi	r25, 0xF7	; 247
     6a0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6a4:	85 ed       	ldi	r24, 0xD5	; 213
     6a6:	8a 95       	dec	r24
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <string2lcd+0x34>
     6aa:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	46 2f       	mov	r20, r22
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	df 01       	movw	r26, r30
     6b4:	0d 90       	ld	r0, X+
     6b6:	00 20       	and	r0, r0
     6b8:	e9 f7       	brne	.-6      	; 0x6b4 <string2lcd+0x42>
     6ba:	9d 01       	movw	r18, r26
     6bc:	2e 1b       	sub	r18, r30
     6be:	3f 0b       	sbc	r19, r31
     6c0:	22 50       	subi	r18, 0x02	; 2
     6c2:	31 09       	sbc	r19, r1
     6c4:	24 17       	cp	r18, r20
     6c6:	35 07       	cpc	r19, r21
     6c8:	c8 f6       	brcc	.-78     	; 0x67c <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     6ca:	08 95       	ret

000006cc <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	99 ef       	ldi	r25, 0xF9	; 249
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd_init+0x4>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <lcd_init+0xa>
     6d6:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     6d8:	88 e0       	ldi	r24, 0x08	; 8
     6da:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6de:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6e0:	77 9b       	sbis	0x0e, 7	; 14
     6e2:	fe cf       	rjmp	.-4      	; 0x6e0 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     6e4:	80 e3       	ldi	r24, 0x30	; 48
     6e6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6e8:	77 9b       	sbis	0x0e, 7	; 14
     6ea:	fe cf       	rjmp	.-4      	; 0x6e8 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f0:	88 60       	ori	r24, 0x08	; 8
     6f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6fa:	87 7f       	andi	r24, 0xF7	; 247
     6fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     700:	8f e5       	ldi	r24, 0x5F	; 95
     702:	9d e6       	ldi	r25, 0x6D	; 109
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <lcd_init+0x38>
     708:	00 c0       	rjmp	.+0      	; 0x70a <lcd_init+0x3e>
     70a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     70c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     70e:	77 9b       	sbis	0x0e, 7	; 14
     710:	fe cf       	rjmp	.-4      	; 0x70e <lcd_init+0x42>
  SPDR = byte;                        //send payload
     712:	80 e3       	ldi	r24, 0x30	; 48
     714:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     716:	77 9b       	sbis	0x0e, 7	; 14
     718:	fe cf       	rjmp	.-4      	; 0x716 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     71a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71e:	88 60       	ori	r24, 0x08	; 8
     720:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     724:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     728:	87 7f       	andi	r24, 0xF7	; 247
     72a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     72e:	8f e5       	ldi	r24, 0x5F	; 95
     730:	9d e6       	ldi	r25, 0x6D	; 109
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	f1 f7       	brne	.-4      	; 0x732 <lcd_init+0x66>
     736:	00 c0       	rjmp	.+0      	; 0x738 <lcd_init+0x6c>
     738:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     73a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     73c:	77 9b       	sbis	0x0e, 7	; 14
     73e:	fe cf       	rjmp	.-4      	; 0x73c <lcd_init+0x70>
  SPDR = byte;                        //send payload
     740:	80 e3       	ldi	r24, 0x30	; 48
     742:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     744:	77 9b       	sbis	0x0e, 7	; 14
     746:	fe cf       	rjmp	.-4      	; 0x744 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     748:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74c:	88 60       	ori	r24, 0x08	; 8
     74e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     752:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     756:	87 7f       	andi	r24, 0xF7	; 247
     758:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     75c:	8f e5       	ldi	r24, 0x5F	; 95
     75e:	9d e6       	ldi	r25, 0x6D	; 109
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <lcd_init+0x94>
     764:	00 c0       	rjmp	.+0      	; 0x766 <lcd_init+0x9a>
     766:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     768:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     76a:	77 9b       	sbis	0x0e, 7	; 14
     76c:	fe cf       	rjmp	.-4      	; 0x76a <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     76e:	88 e3       	ldi	r24, 0x38	; 56
     770:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     772:	77 9b       	sbis	0x0e, 7	; 14
     774:	fe cf       	rjmp	.-4      	; 0x772 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     776:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     77a:	88 60       	ori	r24, 0x08	; 8
     77c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     780:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     784:	87 7f       	andi	r24, 0xF7	; 247
     786:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     78a:	8f e1       	ldi	r24, 0x1F	; 31
     78c:	9e e4       	ldi	r25, 0x4E	; 78
     78e:	01 97       	sbiw	r24, 0x01	; 1
     790:	f1 f7       	brne	.-4      	; 0x78e <lcd_init+0xc2>
     792:	00 c0       	rjmp	.+0      	; 0x794 <lcd_init+0xc8>
     794:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     796:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     798:	77 9b       	sbis	0x0e, 7	; 14
     79a:	fe cf       	rjmp	.-4      	; 0x798 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     79c:	88 e0       	ldi	r24, 0x08	; 8
     79e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7a0:	77 9b       	sbis	0x0e, 7	; 14
     7a2:	fe cf       	rjmp	.-4      	; 0x7a0 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7a4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a8:	88 60       	ori	r24, 0x08	; 8
     7aa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7b2:	87 7f       	andi	r24, 0xF7	; 247
     7b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7b8:	8f e1       	ldi	r24, 0x1F	; 31
     7ba:	9e e4       	ldi	r25, 0x4E	; 78
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <lcd_init+0xf0>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <lcd_init+0xf6>
     7c2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7c4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7c6:	77 9b       	sbis	0x0e, 7	; 14
     7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7ce:	77 9b       	sbis	0x0e, 7	; 14
     7d0:	fe cf       	rjmp	.-4      	; 0x7ce <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e0:	87 7f       	andi	r24, 0xF7	; 247
     7e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e6:	8f e1       	ldi	r24, 0x1F	; 31
     7e8:	9e e4       	ldi	r25, 0x4E	; 78
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <lcd_init+0x11e>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <lcd_init+0x124>
     7f0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7f2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7f4:	77 9b       	sbis	0x0e, 7	; 14
     7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7fc:	77 9b       	sbis	0x0e, 7	; 14
     7fe:	fe cf       	rjmp	.-4      	; 0x7fc <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     800:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     804:	88 60       	ori	r24, 0x08	; 8
     806:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     80a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     80e:	87 7f       	andi	r24, 0xF7	; 247
     810:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     814:	8f e1       	ldi	r24, 0x1F	; 31
     816:	9e e4       	ldi	r25, 0x4E	; 78
     818:	01 97       	sbiw	r24, 0x01	; 1
     81a:	f1 f7       	brne	.-4      	; 0x818 <lcd_init+0x14c>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <lcd_init+0x152>
     81e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     820:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     822:	77 9b       	sbis	0x0e, 7	; 14
     824:	fe cf       	rjmp	.-4      	; 0x822 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     826:	8c e0       	ldi	r24, 0x0C	; 12
     828:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     82a:	77 9b       	sbis	0x0e, 7	; 14
     82c:	fe cf       	rjmp	.-4      	; 0x82a <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     82e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     832:	88 60       	ori	r24, 0x08	; 8
     834:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     838:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     83c:	87 7f       	andi	r24, 0xF7	; 247
     83e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     842:	8f e1       	ldi	r24, 0x1F	; 31
     844:	9e e4       	ldi	r25, 0x4E	; 78
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	f1 f7       	brne	.-4      	; 0x846 <lcd_init+0x17a>
     84a:	00 c0       	rjmp	.+0      	; 0x84c <lcd_init+0x180>
     84c:	00 00       	nop
     84e:	08 95       	ret

00000850 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     850:	4f 92       	push	r4
     852:	5f 92       	push	r5
     854:	6f 92       	push	r6
     856:	7f 92       	push	r7
     858:	8f 92       	push	r8
     85a:	9f 92       	push	r9
     85c:	af 92       	push	r10
     85e:	bf 92       	push	r11
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ef 92       	push	r14
     866:	ff 92       	push	r15
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	cd b7       	in	r28, 0x3d	; 61
     872:	de b7       	in	r29, 0x3e	; 62
     874:	69 97       	sbiw	r28, 0x19	; 25
     876:	0f b6       	in	r0, 0x3f	; 63
     878:	f8 94       	cli
     87a:	de bf       	out	0x3e, r29	; 62
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	14 2f       	mov	r17, r20
     882:	42 2e       	mov	r4, r18
     884:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     886:	00 23       	and	r16, r16
     888:	79 f0       	breq	.+30     	; 0x8a8 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     88a:	6b 01       	movw	r12, r22
     88c:	7c 01       	movw	r14, r24
     88e:	cc 24       	eor	r12, r12
     890:	f7 fc       	sbrc	r15, 7
     892:	c3 94       	inc	r12
     894:	dd 24       	eor	r13, r13
     896:	ee 24       	eor	r14, r14
     898:	ff 24       	eor	r15, r15
     89a:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
     8a0:	97 fd       	sbrc	r25, 7
     8a2:	a3 c0       	rjmp	.+326    	; 0x9ea <lcd_int32+0x19a>
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     8a8:	44 20       	and	r4, r4
     8aa:	09 f4       	brne	.+2      	; 0x8ae <lcd_int32+0x5e>
     8ac:	96 c0       	rjmp	.+300    	; 0x9da <lcd_int32+0x18a>
     8ae:	9e 01       	movw	r18, r28
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	3f 4f       	sbci	r19, 0xFF	; 255
     8b4:	59 01       	movw	r10, r18
     8b6:	49 01       	movw	r8, r18
     8b8:	66 24       	eor	r6, r6
     8ba:	6a 94       	dec	r6
     8bc:	64 0c       	add	r6, r4
     8be:	71 2c       	mov	r7, r1
     8c0:	3f ef       	ldi	r19, 0xFF	; 255
     8c2:	63 1a       	sub	r6, r19
     8c4:	73 0a       	sbc	r7, r19
     8c6:	6a 0c       	add	r6, r10
     8c8:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     8ca:	2a e0       	ldi	r18, 0x0A	; 10
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	0e 94 c2 07 	call	0xf84	; 0xf84 <__divmodsi4>
     8d6:	e6 2f       	mov	r30, r22
     8d8:	2a 8b       	std	Y+18, r18	; 0x12
     8da:	3b 8b       	std	Y+19, r19	; 0x13
     8dc:	4c 8b       	std	Y+20, r20	; 0x14
     8de:	5d 8b       	std	Y+21, r21	; 0x15
     8e0:	6a 89       	ldd	r22, Y+18	; 0x12
     8e2:	7b 89       	ldd	r23, Y+19	; 0x13
     8e4:	8c 89       	ldd	r24, Y+20	; 0x14
     8e6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     8e8:	20 e3       	ldi	r18, 0x30	; 48
     8ea:	2e 0f       	add	r18, r30
     8ec:	f4 01       	movw	r30, r8
     8ee:	21 93       	st	Z+, r18
     8f0:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     8f2:	6e 16       	cp	r6, r30
     8f4:	7f 06       	cpc	r7, r31
     8f6:	49 f7       	brne	.-46     	; 0x8ca <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     8f8:	99 24       	eor	r9, r9
     8fa:	93 94       	inc	r9
     8fc:	94 0c       	add	r9, r4
     8fe:	f5 01       	movw	r30, r10
     900:	e4 0d       	add	r30, r4
     902:	f1 1d       	adc	r31, r1
     904:	2e e2       	ldi	r18, 0x2E	; 46
     906:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     908:	2a e0       	ldi	r18, 0x0A	; 10
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	50 e0       	ldi	r21, 0x00	; 0
     910:	0e 94 c2 07 	call	0xf84	; 0xf84 <__divmodsi4>
     914:	e6 2f       	mov	r30, r22
     916:	2a 8b       	std	Y+18, r18	; 0x12
     918:	3b 8b       	std	Y+19, r19	; 0x13
     91a:	4c 8b       	std	Y+20, r20	; 0x14
     91c:	5d 8b       	std	Y+21, r21	; 0x15
     91e:	6e 8b       	std	Y+22, r22	; 0x16
     920:	7f 8b       	std	Y+23, r23	; 0x17
     922:	88 8f       	std	Y+24, r24	; 0x18
     924:	99 8f       	std	Y+25, r25	; 0x19
     926:	6a 89       	ldd	r22, Y+18	; 0x12
     928:	7b 89       	ldd	r23, Y+19	; 0x13
     92a:	8c 89       	ldd	r24, Y+20	; 0x14
     92c:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     92e:	31 e0       	ldi	r19, 0x01	; 1
     930:	39 0d       	add	r19, r9
     932:	d5 01       	movw	r26, r10
     934:	a9 0d       	add	r26, r9
     936:	b1 1d       	adc	r27, r1
     938:	e0 5d       	subi	r30, 0xD0	; 208
     93a:	ec 93       	st	X, r30
     93c:	93 2e       	mov	r9, r19
        }while(qr.quot);
     93e:	61 15       	cp	r22, r1
     940:	71 05       	cpc	r23, r1
     942:	81 05       	cpc	r24, r1
     944:	91 05       	cpc	r25, r1
     946:	01 f7       	brne	.-64     	; 0x908 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     948:	11 23       	and	r17, r17
     94a:	61 f0       	breq	.+24     	; 0x964 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     94c:	51 10       	cpse	r5, r1
     94e:	4b c0       	rjmp	.+150    	; 0x9e6 <lcd_int32+0x196>
     950:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     952:	31 17       	cp	r19, r17
     954:	38 f4       	brcc	.+14     	; 0x964 <lcd_int32+0x114>
     956:	f5 01       	movw	r30, r10
     958:	e3 0f       	add	r30, r19
     95a:	f1 1d       	adc	r31, r1
     95c:	90 83       	st	Z, r25
     95e:	3f 5f       	subi	r19, 0xFF	; 255
     960:	13 13       	cpse	r17, r19
     962:	f9 cf       	rjmp	.-14     	; 0x956 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     964:	00 23       	and	r16, r16
     966:	31 f0       	breq	.+12     	; 0x974 <lcd_int32+0x124>
     968:	f5 01       	movw	r30, r10
     96a:	e3 0f       	add	r30, r19
     96c:	f1 1d       	adc	r31, r1
     96e:	9d e2       	ldi	r25, 0x2D	; 45
     970:	90 83       	st	Z, r25
     972:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     974:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     976:	31 50       	subi	r19, 0x01	; 1
     978:	f5 01       	movw	r30, r10
     97a:	e3 0f       	add	r30, r19
     97c:	f1 1d       	adc	r31, r1
     97e:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     980:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     982:	77 9b       	sbis	0x0e, 7	; 14
     984:	fe cf       	rjmp	.-4      	; 0x982 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     986:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     988:	77 9b       	sbis	0x0e, 7	; 14
     98a:	fe cf       	rjmp	.-4      	; 0x988 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     98c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     990:	98 60       	ori	r25, 0x08	; 8
     992:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     996:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     99a:	97 7f       	andi	r25, 0xF7	; 247
     99c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9a0:	85 ed       	ldi	r24, 0xD5	; 213
     9a2:	8a 95       	dec	r24
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <lcd_int32+0x152>
     9a6:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     9a8:	31 11       	cpse	r19, r1
     9aa:	e5 cf       	rjmp	.-54     	; 0x976 <lcd_int32+0x126>

}
     9ac:	69 96       	adiw	r28, 0x19	; 25
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	de bf       	out	0x3e, r29	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	cd bf       	out	0x3d, r28	; 61
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	ff 90       	pop	r15
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	7f 90       	pop	r7
     9d2:	6f 90       	pop	r6
     9d4:	5f 90       	pop	r5
     9d6:	4f 90       	pop	r4
     9d8:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     9da:	91 2c       	mov	r9, r1
     9dc:	9e 01       	movw	r18, r28
     9de:	2f 5f       	subi	r18, 0xFF	; 255
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	59 01       	movw	r10, r18
     9e4:	91 cf       	rjmp	.-222    	; 0x908 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     9e6:	90 e3       	ldi	r25, 0x30	; 48
     9e8:	b4 cf       	rjmp	.-152    	; 0x952 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     9ea:	f0 94       	com	r15
     9ec:	e0 94       	com	r14
     9ee:	d0 94       	com	r13
     9f0:	c0 94       	com	r12
     9f2:	c1 1c       	adc	r12, r1
     9f4:	d1 1c       	adc	r13, r1
     9f6:	e1 1c       	adc	r14, r1
     9f8:	f1 1c       	adc	r15, r1
     9fa:	54 cf       	rjmp	.-344    	; 0x8a4 <lcd_int32+0x54>

000009fc <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
     9fc:	5f 92       	push	r5
     9fe:	6f 92       	push	r6
     a00:	7f 92       	push	r7
     a02:	8f 92       	push	r8
     a04:	9f 92       	push	r9
     a06:	af 92       	push	r10
     a08:	bf 92       	push	r11
     a0a:	cf 92       	push	r12
     a0c:	df 92       	push	r13
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	cd b7       	in	r28, 0x3d	; 61
     a1c:	de b7       	in	r29, 0x3e	; 62
     a1e:	61 97       	sbiw	r28, 0x11	; 17
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	5c 01       	movw	r10, r24
     a2c:	96 2e       	mov	r9, r22
     a2e:	54 2e       	mov	r5, r20
     a30:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     a32:	8b 2c       	mov	r8, r11
     a34:	88 1c       	adc	r8, r8
     a36:	88 24       	eor	r8, r8
     a38:	88 1c       	adc	r8, r8
     a3a:	78 2c       	mov	r7, r8
     a3c:	9c 01       	movw	r18, r24
     a3e:	97 fd       	sbrc	r25, 7
     a40:	9d c0       	rjmp	.+314    	; 0xb7c <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
     a42:	55 20       	and	r5, r5
     a44:	09 f4       	brne	.+2      	; 0xa48 <lcd_int16+0x4c>
     a46:	8e c0       	rjmp	.+284    	; 0xb64 <lcd_int16+0x168>
     a48:	8e 01       	movw	r16, r28
     a4a:	0f 5f       	subi	r16, 0xFF	; 255
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	78 01       	movw	r14, r16
     a50:	cc 24       	eor	r12, r12
     a52:	ca 94       	dec	r12
     a54:	c5 0c       	add	r12, r5
     a56:	d1 2c       	mov	r13, r1
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	c8 1a       	sub	r12, r24
     a5c:	d8 0a       	sbc	r13, r24
     a5e:	c0 0e       	add	r12, r16
     a60:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     a62:	6a e0       	ldi	r22, 0x0A	; 10
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	c9 01       	movw	r24, r18
     a68:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__divmodhi4>
     a6c:	46 2f       	mov	r20, r22
     a6e:	24 2f       	mov	r18, r20
     a70:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     a72:	80 5d       	subi	r24, 0xD0	; 208
     a74:	f7 01       	movw	r30, r14
     a76:	81 93       	st	Z+, r24
     a78:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     a7a:	ec 15       	cp	r30, r12
     a7c:	fd 05       	cpc	r31, r13
     a7e:	89 f7       	brne	.-30     	; 0xa62 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     a80:	ff 24       	eor	r15, r15
     a82:	f3 94       	inc	r15
     a84:	f5 0c       	add	r15, r5
     a86:	f8 01       	movw	r30, r16
     a88:	e5 0d       	add	r30, r5
     a8a:	f1 1d       	adc	r31, r1
     a8c:	8e e2       	ldi	r24, 0x2E	; 46
     a8e:	80 83       	st	Z, r24
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     a92:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     a94:	6a e0       	ldi	r22, 0x0A	; 10
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	c9 01       	movw	r24, r18
     a9a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__divmodhi4>
     a9e:	46 2f       	mov	r20, r22
     aa0:	24 2f       	mov	r18, r20
     aa2:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	9f 0d       	add	r25, r15
     aa8:	f8 01       	movw	r30, r16
     aaa:	ef 0d       	add	r30, r15
     aac:	f1 1d       	adc	r31, r1
     aae:	80 5d       	subi	r24, 0xD0	; 208
     ab0:	80 83       	st	Z, r24
        }
        while(qr.quot);
     ab2:	21 15       	cp	r18, r1
     ab4:	31 05       	cpc	r19, r1
     ab6:	69 f7       	brne	.-38     	; 0xa92 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     ab8:	61 10       	cpse	r6, r1
     aba:	59 c0       	rjmp	.+178    	; 0xb6e <lcd_int16+0x172>
     abc:	b7 fc       	sbrc	r11, 7
     abe:	63 c0       	rjmp	.+198    	; 0xb86 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     ac0:	99 20       	and	r9, r9
     ac2:	b1 f0       	breq	.+44     	; 0xaf0 <lcd_int16+0xf4>
     ac4:	68 2d       	mov	r22, r8
     ac6:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     ac8:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     aca:	29 2f       	mov	r18, r25
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	49 2d       	mov	r20, r9
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	46 1b       	sub	r20, r22
     ad4:	57 0b       	sbc	r21, r23
     ad6:	24 17       	cp	r18, r20
     ad8:	35 07       	cpc	r19, r21
     ada:	54 f4       	brge	.+20     	; 0xaf0 <lcd_int16+0xf4>
     adc:	9f 5f       	subi	r25, 0xFF	; 255
     ade:	f8 01       	movw	r30, r16
     ae0:	e2 0f       	add	r30, r18
     ae2:	f3 1f       	adc	r31, r19
     ae4:	80 83       	st	Z, r24
     ae6:	29 2f       	mov	r18, r25
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	24 17       	cp	r18, r20
     aec:	35 07       	cpc	r19, r21
     aee:	b4 f3       	brlt	.-20     	; 0xadc <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     af0:	77 20       	and	r7, r7
     af2:	31 f0       	breq	.+12     	; 0xb00 <lcd_int16+0x104>
     af4:	f8 01       	movw	r30, r16
     af6:	e9 0f       	add	r30, r25
     af8:	f1 1d       	adc	r31, r1
     afa:	8d e2       	ldi	r24, 0x2D	; 45
     afc:	80 83       	st	Z, r24
     afe:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b00:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     b02:	91 50       	subi	r25, 0x01	; 1
     b04:	f8 01       	movw	r30, r16
     b06:	e9 0f       	add	r30, r25
     b08:	f1 1d       	adc	r31, r1
     b0a:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b0c:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b0e:	77 9b       	sbis	0x0e, 7	; 14
     b10:	fe cf       	rjmp	.-4      	; 0xb0e <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     b12:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b14:	77 9b       	sbis	0x0e, 7	; 14
     b16:	fe cf       	rjmp	.-4      	; 0xb14 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b18:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b1c:	88 60       	ori	r24, 0x08	; 8
     b1e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b26:	87 7f       	andi	r24, 0xF7	; 247
     b28:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b2c:	f5 ed       	ldi	r31, 0xD5	; 213
     b2e:	fa 95       	dec	r31
     b30:	f1 f7       	brne	.-4      	; 0xb2e <lcd_int16+0x132>
     b32:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     b34:	91 11       	cpse	r25, r1
     b36:	e5 cf       	rjmp	.-54     	; 0xb02 <lcd_int16+0x106>
}
     b38:	61 96       	adiw	r28, 0x11	; 17
     b3a:	0f b6       	in	r0, 0x3f	; 63
     b3c:	f8 94       	cli
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	ff 90       	pop	r15
     b4e:	ef 90       	pop	r14
     b50:	df 90       	pop	r13
     b52:	cf 90       	pop	r12
     b54:	bf 90       	pop	r11
     b56:	af 90       	pop	r10
     b58:	9f 90       	pop	r9
     b5a:	8f 90       	pop	r8
     b5c:	7f 90       	pop	r7
     b5e:	6f 90       	pop	r6
     b60:	5f 90       	pop	r5
     b62:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     b64:	f1 2c       	mov	r15, r1
     b66:	8e 01       	movw	r16, r28
     b68:	0f 5f       	subi	r16, 0xFF	; 255
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	93 cf       	rjmp	.-218    	; 0xa94 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     b6e:	99 20       	and	r9, r9
     b70:	09 f4       	brne	.+2      	; 0xb74 <lcd_int16+0x178>
     b72:	be cf       	rjmp	.-132    	; 0xaf0 <lcd_int16+0xf4>
     b74:	68 2d       	mov	r22, r8
     b76:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     b78:	80 e3       	ldi	r24, 0x30	; 48
     b7a:	a7 cf       	rjmp	.-178    	; 0xaca <lcd_int16+0xce>
     b7c:	22 27       	eor	r18, r18
     b7e:	33 27       	eor	r19, r19
     b80:	28 1b       	sub	r18, r24
     b82:	39 0b       	sbc	r19, r25
     b84:	5e cf       	rjmp	.-324    	; 0xa42 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     b86:	f3 94       	inc	r15
     b88:	f3 94       	inc	r15
     b8a:	f8 01       	movw	r30, r16
     b8c:	e9 0f       	add	r30, r25
     b8e:	f1 1d       	adc	r31, r1
     b90:	8d e2       	ldi	r24, 0x2D	; 45
     b92:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     b94:	99 20       	and	r9, r9
     b96:	59 f0       	breq	.+22     	; 0xbae <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     b98:	2f 2d       	mov	r18, r15
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	49 2d       	mov	r20, r9
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	24 17       	cp	r18, r20
     ba2:	35 07       	cpc	r19, r21
     ba4:	24 f4       	brge	.+8      	; 0xbae <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     ba6:	9f 2d       	mov	r25, r15
                bSigned = 0;
     ba8:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	97 cf       	rjmp	.-210    	; 0xadc <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     bae:	9f 2d       	mov	r25, r15
     bb0:	a7 cf       	rjmp	.-178    	; 0xb00 <lcd_int16+0x104>

00000bb2 <lm73_temp_convert>:

    //Yeah, this is for you to do! ;^)
    // temp digits length of 2
              

} //lm73_temp_convert
     bb2:	08 95       	ret

00000bb4 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	0b b6       	in	r0, 0x3b	; 59
     bc0:	0f 92       	push	r0
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	ef 93       	push	r30
     bd0:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     bd2:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     bd6:	8e 2f       	mov	r24, r30
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	fc 01       	movw	r30, r24
     bdc:	38 97       	sbiw	r30, 0x08	; 8
     bde:	e1 35       	cpi	r30, 0x51	; 81
     be0:	f1 05       	cpc	r31, r1
     be2:	b0 f0       	brcs	.+44     	; 0xc10 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     be4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     be8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	bf 91       	pop	r27
     bf8:	af 91       	pop	r26
     bfa:	9f 91       	pop	r25
     bfc:	8f 91       	pop	r24
     bfe:	3f 91       	pop	r19
     c00:	2f 91       	pop	r18
     c02:	0f 90       	pop	r0
     c04:	0b be       	out	0x3b, r0	; 59
     c06:	0f 90       	pop	r0
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	0f 90       	pop	r0
     c0c:	1f 90       	pop	r1
     c0e:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     c10:	ea 5b       	subi	r30, 0xBA	; 186
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     c18:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_buf_ptr.1780>
     c1c:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <twi_buf>
     c20:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <twi_buf+0x1>
     c24:	e8 0f       	add	r30, r24
     c26:	f1 1d       	adc	r31, r1
     c28:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     c2c:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     c2e:	84 e9       	ldi	r24, 0x94	; 148
     c30:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
     c34:	de cf       	rjmp	.-68     	; 0xbf2 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     c36:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <twi_bus_addr>
     c3a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
     c3e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
     c42:	85 e8       	ldi	r24, 0x85	; 133
     c44:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     c48:	d4 cf       	rjmp	.-88     	; 0xbf2 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     c4a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_buf_ptr.1780>
     c4e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <twi_msg_size>
     c52:	89 17       	cp	r24, r25
     c54:	60 f7       	brcc	.-40     	; 0xc2e <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     c56:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <twi_buf>
     c5a:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <twi_buf+0x1>
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	98 0f       	add	r25, r24
     c62:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <twi_buf_ptr.1780>
     c66:	e8 0f       	add	r30, r24
     c68:	f1 1d       	adc	r31, r1
     c6a:	80 81       	ld	r24, Z
     c6c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
     c70:	85 e8       	ldi	r24, 0x85	; 133
     c72:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c76:	bd cf       	rjmp	.-134    	; 0xbf2 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     c78:	85 ea       	ldi	r24, 0xA5	; 165
     c7a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     c7e:	b9 cf       	rjmp	.-142    	; 0xbf2 <__vector_33+0x3e>
     c80:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     c84:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <twi_msg_size>
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	dc f4       	brge	.+54     	; 0xcca <__vector_33+0x116>
     c94:	85 ec       	ldi	r24, 0xC5	; 197
     c96:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c9a:	ab cf       	rjmp	.-170    	; 0xbf2 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     c9c:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <twi_buf>
     ca0:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <twi_buf+0x1>
     ca4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <twi_buf_ptr.1780>
     ca8:	21 e0       	ldi	r18, 0x01	; 1
     caa:	28 0f       	add	r18, r24
     cac:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <twi_buf_ptr.1780>
     cb0:	e8 0f       	add	r30, r24
     cb2:	f1 1d       	adc	r31, r1
     cb4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     cb8:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     cba:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <twi_msg_size>
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	28 17       	cp	r18, r24
     cc6:	39 07       	cpc	r19, r25
     cc8:	2c f3       	brlt	.-54     	; 0xc94 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     cca:	85 e8       	ldi	r24, 0x85	; 133
     ccc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     cd0:	90 cf       	rjmp	.-224    	; 0xbf2 <__vector_33+0x3e>

00000cd2 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cd2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
     cd6:	81 70       	andi	r24, 0x01	; 1
     cd8:	08 95       	ret

00000cda <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cda:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     cde:	90 fd       	sbrc	r25, 0
     ce0:	fc cf       	rjmp	.-8      	; 0xcda <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     ce2:	8e 7f       	andi	r24, 0xFE	; 254
     ce4:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
     ce8:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <twi_buf+0x1>
     cec:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
     cf0:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
     cf4:	85 ea       	ldi	r24, 0xA5	; 165
     cf6:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     cfa:	08 95       	ret

00000cfc <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     cfc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     d00:	90 fd       	sbrc	r25, 0
     d02:	fc cf       	rjmp	.-8      	; 0xcfc <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     d04:	81 60       	ori	r24, 0x01	; 1
     d06:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
     d0a:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <twi_buf+0x1>
     d0e:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
     d12:	40 93 61 01 	sts	0x0161, r20	; 0x800161 <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
     d16:	85 ea       	ldi	r24, 0xA5	; 165
     d18:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     d1c:	08 95       	ret

00000d1e <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
     d1e:	8f ef       	ldi	r24, 0xFF	; 255
     d20:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
     d24:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
     d28:	8c e0       	ldi	r24, 0x0C	; 12
     d2a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     d2e:	08 95       	ret

00000d30 <uart_putc>:
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
     d30:	5d 9b       	sbis	0x0b, 5	; 11
     d32:	fe cf       	rjmp	.-4      	; 0xd30 <uart_putc>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
     d34:	8c b9       	out	0x0c, r24	; 12
  while (!(UCSR0A & (1 << UDRE0)))
     d36:	5d 9b       	sbis	0x0b, 5	; 11
     d38:	fe cf       	rjmp	.-4      	; 0xd36 <uart_putc+0x6>
    ; // Wait for previous transmissions
}
     d3a:	08 95       	ret

00000d3c <uart1_putc>:
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data)
{
  while (!(UCSR1A & (1 << UDRE1)))
     d3c:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d40:	95 ff       	sbrs	r25, 5
     d42:	fc cf       	rjmp	.-8      	; 0xd3c <uart1_putc>
    ;          // Wait for previous transmissions
  UDR1 = data; // Send data byte
     d44:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  while (!(UCSR1A & (1 << UDRE1)))
     d48:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d4c:	85 ff       	sbrs	r24, 5
     d4e:	fc cf       	rjmp	.-8      	; 0xd48 <uart1_putc+0xc>
    ; // Wait for previous transmissions
}
     d50:	08 95       	ret

00000d52 <uart_puts>:
//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str)
{
     d52:	fc 01       	movw	r30, r24
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     d54:	90 81       	ld	r25, Z
     d56:	99 23       	and	r25, r25
     d58:	49 f0       	breq	.+18     	; 0xd6c <uart_puts+0x1a>
     d5a:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
     d5c:	5d 9b       	sbis	0x0b, 5	; 11
     d5e:	fe cf       	rjmp	.-4      	; 0xd5c <uart_puts+0xa>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
     d60:	9c b9       	out	0x0c, r25	; 12
  while (!(UCSR0A & (1 << UDRE0)))
     d62:	5d 9b       	sbis	0x0b, 5	; 11
     d64:	fe cf       	rjmp	.-4      	; 0xd62 <uart_puts+0x10>
//void uart_puts(unsigned char *str) {
void uart_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     d66:	91 91       	ld	r25, Z+
     d68:	91 11       	cpse	r25, r1
     d6a:	f8 cf       	rjmp	.-16     	; 0xd5c <uart_puts+0xa>
     d6c:	08 95       	ret

00000d6e <uart1_puts>:
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     d6e:	fc 01       	movw	r30, r24
     d70:	20 81       	ld	r18, Z
     d72:	22 23       	and	r18, r18
     d74:	71 f0       	breq	.+28     	; 0xd92 <uart1_puts+0x24>
     d76:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data)
{
  while (!(UCSR1A & (1 << UDRE1)))
     d78:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d7c:	95 ff       	sbrs	r25, 5
     d7e:	fc cf       	rjmp	.-8      	; 0xd78 <uart1_puts+0xa>
    ;          // Wait for previous transmissions
  UDR1 = data; // Send data byte
     d80:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  while (!(UCSR1A & (1 << UDRE1)))
     d84:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d88:	95 ff       	sbrs	r25, 5
     d8a:	fc cf       	rjmp	.-8      	; 0xd84 <uart1_puts+0x16>
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     d8c:	21 91       	ld	r18, Z+
     d8e:	21 11       	cpse	r18, r1
     d90:	f3 cf       	rjmp	.-26     	; 0xd78 <uart1_puts+0xa>
     d92:	08 95       	ret

00000d94 <uart_puts_p>:
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str)
{
  // Loop through string, sending each character
  while (pgm_read_byte(str) != 0x00)
     d94:	9c 01       	movw	r18, r24
     d96:	fc 01       	movw	r30, r24
     d98:	44 91       	lpm	r20, Z
     d9a:	44 23       	and	r20, r20
     d9c:	69 f0       	breq	.+26     	; 0xdb8 <uart_puts_p+0x24>
  {
    uart_putc(pgm_read_byte(str++));
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	f9 01       	movw	r30, r18
     da2:	24 91       	lpm	r18, Z
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
     da4:	5d 9b       	sbis	0x0b, 5	; 11
     da6:	fe cf       	rjmp	.-4      	; 0xda4 <uart_puts_p+0x10>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
     da8:	2c b9       	out	0x0c, r18	; 12
  while (!(UCSR0A & (1 << UDRE0)))
     daa:	5d 9b       	sbis	0x0b, 5	; 11
     dac:	fe cf       	rjmp	.-4      	; 0xdaa <uart_puts_p+0x16>
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str)
{
  // Loop through string, sending each character
  while (pgm_read_byte(str) != 0x00)
     dae:	9c 01       	movw	r18, r24
     db0:	fc 01       	movw	r30, r24
     db2:	44 91       	lpm	r20, Z
     db4:	41 11       	cpse	r20, r1
     db6:	f3 cf       	rjmp	.-26     	; 0xd9e <uart_puts_p+0xa>
  {
    uart_putc(pgm_read_byte(str++));
  }
}
     db8:	08 95       	ret

00000dba <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init()
{
 //rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); //INTERRUPTS ENABLED
     dba:	8a b1       	in	r24, 0x0a	; 10
     dbc:	88 69       	ori	r24, 0x98	; 152
     dbe:	8a b9       	out	0x0a, r24	; 10
                                                         //  UCSR1B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     dc0:	e5 e9       	ldi	r30, 0x95	; 149
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	86 60       	ori	r24, 0x06	; 6
     dc8:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >> 8); //load upper byte of the baud rate into UBRR
     dca:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L = BAUDVALUE;        //load lower byte of the baud rate into UBRR
     dce:	87 e6       	ldi	r24, 0x67	; 103
     dd0:	89 b9       	out	0x09, r24	; 9
     dd2:	08 95       	ret

00000dd4 <uart1_init>:

void uart1_init()
{
  //rx and tx enable, receive interrupt enabled, 8 bit characters
  //UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1 << RXEN1) | (1 << TXEN1); //INTERRUPS DISABLED
     dd4:	ea e9       	ldi	r30, 0x9A	; 154
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	88 61       	ori	r24, 0x18	; 24
     ddc:	80 83       	st	Z, r24

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     dde:	ed e9       	ldi	r30, 0x9D	; 157
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	86 60       	ori	r24, 0x06	; 6
     de6:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >> 8); //load upper byte of the baud rate into UBRR
     de8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L = BAUDVALUE_1;        //load lower byte of the baud rate into UBRR
     dec:	87 e6       	ldi	r24, 0x67	; 103
     dee:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     df2:	08 95       	ret

00000df4 <uart_getc>:
//
char uart_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR0A & (1 << RXC0)))
     df4:	80 e8       	ldi	r24, 0x80	; 128
     df6:	9e e3       	ldi	r25, 0x3E	; 62
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <uart_getc+0xa>
     dfa:	01 97       	sbiw	r24, 0x01	; 1
  {
    timer++;
    if (timer >= 16000)
     dfc:	21 f0       	breq	.+8      	; 0xe06 <uart_getc+0x12>
//
char uart_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR0A & (1 << RXC0)))
     dfe:	5f 9b       	sbis	0x0b, 7	; 11
     e00:	fc cf       	rjmp	.-8      	; 0xdfa <uart_getc+0x6>
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
    // return -1;

  }              // Wait for byte to arrive
  return (UDR0); //return the received data
     e02:	8c b1       	in	r24, 0x0c	; 12
     e04:	08 95       	ret
  while (!(UCSR0A & (1 << RXC0)))
  {
    timer++;
    if (timer >= 16000)
    {
      return (0);
     e06:	80 e0       	ldi	r24, 0x00	; 0
    //return a -1 if no data comes back.
    // return -1;

  }              // Wait for byte to arrive
  return (UDR0); //return the received data
}
     e08:	08 95       	ret

00000e0a <uart1_getc>:
//
char uart1_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR1A & (1 << RXC1)))
     e0a:	80 e8       	ldi	r24, 0x80	; 128
     e0c:	9e e3       	ldi	r25, 0x3E	; 62
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <uart1_getc+0xa>
     e10:	01 97       	sbiw	r24, 0x01	; 1
  {
    timer++;
    if (timer >= 16000)
     e12:	39 f0       	breq	.+14     	; 0xe22 <uart1_getc+0x18>
//
char uart1_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR1A & (1 << RXC1)))
     e14:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     e18:	27 ff       	sbrs	r18, 7
     e1a:	fa cf       	rjmp	.-12     	; 0xe10 <uart1_getc+0x6>
    //what should we return if nothing comes in?
    //return the data into a global variable
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
  }              // Wait for byte to arrive
  return (UDR1); //return the received data
     e1c:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     e20:	08 95       	ret
  while (!(UCSR1A & (1 << RXC1)))
  {
    timer++;
    if (timer >= 16000)
    {
      return (0);
     e22:	80 e0       	ldi	r24, 0x00	; 0
    //return the data into a global variable
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
  }              // Wait for byte to arrive
  return (UDR1); //return the received data
}
     e24:	08 95       	ret

00000e26 <main>:
//Initalizes the SPI port on the mega128. Does not do any further
// external device specific initalizations.
//********************************************************************
void spi_init(void)
{
    DDRB |= 0x07; //Turn on SS, MOSI, SCLK
     e26:	87 b3       	in	r24, 0x17	; 23
     e28:	87 60       	ori	r24, 0x07	; 7
     e2a:	87 bb       	out	0x17, r24	; 23
    //mstr mode, sck=clk/2, cycle 1/2 phase, low polarity, MSB 1st,
    //no interrupts, enable SPI, clk low initially, rising edge sample
    SPCR = (1 << SPE) | (1 << MSTR);
     e2c:	80 e5       	ldi	r24, 0x50	; 80
     e2e:	8d b9       	out	0x0d, r24	; 13
    SPSR = (1 << SPI2X); //SPI at 2x speed (8 MHz)
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	8e b9       	out	0x0e, r24	; 14
int main()
{ // slave
    int16_t lm73_temp; //a place to assemble the temperature from the lm74
    float lm73_temp_C, lm73_temp_F;
    spi_init(); //initalize SPI
    init_twi(); //initalize TWI (twi_master.h)
     e34:	0e 94 8f 06 	call	0xd1e	; 0xd1e <init_twi>
    uart_init(); // initalize UART (uart_functions.h)
     e38:	0e 94 dd 06 	call	0xdba	; 0xdba <uart_init>
    lcd_init(); // initalize LCD
     e3c:	0e 94 66 03 	call	0x6cc	; 0x6cc <lcd_init>
    sei(); //enable interrupts before entering loop
     e40:	78 94       	sei
    // DDRE = (1 << PORTE0) | (1 << PORTE1); // making the ports outputs
    //set LM73 mode for reading temperature by loading pointer register
    lm73_wr_buf[0] = LM73_PTR_TEMP;             //load lm73_wr_buf[0] with temperature pointer address
     e42:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <lm73_wr_buf>
    twi_start_wr(LM73_ADDRESS, lm73_wr_buf, 2); //start the TWI write process
     e46:	42 e0       	ldi	r20, 0x02	; 2
     e48:	69 e5       	ldi	r22, 0x59	; 89
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	80 e9       	ldi	r24, 0x90	; 144
     e4e:	0e 94 6d 06 	call	0xcda	; 0xcda <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e52:	8f e3       	ldi	r24, 0x3F	; 63
     e54:	9f e1       	ldi	r25, 0x1F	; 31
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <main+0x30>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <main+0x36>
     e5c:	00 00       	nop
    _delay_ms(2);                               //wait for the xfer to finish

    clear_display(); //clean up the display
     e5e:	0e 94 b9 02 	call	0x572	; 0x572 <clear_display>
     e62:	c9 e2       	ldi	r28, 0x29	; 41
     e64:	d1 e0       	ldi	r29, 0x01	; 1
        lm73_temp_F = (lm73_temp_C * 9 / 5) + 32;    // convert C to F
        dtostrf(lm73_temp_C, 0, 1, lcd_string_array_C); // converting float to string
        dtostrf(lm73_temp_F, 0, 1, lcd_string_array_F); // converting float to string
        // itoa(lm73_temp_C, lcd_string_array, 10);      //convert to string in array with itoa() from avr-libc
        strcpy(lcd_string_array, lcd_string_array_C); // add C degrees
        strcat(lcd_string_array, "C ");
     e66:	83 e4       	ldi	r24, 0x43	; 67
     e68:	c8 2e       	mov	r12, r24
     e6a:	80 e2       	ldi	r24, 0x20	; 32
     e6c:	d8 2e       	mov	r13, r24
        strcat(lcd_string_array, lcd_string_array_F);
        strcat(lcd_string_array, "F");
     e6e:	96 e4       	ldi	r25, 0x46	; 70
     e70:	e9 2e       	mov	r14, r25
     e72:	f1 2c       	mov	r15, r1
     e74:	9f ef       	ldi	r25, 0xFF	; 255
     e76:	23 ed       	ldi	r18, 0xD3	; 211
     e78:	80 e3       	ldi	r24, 0x30	; 48
     e7a:	91 50       	subi	r25, 0x01	; 1
     e7c:	20 40       	sbci	r18, 0x00	; 0
     e7e:	80 40       	sbci	r24, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <main+0x54>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <main+0x5e>
     e84:	00 00       	nop
    // cursor_home();

    while (1)
    {                                               //main while loop
        _delay_ms(1000);                             //tenth second wait
        clear_display();                            //wipe the display
     e86:	0e 94 b9 02 	call	0x572	; 0x572 <clear_display>
        twi_start_rd(LM73_ADDRESS, lm73_rd_buf, 2); //read temperature data from LM73 (2 bytes)
     e8a:	42 e0       	ldi	r20, 0x02	; 2
     e8c:	6b e5       	ldi	r22, 0x5B	; 91
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	80 e9       	ldi	r24, 0x90	; 144
     e92:	0e 94 7e 06 	call	0xcfc	; 0xcfc <twi_start_rd>
     e96:	8f e3       	ldi	r24, 0x3F	; 63
     e98:	9f e1       	ldi	r25, 0x1F	; 31
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <main+0x74>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <main+0x7a>
     ea0:	00 00       	nop
        _delay_ms(2);                               //wait for it to finish
        lm73_temp = lm73_rd_buf[0];                 //save high temperature byte into lm73_temp
        lm73_temp = lm73_temp << 8;                 //shift it into upper byte
        lm73_temp |= lm73_rd_buf[1];                //"OR" in the low temp byte to lm73_temp
        lm73_temp_C = lm73_temp / (float)256;               // how to find the temp in C
     ea2:	60 91 5b 01 	lds	r22, 0x015B	; 0x80015b <lm73_rd_buf>
     ea6:	70 91 5c 01 	lds	r23, 0x015C	; 0x80015c <lm73_rd_buf+0x1>
     eaa:	76 27       	eor	r23, r22
     eac:	67 27       	eor	r22, r23
     eae:	76 27       	eor	r23, r22
     eb0:	07 2e       	mov	r0, r23
     eb2:	00 0c       	add	r0, r0
     eb4:	88 0b       	sbc	r24, r24
     eb6:	99 0b       	sbc	r25, r25
     eb8:	0e 94 01 09 	call	0x1202	; 0x1202 <__floatsisf>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e8       	ldi	r20, 0x80	; 128
     ec2:	5b e3       	ldi	r21, 0x3B	; 59
     ec4:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
     ec8:	4b 01       	movw	r8, r22
     eca:	5c 01       	movw	r10, r24
        lm73_temp_F = (lm73_temp_C * 9 / 5) + 32;    // convert C to F
        dtostrf(lm73_temp_C, 0, 1, lcd_string_array_C); // converting float to string
     ecc:	04 e0       	ldi	r16, 0x04	; 4
     ece:	11 e0       	ldi	r17, 0x01	; 1
     ed0:	21 e0       	ldi	r18, 0x01	; 1
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <dtostrf>
        dtostrf(lm73_temp_F, 0, 1, lcd_string_array_F); // converting float to string
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e1       	ldi	r20, 0x10	; 16
     ede:	51 e4       	ldi	r21, 0x41	; 65
     ee0:	c5 01       	movw	r24, r10
     ee2:	b4 01       	movw	r22, r8
     ee4:	0e 94 8d 09 	call	0x131a	; 0x131a <__mulsf3>
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	40 ea       	ldi	r20, 0xA0	; 160
     eee:	50 e4       	ldi	r21, 0x40	; 64
     ef0:	0e 94 8d 08 	call	0x111a	; 0x111a <__divsf3>
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	52 e4       	ldi	r21, 0x42	; 66
     efc:	0e 94 21 08 	call	0x1042	; 0x1042 <__addsf3>
     f00:	04 e1       	ldi	r16, 0x14	; 20
     f02:	11 e0       	ldi	r17, 0x01	; 1
     f04:	21 e0       	ldi	r18, 0x01	; 1
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <dtostrf>
        // itoa(lm73_temp_C, lcd_string_array, 10);      //convert to string in array with itoa() from avr-libc
        strcpy(lcd_string_array, lcd_string_array_C); // add C degrees
     f0c:	64 e0       	ldi	r22, 0x04	; 4
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	89 e2       	ldi	r24, 0x29	; 41
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0e 94 1a 0a 	call	0x1434	; 0x1434 <strcpy>
        strcat(lcd_string_array, "C ");
     f18:	fe 01       	movw	r30, r28
     f1a:	01 90       	ld	r0, Z+
     f1c:	00 20       	and	r0, r0
     f1e:	e9 f7       	brne	.-6      	; 0xf1a <main+0xf4>
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	cf 01       	movw	r24, r30
     f24:	89 52       	subi	r24, 0x29	; 41
     f26:	91 40       	sbci	r25, 0x01	; 1
     f28:	d1 82       	std	Z+1, r13	; 0x01
     f2a:	c0 82       	st	Z, r12
        strcat(lcd_string_array, lcd_string_array_F);
     f2c:	b8 01       	movw	r22, r16
     f2e:	85 5d       	subi	r24, 0xD5	; 213
     f30:	9e 4f       	sbci	r25, 0xFE	; 254
     f32:	0e 94 1a 0a 	call	0x1434	; 0x1434 <strcpy>
        strcat(lcd_string_array, "F");
     f36:	fe 01       	movw	r30, r28
     f38:	01 90       	ld	r0, Z+
     f3a:	00 20       	and	r0, r0
     f3c:	e9 f7       	brne	.-6      	; 0xf38 <main+0x112>
     f3e:	31 97       	sbiw	r30, 0x01	; 1
     f40:	f1 82       	std	Z+1, r15	; 0x01
     f42:	e0 82       	st	Z, r14
        string2lcd(lcd_string_array);               //send the string to LCD (lcd_functions)
     f44:	89 e2       	ldi	r24, 0x29	; 41
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 39 03 	call	0x672	; 0x672 <string2lcd>

        // *************** start tx portion **********************
        uart_puts(lcd_string_array); // put what you want display, put string
     f4c:	89 e2       	ldi	r24, 0x29	; 41
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 a9 06 	call	0xd52	; 0xd52 <uart_puts>
        uart_putc('\0'); // null character
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	0e 94 98 06 	call	0xd30	; 0xd30 <uart_putc>
     f5a:	8c cf       	rjmp	.-232    	; 0xe74 <main+0x4e>

00000f5c <__divmodhi4>:
     f5c:	97 fb       	bst	r25, 7
     f5e:	07 2e       	mov	r0, r23
     f60:	16 f4       	brtc	.+4      	; 0xf66 <__divmodhi4+0xa>
     f62:	00 94       	com	r0
     f64:	07 d0       	rcall	.+14     	; 0xf74 <__divmodhi4_neg1>
     f66:	77 fd       	sbrc	r23, 7
     f68:	09 d0       	rcall	.+18     	; 0xf7c <__divmodhi4_neg2>
     f6a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodhi4>
     f6e:	07 fc       	sbrc	r0, 7
     f70:	05 d0       	rcall	.+10     	; 0xf7c <__divmodhi4_neg2>
     f72:	3e f4       	brtc	.+14     	; 0xf82 <__divmodhi4_exit>

00000f74 <__divmodhi4_neg1>:
     f74:	90 95       	com	r25
     f76:	81 95       	neg	r24
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	08 95       	ret

00000f7c <__divmodhi4_neg2>:
     f7c:	70 95       	com	r23
     f7e:	61 95       	neg	r22
     f80:	7f 4f       	sbci	r23, 0xFF	; 255

00000f82 <__divmodhi4_exit>:
     f82:	08 95       	ret

00000f84 <__divmodsi4>:
     f84:	05 2e       	mov	r0, r21
     f86:	97 fb       	bst	r25, 7
     f88:	1e f4       	brtc	.+6      	; 0xf90 <__divmodsi4+0xc>
     f8a:	00 94       	com	r0
     f8c:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <__negsi2>
     f90:	57 fd       	sbrc	r21, 7
     f92:	07 d0       	rcall	.+14     	; 0xfa2 <__divmodsi4_neg2>
     f94:	0e 94 fe 07 	call	0xffc	; 0xffc <__udivmodsi4>
     f98:	07 fc       	sbrc	r0, 7
     f9a:	03 d0       	rcall	.+6      	; 0xfa2 <__divmodsi4_neg2>
     f9c:	4e f4       	brtc	.+18     	; 0xfb0 <__divmodsi4_exit>
     f9e:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__negsi2>

00000fa2 <__divmodsi4_neg2>:
     fa2:	50 95       	com	r21
     fa4:	40 95       	com	r20
     fa6:	30 95       	com	r19
     fa8:	21 95       	neg	r18
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	4f 4f       	sbci	r20, 0xFF	; 255
     fae:	5f 4f       	sbci	r21, 0xFF	; 255

00000fb0 <__divmodsi4_exit>:
     fb0:	08 95       	ret

00000fb2 <__negsi2>:
     fb2:	90 95       	com	r25
     fb4:	80 95       	com	r24
     fb6:	70 95       	com	r23
     fb8:	61 95       	neg	r22
     fba:	7f 4f       	sbci	r23, 0xFF	; 255
     fbc:	8f 4f       	sbci	r24, 0xFF	; 255
     fbe:	9f 4f       	sbci	r25, 0xFF	; 255
     fc0:	08 95       	ret

00000fc2 <__tablejump2__>:
     fc2:	ee 0f       	add	r30, r30
     fc4:	ff 1f       	adc	r31, r31
     fc6:	00 24       	eor	r0, r0
     fc8:	00 1c       	adc	r0, r0
     fca:	0b be       	out	0x3b, r0	; 59
     fcc:	07 90       	elpm	r0, Z+
     fce:	f6 91       	elpm	r31, Z
     fd0:	e0 2d       	mov	r30, r0
     fd2:	09 94       	ijmp

00000fd4 <__udivmodhi4>:
     fd4:	aa 1b       	sub	r26, r26
     fd6:	bb 1b       	sub	r27, r27
     fd8:	51 e1       	ldi	r21, 0x11	; 17
     fda:	07 c0       	rjmp	.+14     	; 0xfea <__udivmodhi4_ep>

00000fdc <__udivmodhi4_loop>:
     fdc:	aa 1f       	adc	r26, r26
     fde:	bb 1f       	adc	r27, r27
     fe0:	a6 17       	cp	r26, r22
     fe2:	b7 07       	cpc	r27, r23
     fe4:	10 f0       	brcs	.+4      	; 0xfea <__udivmodhi4_ep>
     fe6:	a6 1b       	sub	r26, r22
     fe8:	b7 0b       	sbc	r27, r23

00000fea <__udivmodhi4_ep>:
     fea:	88 1f       	adc	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	5a 95       	dec	r21
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__udivmodhi4_loop>
     ff2:	80 95       	com	r24
     ff4:	90 95       	com	r25
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	08 95       	ret

00000ffc <__udivmodsi4>:
     ffc:	a1 e2       	ldi	r26, 0x21	; 33
     ffe:	1a 2e       	mov	r1, r26
    1000:	aa 1b       	sub	r26, r26
    1002:	bb 1b       	sub	r27, r27
    1004:	fd 01       	movw	r30, r26
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <__udivmodsi4_ep>

00001008 <__udivmodsi4_loop>:
    1008:	aa 1f       	adc	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	ee 1f       	adc	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	a2 17       	cp	r26, r18
    1012:	b3 07       	cpc	r27, r19
    1014:	e4 07       	cpc	r30, r20
    1016:	f5 07       	cpc	r31, r21
    1018:	20 f0       	brcs	.+8      	; 0x1022 <__udivmodsi4_ep>
    101a:	a2 1b       	sub	r26, r18
    101c:	b3 0b       	sbc	r27, r19
    101e:	e4 0b       	sbc	r30, r20
    1020:	f5 0b       	sbc	r31, r21

00001022 <__udivmodsi4_ep>:
    1022:	66 1f       	adc	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	1a 94       	dec	r1
    102c:	69 f7       	brne	.-38     	; 0x1008 <__udivmodsi4_loop>
    102e:	60 95       	com	r22
    1030:	70 95       	com	r23
    1032:	80 95       	com	r24
    1034:	90 95       	com	r25
    1036:	9b 01       	movw	r18, r22
    1038:	ac 01       	movw	r20, r24
    103a:	bd 01       	movw	r22, r26
    103c:	cf 01       	movw	r24, r30
    103e:	08 95       	ret

00001040 <__subsf3>:
    1040:	50 58       	subi	r21, 0x80	; 128

00001042 <__addsf3>:
    1042:	bb 27       	eor	r27, r27
    1044:	aa 27       	eor	r26, r26
    1046:	0e 94 38 08 	call	0x1070	; 0x1070 <__addsf3x>
    104a:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_round>
    104e:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_pscA>
    1052:	38 f0       	brcs	.+14     	; 0x1062 <__addsf3+0x20>
    1054:	0e 94 4c 09 	call	0x1298	; 0x1298 <__fp_pscB>
    1058:	20 f0       	brcs	.+8      	; 0x1062 <__addsf3+0x20>
    105a:	39 f4       	brne	.+14     	; 0x106a <__addsf3+0x28>
    105c:	9f 3f       	cpi	r25, 0xFF	; 255
    105e:	19 f4       	brne	.+6      	; 0x1066 <__addsf3+0x24>
    1060:	26 f4       	brtc	.+8      	; 0x106a <__addsf3+0x28>
    1062:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_nan>
    1066:	0e f4       	brtc	.+2      	; 0x106a <__addsf3+0x28>
    1068:	e0 95       	com	r30
    106a:	e7 fb       	bst	r30, 7
    106c:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>

00001070 <__addsf3x>:
    1070:	e9 2f       	mov	r30, r25
    1072:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__fp_split3>
    1076:	58 f3       	brcs	.-42     	; 0x104e <__addsf3+0xc>
    1078:	ba 17       	cp	r27, r26
    107a:	62 07       	cpc	r22, r18
    107c:	73 07       	cpc	r23, r19
    107e:	84 07       	cpc	r24, r20
    1080:	95 07       	cpc	r25, r21
    1082:	20 f0       	brcs	.+8      	; 0x108c <__addsf3x+0x1c>
    1084:	79 f4       	brne	.+30     	; 0x10a4 <__addsf3x+0x34>
    1086:	a6 f5       	brtc	.+104    	; 0x10f0 <__addsf3x+0x80>
    1088:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_zero>
    108c:	0e f4       	brtc	.+2      	; 0x1090 <__addsf3x+0x20>
    108e:	e0 95       	com	r30
    1090:	0b 2e       	mov	r0, r27
    1092:	ba 2f       	mov	r27, r26
    1094:	a0 2d       	mov	r26, r0
    1096:	0b 01       	movw	r0, r22
    1098:	b9 01       	movw	r22, r18
    109a:	90 01       	movw	r18, r0
    109c:	0c 01       	movw	r0, r24
    109e:	ca 01       	movw	r24, r20
    10a0:	a0 01       	movw	r20, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	ff 27       	eor	r31, r31
    10a6:	59 1b       	sub	r21, r25
    10a8:	99 f0       	breq	.+38     	; 0x10d0 <__addsf3x+0x60>
    10aa:	59 3f       	cpi	r21, 0xF9	; 249
    10ac:	50 f4       	brcc	.+20     	; 0x10c2 <__addsf3x+0x52>
    10ae:	50 3e       	cpi	r21, 0xE0	; 224
    10b0:	68 f1       	brcs	.+90     	; 0x110c <__stack+0xd>
    10b2:	1a 16       	cp	r1, r26
    10b4:	f0 40       	sbci	r31, 0x00	; 0
    10b6:	a2 2f       	mov	r26, r18
    10b8:	23 2f       	mov	r18, r19
    10ba:	34 2f       	mov	r19, r20
    10bc:	44 27       	eor	r20, r20
    10be:	58 5f       	subi	r21, 0xF8	; 248
    10c0:	f3 cf       	rjmp	.-26     	; 0x10a8 <__addsf3x+0x38>
    10c2:	46 95       	lsr	r20
    10c4:	37 95       	ror	r19
    10c6:	27 95       	ror	r18
    10c8:	a7 95       	ror	r26
    10ca:	f0 40       	sbci	r31, 0x00	; 0
    10cc:	53 95       	inc	r21
    10ce:	c9 f7       	brne	.-14     	; 0x10c2 <__addsf3x+0x52>
    10d0:	7e f4       	brtc	.+30     	; 0x10f0 <__addsf3x+0x80>
    10d2:	1f 16       	cp	r1, r31
    10d4:	ba 0b       	sbc	r27, r26
    10d6:	62 0b       	sbc	r22, r18
    10d8:	73 0b       	sbc	r23, r19
    10da:	84 0b       	sbc	r24, r20
    10dc:	ba f0       	brmi	.+46     	; 0x110c <__stack+0xd>
    10de:	91 50       	subi	r25, 0x01	; 1
    10e0:	a1 f0       	breq	.+40     	; 0x110a <__stack+0xb>
    10e2:	ff 0f       	add	r31, r31
    10e4:	bb 1f       	adc	r27, r27
    10e6:	66 1f       	adc	r22, r22
    10e8:	77 1f       	adc	r23, r23
    10ea:	88 1f       	adc	r24, r24
    10ec:	c2 f7       	brpl	.-16     	; 0x10de <__addsf3x+0x6e>
    10ee:	0e c0       	rjmp	.+28     	; 0x110c <__stack+0xd>
    10f0:	ba 0f       	add	r27, r26
    10f2:	62 1f       	adc	r22, r18
    10f4:	73 1f       	adc	r23, r19
    10f6:	84 1f       	adc	r24, r20
    10f8:	48 f4       	brcc	.+18     	; 0x110c <__stack+0xd>
    10fa:	87 95       	ror	r24
    10fc:	77 95       	ror	r23
    10fe:	67 95       	ror	r22
    1100:	b7 95       	ror	r27
    1102:	f7 95       	ror	r31
    1104:	9e 3f       	cpi	r25, 0xFE	; 254
    1106:	08 f0       	brcs	.+2      	; 0x110a <__stack+0xb>
    1108:	b0 cf       	rjmp	.-160    	; 0x106a <__addsf3+0x28>
    110a:	93 95       	inc	r25
    110c:	88 0f       	add	r24, r24
    110e:	08 f0       	brcs	.+2      	; 0x1112 <__stack+0x13>
    1110:	99 27       	eor	r25, r25
    1112:	ee 0f       	add	r30, r30
    1114:	97 95       	ror	r25
    1116:	87 95       	ror	r24
    1118:	08 95       	ret

0000111a <__divsf3>:
    111a:	0e 94 a1 08 	call	0x1142	; 0x1142 <__divsf3x>
    111e:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_round>
    1122:	0e 94 4c 09 	call	0x1298	; 0x1298 <__fp_pscB>
    1126:	58 f0       	brcs	.+22     	; 0x113e <__divsf3+0x24>
    1128:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_pscA>
    112c:	40 f0       	brcs	.+16     	; 0x113e <__divsf3+0x24>
    112e:	29 f4       	brne	.+10     	; 0x113a <__divsf3+0x20>
    1130:	5f 3f       	cpi	r21, 0xFF	; 255
    1132:	29 f0       	breq	.+10     	; 0x113e <__divsf3+0x24>
    1134:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    1138:	51 11       	cpse	r21, r1
    113a:	0c 94 87 09 	jmp	0x130e	; 0x130e <__fp_szero>
    113e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_nan>

00001142 <__divsf3x>:
    1142:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__fp_split3>
    1146:	68 f3       	brcs	.-38     	; 0x1122 <__divsf3+0x8>

00001148 <__divsf3_pse>:
    1148:	99 23       	and	r25, r25
    114a:	b1 f3       	breq	.-20     	; 0x1138 <__divsf3+0x1e>
    114c:	55 23       	and	r21, r21
    114e:	91 f3       	breq	.-28     	; 0x1134 <__divsf3+0x1a>
    1150:	95 1b       	sub	r25, r21
    1152:	55 0b       	sbc	r21, r21
    1154:	bb 27       	eor	r27, r27
    1156:	aa 27       	eor	r26, r26
    1158:	62 17       	cp	r22, r18
    115a:	73 07       	cpc	r23, r19
    115c:	84 07       	cpc	r24, r20
    115e:	38 f0       	brcs	.+14     	; 0x116e <__divsf3_pse+0x26>
    1160:	9f 5f       	subi	r25, 0xFF	; 255
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	22 0f       	add	r18, r18
    1166:	33 1f       	adc	r19, r19
    1168:	44 1f       	adc	r20, r20
    116a:	aa 1f       	adc	r26, r26
    116c:	a9 f3       	breq	.-22     	; 0x1158 <__divsf3_pse+0x10>
    116e:	35 d0       	rcall	.+106    	; 0x11da <__divsf3_pse+0x92>
    1170:	0e 2e       	mov	r0, r30
    1172:	3a f0       	brmi	.+14     	; 0x1182 <__divsf3_pse+0x3a>
    1174:	e0 e8       	ldi	r30, 0x80	; 128
    1176:	32 d0       	rcall	.+100    	; 0x11dc <__divsf3_pse+0x94>
    1178:	91 50       	subi	r25, 0x01	; 1
    117a:	50 40       	sbci	r21, 0x00	; 0
    117c:	e6 95       	lsr	r30
    117e:	00 1c       	adc	r0, r0
    1180:	ca f7       	brpl	.-14     	; 0x1174 <__divsf3_pse+0x2c>
    1182:	2b d0       	rcall	.+86     	; 0x11da <__divsf3_pse+0x92>
    1184:	fe 2f       	mov	r31, r30
    1186:	29 d0       	rcall	.+82     	; 0x11da <__divsf3_pse+0x92>
    1188:	66 0f       	add	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	bb 1f       	adc	r27, r27
    1190:	26 17       	cp	r18, r22
    1192:	37 07       	cpc	r19, r23
    1194:	48 07       	cpc	r20, r24
    1196:	ab 07       	cpc	r26, r27
    1198:	b0 e8       	ldi	r27, 0x80	; 128
    119a:	09 f0       	breq	.+2      	; 0x119e <__divsf3_pse+0x56>
    119c:	bb 0b       	sbc	r27, r27
    119e:	80 2d       	mov	r24, r0
    11a0:	bf 01       	movw	r22, r30
    11a2:	ff 27       	eor	r31, r31
    11a4:	93 58       	subi	r25, 0x83	; 131
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	3a f0       	brmi	.+14     	; 0x11b8 <__divsf3_pse+0x70>
    11aa:	9e 3f       	cpi	r25, 0xFE	; 254
    11ac:	51 05       	cpc	r21, r1
    11ae:	78 f0       	brcs	.+30     	; 0x11ce <__divsf3_pse+0x86>
    11b0:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    11b4:	0c 94 87 09 	jmp	0x130e	; 0x130e <__fp_szero>
    11b8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ba:	e4 f3       	brlt	.-8      	; 0x11b4 <__divsf3_pse+0x6c>
    11bc:	98 3e       	cpi	r25, 0xE8	; 232
    11be:	d4 f3       	brlt	.-12     	; 0x11b4 <__divsf3_pse+0x6c>
    11c0:	86 95       	lsr	r24
    11c2:	77 95       	ror	r23
    11c4:	67 95       	ror	r22
    11c6:	b7 95       	ror	r27
    11c8:	f7 95       	ror	r31
    11ca:	9f 5f       	subi	r25, 0xFF	; 255
    11cc:	c9 f7       	brne	.-14     	; 0x11c0 <__divsf3_pse+0x78>
    11ce:	88 0f       	add	r24, r24
    11d0:	91 1d       	adc	r25, r1
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	97 f9       	bld	r25, 7
    11d8:	08 95       	ret
    11da:	e1 e0       	ldi	r30, 0x01	; 1
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	bb 1f       	adc	r27, r27
    11e4:	62 17       	cp	r22, r18
    11e6:	73 07       	cpc	r23, r19
    11e8:	84 07       	cpc	r24, r20
    11ea:	ba 07       	cpc	r27, r26
    11ec:	20 f0       	brcs	.+8      	; 0x11f6 <__divsf3_pse+0xae>
    11ee:	62 1b       	sub	r22, r18
    11f0:	73 0b       	sbc	r23, r19
    11f2:	84 0b       	sbc	r24, r20
    11f4:	ba 0b       	sbc	r27, r26
    11f6:	ee 1f       	adc	r30, r30
    11f8:	88 f7       	brcc	.-30     	; 0x11dc <__divsf3_pse+0x94>
    11fa:	e0 95       	com	r30
    11fc:	08 95       	ret

000011fe <__floatunsisf>:
    11fe:	e8 94       	clt
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <__floatsisf+0x12>

00001202 <__floatsisf>:
    1202:	97 fb       	bst	r25, 7
    1204:	3e f4       	brtc	.+14     	; 0x1214 <__floatsisf+0x12>
    1206:	90 95       	com	r25
    1208:	80 95       	com	r24
    120a:	70 95       	com	r23
    120c:	61 95       	neg	r22
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	8f 4f       	sbci	r24, 0xFF	; 255
    1212:	9f 4f       	sbci	r25, 0xFF	; 255
    1214:	99 23       	and	r25, r25
    1216:	a9 f0       	breq	.+42     	; 0x1242 <__floatsisf+0x40>
    1218:	f9 2f       	mov	r31, r25
    121a:	96 e9       	ldi	r25, 0x96	; 150
    121c:	bb 27       	eor	r27, r27
    121e:	93 95       	inc	r25
    1220:	f6 95       	lsr	r31
    1222:	87 95       	ror	r24
    1224:	77 95       	ror	r23
    1226:	67 95       	ror	r22
    1228:	b7 95       	ror	r27
    122a:	f1 11       	cpse	r31, r1
    122c:	f8 cf       	rjmp	.-16     	; 0x121e <__floatsisf+0x1c>
    122e:	fa f4       	brpl	.+62     	; 0x126e <__floatsisf+0x6c>
    1230:	bb 0f       	add	r27, r27
    1232:	11 f4       	brne	.+4      	; 0x1238 <__floatsisf+0x36>
    1234:	60 ff       	sbrs	r22, 0
    1236:	1b c0       	rjmp	.+54     	; 0x126e <__floatsisf+0x6c>
    1238:	6f 5f       	subi	r22, 0xFF	; 255
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	8f 4f       	sbci	r24, 0xFF	; 255
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	16 c0       	rjmp	.+44     	; 0x126e <__floatsisf+0x6c>
    1242:	88 23       	and	r24, r24
    1244:	11 f0       	breq	.+4      	; 0x124a <__floatsisf+0x48>
    1246:	96 e9       	ldi	r25, 0x96	; 150
    1248:	11 c0       	rjmp	.+34     	; 0x126c <__floatsisf+0x6a>
    124a:	77 23       	and	r23, r23
    124c:	21 f0       	breq	.+8      	; 0x1256 <__floatsisf+0x54>
    124e:	9e e8       	ldi	r25, 0x8E	; 142
    1250:	87 2f       	mov	r24, r23
    1252:	76 2f       	mov	r23, r22
    1254:	05 c0       	rjmp	.+10     	; 0x1260 <__floatsisf+0x5e>
    1256:	66 23       	and	r22, r22
    1258:	71 f0       	breq	.+28     	; 0x1276 <__floatsisf+0x74>
    125a:	96 e8       	ldi	r25, 0x86	; 134
    125c:	86 2f       	mov	r24, r22
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	2a f0       	brmi	.+10     	; 0x126e <__floatsisf+0x6c>
    1264:	9a 95       	dec	r25
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	88 1f       	adc	r24, r24
    126c:	da f7       	brpl	.-10     	; 0x1264 <__floatsisf+0x62>
    126e:	88 0f       	add	r24, r24
    1270:	96 95       	lsr	r25
    1272:	87 95       	ror	r24
    1274:	97 f9       	bld	r25, 7
    1276:	08 95       	ret

00001278 <__fp_inf>:
    1278:	97 f9       	bld	r25, 7
    127a:	9f 67       	ori	r25, 0x7F	; 127
    127c:	80 e8       	ldi	r24, 0x80	; 128
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	08 95       	ret

00001284 <__fp_nan>:
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    1286:	80 ec       	ldi	r24, 0xC0	; 192
    1288:	08 95       	ret

0000128a <__fp_pscA>:
    128a:	00 24       	eor	r0, r0
    128c:	0a 94       	dec	r0
    128e:	16 16       	cp	r1, r22
    1290:	17 06       	cpc	r1, r23
    1292:	18 06       	cpc	r1, r24
    1294:	09 06       	cpc	r0, r25
    1296:	08 95       	ret

00001298 <__fp_pscB>:
    1298:	00 24       	eor	r0, r0
    129a:	0a 94       	dec	r0
    129c:	12 16       	cp	r1, r18
    129e:	13 06       	cpc	r1, r19
    12a0:	14 06       	cpc	r1, r20
    12a2:	05 06       	cpc	r0, r21
    12a4:	08 95       	ret

000012a6 <__fp_round>:
    12a6:	09 2e       	mov	r0, r25
    12a8:	03 94       	inc	r0
    12aa:	00 0c       	add	r0, r0
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <__fp_round+0xc>
    12ae:	88 23       	and	r24, r24
    12b0:	52 f0       	brmi	.+20     	; 0x12c6 <__fp_round+0x20>
    12b2:	bb 0f       	add	r27, r27
    12b4:	40 f4       	brcc	.+16     	; 0x12c6 <__fp_round+0x20>
    12b6:	bf 2b       	or	r27, r31
    12b8:	11 f4       	brne	.+4      	; 0x12be <__fp_round+0x18>
    12ba:	60 ff       	sbrs	r22, 0
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__fp_round+0x20>
    12be:	6f 5f       	subi	r22, 0xFF	; 255
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	08 95       	ret

000012c8 <__fp_split3>:
    12c8:	57 fd       	sbrc	r21, 7
    12ca:	90 58       	subi	r25, 0x80	; 128
    12cc:	44 0f       	add	r20, r20
    12ce:	55 1f       	adc	r21, r21
    12d0:	59 f0       	breq	.+22     	; 0x12e8 <__fp_splitA+0x10>
    12d2:	5f 3f       	cpi	r21, 0xFF	; 255
    12d4:	71 f0       	breq	.+28     	; 0x12f2 <__fp_splitA+0x1a>
    12d6:	47 95       	ror	r20

000012d8 <__fp_splitA>:
    12d8:	88 0f       	add	r24, r24
    12da:	97 fb       	bst	r25, 7
    12dc:	99 1f       	adc	r25, r25
    12de:	61 f0       	breq	.+24     	; 0x12f8 <__fp_splitA+0x20>
    12e0:	9f 3f       	cpi	r25, 0xFF	; 255
    12e2:	79 f0       	breq	.+30     	; 0x1302 <__fp_splitA+0x2a>
    12e4:	87 95       	ror	r24
    12e6:	08 95       	ret
    12e8:	12 16       	cp	r1, r18
    12ea:	13 06       	cpc	r1, r19
    12ec:	14 06       	cpc	r1, r20
    12ee:	55 1f       	adc	r21, r21
    12f0:	f2 cf       	rjmp	.-28     	; 0x12d6 <__fp_split3+0xe>
    12f2:	46 95       	lsr	r20
    12f4:	f1 df       	rcall	.-30     	; 0x12d8 <__fp_splitA>
    12f6:	08 c0       	rjmp	.+16     	; 0x1308 <__fp_splitA+0x30>
    12f8:	16 16       	cp	r1, r22
    12fa:	17 06       	cpc	r1, r23
    12fc:	18 06       	cpc	r1, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	f1 cf       	rjmp	.-30     	; 0x12e4 <__fp_splitA+0xc>
    1302:	86 95       	lsr	r24
    1304:	71 05       	cpc	r23, r1
    1306:	61 05       	cpc	r22, r1
    1308:	08 94       	sec
    130a:	08 95       	ret

0000130c <__fp_zero>:
    130c:	e8 94       	clt

0000130e <__fp_szero>:
    130e:	bb 27       	eor	r27, r27
    1310:	66 27       	eor	r22, r22
    1312:	77 27       	eor	r23, r23
    1314:	cb 01       	movw	r24, r22
    1316:	97 f9       	bld	r25, 7
    1318:	08 95       	ret

0000131a <__mulsf3>:
    131a:	0e 94 a0 09 	call	0x1340	; 0x1340 <__mulsf3x>
    131e:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__fp_round>
    1322:	0e 94 45 09 	call	0x128a	; 0x128a <__fp_pscA>
    1326:	38 f0       	brcs	.+14     	; 0x1336 <__mulsf3+0x1c>
    1328:	0e 94 4c 09 	call	0x1298	; 0x1298 <__fp_pscB>
    132c:	20 f0       	brcs	.+8      	; 0x1336 <__mulsf3+0x1c>
    132e:	95 23       	and	r25, r21
    1330:	11 f0       	breq	.+4      	; 0x1336 <__mulsf3+0x1c>
    1332:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    1336:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__fp_nan>
    133a:	11 24       	eor	r1, r1
    133c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__fp_szero>

00001340 <__mulsf3x>:
    1340:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__fp_split3>
    1344:	70 f3       	brcs	.-36     	; 0x1322 <__mulsf3+0x8>

00001346 <__mulsf3_pse>:
    1346:	95 9f       	mul	r25, r21
    1348:	c1 f3       	breq	.-16     	; 0x133a <__mulsf3+0x20>
    134a:	95 0f       	add	r25, r21
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	55 1f       	adc	r21, r21
    1350:	62 9f       	mul	r22, r18
    1352:	f0 01       	movw	r30, r0
    1354:	72 9f       	mul	r23, r18
    1356:	bb 27       	eor	r27, r27
    1358:	f0 0d       	add	r31, r0
    135a:	b1 1d       	adc	r27, r1
    135c:	63 9f       	mul	r22, r19
    135e:	aa 27       	eor	r26, r26
    1360:	f0 0d       	add	r31, r0
    1362:	b1 1d       	adc	r27, r1
    1364:	aa 1f       	adc	r26, r26
    1366:	64 9f       	mul	r22, r20
    1368:	66 27       	eor	r22, r22
    136a:	b0 0d       	add	r27, r0
    136c:	a1 1d       	adc	r26, r1
    136e:	66 1f       	adc	r22, r22
    1370:	82 9f       	mul	r24, r18
    1372:	22 27       	eor	r18, r18
    1374:	b0 0d       	add	r27, r0
    1376:	a1 1d       	adc	r26, r1
    1378:	62 1f       	adc	r22, r18
    137a:	73 9f       	mul	r23, r19
    137c:	b0 0d       	add	r27, r0
    137e:	a1 1d       	adc	r26, r1
    1380:	62 1f       	adc	r22, r18
    1382:	83 9f       	mul	r24, r19
    1384:	a0 0d       	add	r26, r0
    1386:	61 1d       	adc	r22, r1
    1388:	22 1f       	adc	r18, r18
    138a:	74 9f       	mul	r23, r20
    138c:	33 27       	eor	r19, r19
    138e:	a0 0d       	add	r26, r0
    1390:	61 1d       	adc	r22, r1
    1392:	23 1f       	adc	r18, r19
    1394:	84 9f       	mul	r24, r20
    1396:	60 0d       	add	r22, r0
    1398:	21 1d       	adc	r18, r1
    139a:	82 2f       	mov	r24, r18
    139c:	76 2f       	mov	r23, r22
    139e:	6a 2f       	mov	r22, r26
    13a0:	11 24       	eor	r1, r1
    13a2:	9f 57       	subi	r25, 0x7F	; 127
    13a4:	50 40       	sbci	r21, 0x00	; 0
    13a6:	9a f0       	brmi	.+38     	; 0x13ce <__mulsf3_pse+0x88>
    13a8:	f1 f0       	breq	.+60     	; 0x13e6 <__mulsf3_pse+0xa0>
    13aa:	88 23       	and	r24, r24
    13ac:	4a f0       	brmi	.+18     	; 0x13c0 <__mulsf3_pse+0x7a>
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	bb 1f       	adc	r27, r27
    13b4:	66 1f       	adc	r22, r22
    13b6:	77 1f       	adc	r23, r23
    13b8:	88 1f       	adc	r24, r24
    13ba:	91 50       	subi	r25, 0x01	; 1
    13bc:	50 40       	sbci	r21, 0x00	; 0
    13be:	a9 f7       	brne	.-22     	; 0x13aa <__mulsf3_pse+0x64>
    13c0:	9e 3f       	cpi	r25, 0xFE	; 254
    13c2:	51 05       	cpc	r21, r1
    13c4:	80 f0       	brcs	.+32     	; 0x13e6 <__mulsf3_pse+0xa0>
    13c6:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__fp_inf>
    13ca:	0c 94 87 09 	jmp	0x130e	; 0x130e <__fp_szero>
    13ce:	5f 3f       	cpi	r21, 0xFF	; 255
    13d0:	e4 f3       	brlt	.-8      	; 0x13ca <__mulsf3_pse+0x84>
    13d2:	98 3e       	cpi	r25, 0xE8	; 232
    13d4:	d4 f3       	brlt	.-12     	; 0x13ca <__mulsf3_pse+0x84>
    13d6:	86 95       	lsr	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	b7 95       	ror	r27
    13de:	f7 95       	ror	r31
    13e0:	e7 95       	ror	r30
    13e2:	9f 5f       	subi	r25, 0xFF	; 255
    13e4:	c1 f7       	brne	.-16     	; 0x13d6 <__mulsf3_pse+0x90>
    13e6:	fe 2b       	or	r31, r30
    13e8:	88 0f       	add	r24, r24
    13ea:	91 1d       	adc	r25, r1
    13ec:	96 95       	lsr	r25
    13ee:	87 95       	ror	r24
    13f0:	97 f9       	bld	r25, 7
    13f2:	08 95       	ret

000013f4 <dtostrf>:
    13f4:	ef 92       	push	r14
    13f6:	0f 93       	push	r16
    13f8:	1f 93       	push	r17
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	e8 01       	movw	r28, r16
    1400:	47 fd       	sbrc	r20, 7
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <dtostrf+0x14>
    1404:	34 e0       	ldi	r19, 0x04	; 4
    1406:	01 c0       	rjmp	.+2      	; 0x140a <dtostrf+0x16>
    1408:	34 e1       	ldi	r19, 0x14	; 20
    140a:	04 2e       	mov	r0, r20
    140c:	00 0c       	add	r0, r0
    140e:	55 0b       	sbc	r21, r21
    1410:	57 ff       	sbrs	r21, 7
    1412:	03 c0       	rjmp	.+6      	; 0x141a <dtostrf+0x26>
    1414:	51 95       	neg	r21
    1416:	41 95       	neg	r20
    1418:	51 09       	sbc	r21, r1
    141a:	e3 2e       	mov	r14, r19
    141c:	02 2f       	mov	r16, r18
    141e:	24 2f       	mov	r18, r20
    1420:	ae 01       	movw	r20, r28
    1422:	0e 94 21 0a 	call	0x1442	; 0x1442 <dtoa_prf>
    1426:	ce 01       	movw	r24, r28
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ef 90       	pop	r14
    1432:	08 95       	ret

00001434 <strcpy>:
    1434:	fb 01       	movw	r30, r22
    1436:	dc 01       	movw	r26, r24
    1438:	01 90       	ld	r0, Z+
    143a:	0d 92       	st	X+, r0
    143c:	00 20       	and	r0, r0
    143e:	e1 f7       	brne	.-8      	; 0x1438 <strcpy+0x4>
    1440:	08 95       	ret

00001442 <dtoa_prf>:
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	29 97       	sbiw	r28, 0x09	; 9
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	6a 01       	movw	r12, r20
    146c:	12 2f       	mov	r17, r18
    146e:	b0 2e       	mov	r11, r16
    1470:	2b e3       	ldi	r18, 0x3B	; 59
    1472:	20 17       	cp	r18, r16
    1474:	20 f0       	brcs	.+8      	; 0x147e <dtoa_prf+0x3c>
    1476:	ff 24       	eor	r15, r15
    1478:	f3 94       	inc	r15
    147a:	f0 0e       	add	r15, r16
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <dtoa_prf+0x40>
    147e:	2c e3       	ldi	r18, 0x3C	; 60
    1480:	f2 2e       	mov	r15, r18
    1482:	0f 2d       	mov	r16, r15
    1484:	27 e0       	ldi	r18, 0x07	; 7
    1486:	ae 01       	movw	r20, r28
    1488:	4f 5f       	subi	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ftoa_engine>
    1490:	bc 01       	movw	r22, r24
    1492:	49 81       	ldd	r20, Y+1	; 0x01
    1494:	84 2f       	mov	r24, r20
    1496:	89 70       	andi	r24, 0x09	; 9
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	31 f0       	breq	.+12     	; 0x14a8 <dtoa_prf+0x66>
    149c:	e1 fc       	sbrc	r14, 1
    149e:	06 c0       	rjmp	.+12     	; 0x14ac <dtoa_prf+0x6a>
    14a0:	e0 fe       	sbrs	r14, 0
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <dtoa_prf+0x6e>
    14a4:	90 e2       	ldi	r25, 0x20	; 32
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <dtoa_prf+0x70>
    14a8:	9d e2       	ldi	r25, 0x2D	; 45
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <dtoa_prf+0x70>
    14ac:	9b e2       	ldi	r25, 0x2B	; 43
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <dtoa_prf+0x70>
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	5e 2d       	mov	r21, r14
    14b4:	50 71       	andi	r21, 0x10	; 16
    14b6:	43 ff       	sbrs	r20, 3
    14b8:	3c c0       	rjmp	.+120    	; 0x1532 <dtoa_prf+0xf0>
    14ba:	91 11       	cpse	r25, r1
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <dtoa_prf+0x80>
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <dtoa_prf+0x82>
    14c2:	84 e0       	ldi	r24, 0x04	; 4
    14c4:	81 17       	cp	r24, r17
    14c6:	18 f4       	brcc	.+6      	; 0x14ce <dtoa_prf+0x8c>
    14c8:	21 2f       	mov	r18, r17
    14ca:	28 1b       	sub	r18, r24
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <dtoa_prf+0x8e>
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	51 11       	cpse	r21, r1
    14d2:	0b c0       	rjmp	.+22     	; 0x14ea <dtoa_prf+0xa8>
    14d4:	f6 01       	movw	r30, r12
    14d6:	82 2f       	mov	r24, r18
    14d8:	30 e2       	ldi	r19, 0x20	; 32
    14da:	88 23       	and	r24, r24
    14dc:	19 f0       	breq	.+6      	; 0x14e4 <dtoa_prf+0xa2>
    14de:	31 93       	st	Z+, r19
    14e0:	81 50       	subi	r24, 0x01	; 1
    14e2:	fb cf       	rjmp	.-10     	; 0x14da <dtoa_prf+0x98>
    14e4:	c2 0e       	add	r12, r18
    14e6:	d1 1c       	adc	r13, r1
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	99 23       	and	r25, r25
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <dtoa_prf+0xb6>
    14ee:	d6 01       	movw	r26, r12
    14f0:	9c 93       	st	X, r25
    14f2:	f6 01       	movw	r30, r12
    14f4:	31 96       	adiw	r30, 0x01	; 1
    14f6:	6f 01       	movw	r12, r30
    14f8:	c6 01       	movw	r24, r12
    14fa:	03 96       	adiw	r24, 0x03	; 3
    14fc:	e2 fe       	sbrs	r14, 2
    14fe:	0a c0       	rjmp	.+20     	; 0x1514 <dtoa_prf+0xd2>
    1500:	3e e4       	ldi	r19, 0x4E	; 78
    1502:	d6 01       	movw	r26, r12
    1504:	3c 93       	st	X, r19
    1506:	41 e4       	ldi	r20, 0x41	; 65
    1508:	11 96       	adiw	r26, 0x01	; 1
    150a:	4c 93       	st	X, r20
    150c:	11 97       	sbiw	r26, 0x01	; 1
    150e:	12 96       	adiw	r26, 0x02	; 2
    1510:	3c 93       	st	X, r19
    1512:	06 c0       	rjmp	.+12     	; 0x1520 <dtoa_prf+0xde>
    1514:	3e e6       	ldi	r19, 0x6E	; 110
    1516:	f6 01       	movw	r30, r12
    1518:	30 83       	st	Z, r19
    151a:	41 e6       	ldi	r20, 0x61	; 97
    151c:	41 83       	std	Z+1, r20	; 0x01
    151e:	32 83       	std	Z+2, r19	; 0x02
    1520:	fc 01       	movw	r30, r24
    1522:	32 2f       	mov	r19, r18
    1524:	40 e2       	ldi	r20, 0x20	; 32
    1526:	33 23       	and	r19, r19
    1528:	09 f4       	brne	.+2      	; 0x152c <dtoa_prf+0xea>
    152a:	42 c0       	rjmp	.+132    	; 0x15b0 <dtoa_prf+0x16e>
    152c:	41 93       	st	Z+, r20
    152e:	31 50       	subi	r19, 0x01	; 1
    1530:	fa cf       	rjmp	.-12     	; 0x1526 <dtoa_prf+0xe4>
    1532:	42 ff       	sbrs	r20, 2
    1534:	44 c0       	rjmp	.+136    	; 0x15be <dtoa_prf+0x17c>
    1536:	91 11       	cpse	r25, r1
    1538:	02 c0       	rjmp	.+4      	; 0x153e <dtoa_prf+0xfc>
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <dtoa_prf+0xfe>
    153e:	84 e0       	ldi	r24, 0x04	; 4
    1540:	81 17       	cp	r24, r17
    1542:	18 f4       	brcc	.+6      	; 0x154a <dtoa_prf+0x108>
    1544:	21 2f       	mov	r18, r17
    1546:	28 1b       	sub	r18, r24
    1548:	01 c0       	rjmp	.+2      	; 0x154c <dtoa_prf+0x10a>
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	51 11       	cpse	r21, r1
    154e:	0b c0       	rjmp	.+22     	; 0x1566 <dtoa_prf+0x124>
    1550:	f6 01       	movw	r30, r12
    1552:	82 2f       	mov	r24, r18
    1554:	30 e2       	ldi	r19, 0x20	; 32
    1556:	88 23       	and	r24, r24
    1558:	19 f0       	breq	.+6      	; 0x1560 <dtoa_prf+0x11e>
    155a:	31 93       	st	Z+, r19
    155c:	81 50       	subi	r24, 0x01	; 1
    155e:	fb cf       	rjmp	.-10     	; 0x1556 <dtoa_prf+0x114>
    1560:	c2 0e       	add	r12, r18
    1562:	d1 1c       	adc	r13, r1
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	99 23       	and	r25, r25
    1568:	29 f0       	breq	.+10     	; 0x1574 <dtoa_prf+0x132>
    156a:	d6 01       	movw	r26, r12
    156c:	9c 93       	st	X, r25
    156e:	f6 01       	movw	r30, r12
    1570:	31 96       	adiw	r30, 0x01	; 1
    1572:	6f 01       	movw	r12, r30
    1574:	c6 01       	movw	r24, r12
    1576:	03 96       	adiw	r24, 0x03	; 3
    1578:	e2 fe       	sbrs	r14, 2
    157a:	0b c0       	rjmp	.+22     	; 0x1592 <dtoa_prf+0x150>
    157c:	39 e4       	ldi	r19, 0x49	; 73
    157e:	d6 01       	movw	r26, r12
    1580:	3c 93       	st	X, r19
    1582:	3e e4       	ldi	r19, 0x4E	; 78
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	3c 93       	st	X, r19
    1588:	11 97       	sbiw	r26, 0x01	; 1
    158a:	36 e4       	ldi	r19, 0x46	; 70
    158c:	12 96       	adiw	r26, 0x02	; 2
    158e:	3c 93       	st	X, r19
    1590:	07 c0       	rjmp	.+14     	; 0x15a0 <dtoa_prf+0x15e>
    1592:	39 e6       	ldi	r19, 0x69	; 105
    1594:	f6 01       	movw	r30, r12
    1596:	30 83       	st	Z, r19
    1598:	3e e6       	ldi	r19, 0x6E	; 110
    159a:	31 83       	std	Z+1, r19	; 0x01
    159c:	36 e6       	ldi	r19, 0x66	; 102
    159e:	32 83       	std	Z+2, r19	; 0x02
    15a0:	fc 01       	movw	r30, r24
    15a2:	32 2f       	mov	r19, r18
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	33 23       	and	r19, r19
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <dtoa_prf+0x16e>
    15aa:	41 93       	st	Z+, r20
    15ac:	31 50       	subi	r19, 0x01	; 1
    15ae:	fb cf       	rjmp	.-10     	; 0x15a6 <dtoa_prf+0x164>
    15b0:	fc 01       	movw	r30, r24
    15b2:	e2 0f       	add	r30, r18
    15b4:	f1 1d       	adc	r31, r1
    15b6:	10 82       	st	Z, r1
    15b8:	8e ef       	ldi	r24, 0xFE	; 254
    15ba:	9f ef       	ldi	r25, 0xFF	; 255
    15bc:	a6 c0       	rjmp	.+332    	; 0x170a <dtoa_prf+0x2c8>
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	91 11       	cpse	r25, r1
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <dtoa_prf+0x188>
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	1c f4       	brge	.+6      	; 0x15d6 <dtoa_prf+0x194>
    15d0:	fb 01       	movw	r30, r22
    15d2:	31 96       	adiw	r30, 0x01	; 1
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <dtoa_prf+0x198>
    15d6:	e1 e0       	ldi	r30, 0x01	; 1
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	2e 0f       	add	r18, r30
    15dc:	3f 1f       	adc	r19, r31
    15de:	bb 20       	and	r11, r11
    15e0:	21 f0       	breq	.+8      	; 0x15ea <dtoa_prf+0x1a8>
    15e2:	eb 2d       	mov	r30, r11
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	31 96       	adiw	r30, 0x01	; 1
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <dtoa_prf+0x1ac>
    15ea:	e0 e0       	ldi	r30, 0x00	; 0
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	2e 0f       	add	r18, r30
    15f0:	3f 1f       	adc	r19, r31
    15f2:	e1 2f       	mov	r30, r17
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	2e 17       	cp	r18, r30
    15f8:	3f 07       	cpc	r19, r31
    15fa:	1c f4       	brge	.+6      	; 0x1602 <dtoa_prf+0x1c0>
    15fc:	12 1b       	sub	r17, r18
    15fe:	21 2f       	mov	r18, r17
    1600:	01 c0       	rjmp	.+2      	; 0x1604 <dtoa_prf+0x1c2>
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	8e 2d       	mov	r24, r14
    1606:	88 71       	andi	r24, 0x18	; 24
    1608:	59 f4       	brne	.+22     	; 0x1620 <dtoa_prf+0x1de>
    160a:	f6 01       	movw	r30, r12
    160c:	82 2f       	mov	r24, r18
    160e:	30 e2       	ldi	r19, 0x20	; 32
    1610:	88 23       	and	r24, r24
    1612:	19 f0       	breq	.+6      	; 0x161a <dtoa_prf+0x1d8>
    1614:	31 93       	st	Z+, r19
    1616:	81 50       	subi	r24, 0x01	; 1
    1618:	fb cf       	rjmp	.-10     	; 0x1610 <dtoa_prf+0x1ce>
    161a:	c2 0e       	add	r12, r18
    161c:	d1 1c       	adc	r13, r1
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	99 23       	and	r25, r25
    1622:	29 f0       	breq	.+10     	; 0x162e <dtoa_prf+0x1ec>
    1624:	d6 01       	movw	r26, r12
    1626:	9c 93       	st	X, r25
    1628:	f6 01       	movw	r30, r12
    162a:	31 96       	adiw	r30, 0x01	; 1
    162c:	6f 01       	movw	r12, r30
    162e:	51 11       	cpse	r21, r1
    1630:	0b c0       	rjmp	.+22     	; 0x1648 <dtoa_prf+0x206>
    1632:	f6 01       	movw	r30, r12
    1634:	82 2f       	mov	r24, r18
    1636:	90 e3       	ldi	r25, 0x30	; 48
    1638:	88 23       	and	r24, r24
    163a:	19 f0       	breq	.+6      	; 0x1642 <dtoa_prf+0x200>
    163c:	91 93       	st	Z+, r25
    163e:	81 50       	subi	r24, 0x01	; 1
    1640:	fb cf       	rjmp	.-10     	; 0x1638 <dtoa_prf+0x1f6>
    1642:	c2 0e       	add	r12, r18
    1644:	d1 1c       	adc	r13, r1
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	0f 2d       	mov	r16, r15
    164a:	06 0f       	add	r16, r22
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	34 2f       	mov	r19, r20
    1650:	30 71       	andi	r19, 0x10	; 16
    1652:	44 ff       	sbrs	r20, 4
    1654:	03 c0       	rjmp	.+6      	; 0x165c <dtoa_prf+0x21a>
    1656:	91 33       	cpi	r25, 0x31	; 49
    1658:	09 f4       	brne	.+2      	; 0x165c <dtoa_prf+0x21a>
    165a:	01 50       	subi	r16, 0x01	; 1
    165c:	10 16       	cp	r1, r16
    165e:	24 f4       	brge	.+8      	; 0x1668 <dtoa_prf+0x226>
    1660:	09 30       	cpi	r16, 0x09	; 9
    1662:	18 f0       	brcs	.+6      	; 0x166a <dtoa_prf+0x228>
    1664:	08 e0       	ldi	r16, 0x08	; 8
    1666:	01 c0       	rjmp	.+2      	; 0x166a <dtoa_prf+0x228>
    1668:	01 e0       	ldi	r16, 0x01	; 1
    166a:	ab 01       	movw	r20, r22
    166c:	77 ff       	sbrs	r23, 7
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <dtoa_prf+0x232>
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	50 e0       	ldi	r21, 0x00	; 0
    1674:	fb 01       	movw	r30, r22
    1676:	e4 1b       	sub	r30, r20
    1678:	f5 0b       	sbc	r31, r21
    167a:	a1 e0       	ldi	r26, 0x01	; 1
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ac 0f       	add	r26, r28
    1680:	bd 1f       	adc	r27, r29
    1682:	ea 0f       	add	r30, r26
    1684:	fb 1f       	adc	r31, r27
    1686:	8e e2       	ldi	r24, 0x2E	; 46
    1688:	a8 2e       	mov	r10, r24
    168a:	4b 01       	movw	r8, r22
    168c:	80 1a       	sub	r8, r16
    168e:	91 08       	sbc	r9, r1
    1690:	0b 2d       	mov	r16, r11
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	11 95       	neg	r17
    1696:	01 95       	neg	r16
    1698:	11 09       	sbc	r17, r1
    169a:	4f 3f       	cpi	r20, 0xFF	; 255
    169c:	bf ef       	ldi	r27, 0xFF	; 255
    169e:	5b 07       	cpc	r21, r27
    16a0:	21 f4       	brne	.+8      	; 0x16aa <dtoa_prf+0x268>
    16a2:	d6 01       	movw	r26, r12
    16a4:	ac 92       	st	X, r10
    16a6:	11 96       	adiw	r26, 0x01	; 1
    16a8:	6d 01       	movw	r12, r26
    16aa:	64 17       	cp	r22, r20
    16ac:	75 07       	cpc	r23, r21
    16ae:	2c f0       	brlt	.+10     	; 0x16ba <dtoa_prf+0x278>
    16b0:	84 16       	cp	r8, r20
    16b2:	95 06       	cpc	r9, r21
    16b4:	14 f4       	brge	.+4      	; 0x16ba <dtoa_prf+0x278>
    16b6:	81 81       	ldd	r24, Z+1	; 0x01
    16b8:	01 c0       	rjmp	.+2      	; 0x16bc <dtoa_prf+0x27a>
    16ba:	80 e3       	ldi	r24, 0x30	; 48
    16bc:	41 50       	subi	r20, 0x01	; 1
    16be:	51 09       	sbc	r21, r1
    16c0:	31 96       	adiw	r30, 0x01	; 1
    16c2:	d6 01       	movw	r26, r12
    16c4:	11 96       	adiw	r26, 0x01	; 1
    16c6:	7d 01       	movw	r14, r26
    16c8:	40 17       	cp	r20, r16
    16ca:	51 07       	cpc	r21, r17
    16cc:	24 f0       	brlt	.+8      	; 0x16d6 <dtoa_prf+0x294>
    16ce:	d6 01       	movw	r26, r12
    16d0:	8c 93       	st	X, r24
    16d2:	67 01       	movw	r12, r14
    16d4:	e2 cf       	rjmp	.-60     	; 0x169a <dtoa_prf+0x258>
    16d6:	64 17       	cp	r22, r20
    16d8:	75 07       	cpc	r23, r21
    16da:	39 f4       	brne	.+14     	; 0x16ea <dtoa_prf+0x2a8>
    16dc:	96 33       	cpi	r25, 0x36	; 54
    16de:	20 f4       	brcc	.+8      	; 0x16e8 <dtoa_prf+0x2a6>
    16e0:	95 33       	cpi	r25, 0x35	; 53
    16e2:	19 f4       	brne	.+6      	; 0x16ea <dtoa_prf+0x2a8>
    16e4:	31 11       	cpse	r19, r1
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <dtoa_prf+0x2a8>
    16e8:	81 e3       	ldi	r24, 0x31	; 49
    16ea:	f6 01       	movw	r30, r12
    16ec:	80 83       	st	Z, r24
    16ee:	f7 01       	movw	r30, r14
    16f0:	82 2f       	mov	r24, r18
    16f2:	90 e2       	ldi	r25, 0x20	; 32
    16f4:	88 23       	and	r24, r24
    16f6:	19 f0       	breq	.+6      	; 0x16fe <dtoa_prf+0x2bc>
    16f8:	91 93       	st	Z+, r25
    16fa:	81 50       	subi	r24, 0x01	; 1
    16fc:	fb cf       	rjmp	.-10     	; 0x16f4 <dtoa_prf+0x2b2>
    16fe:	f7 01       	movw	r30, r14
    1700:	e2 0f       	add	r30, r18
    1702:	f1 1d       	adc	r31, r1
    1704:	10 82       	st	Z, r1
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	29 96       	adiw	r28, 0x09	; 9
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	df 91       	pop	r29
    1718:	cf 91       	pop	r28
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	08 95       	ret

00001730 <__ftoa_engine>:
    1730:	28 30       	cpi	r18, 0x08	; 8
    1732:	08 f0       	brcs	.+2      	; 0x1736 <__ftoa_engine+0x6>
    1734:	27 e0       	ldi	r18, 0x07	; 7
    1736:	33 27       	eor	r19, r19
    1738:	da 01       	movw	r26, r20
    173a:	99 0f       	add	r25, r25
    173c:	31 1d       	adc	r19, r1
    173e:	87 fd       	sbrc	r24, 7
    1740:	91 60       	ori	r25, 0x01	; 1
    1742:	00 96       	adiw	r24, 0x00	; 0
    1744:	61 05       	cpc	r22, r1
    1746:	71 05       	cpc	r23, r1
    1748:	39 f4       	brne	.+14     	; 0x1758 <__ftoa_engine+0x28>
    174a:	32 60       	ori	r19, 0x02	; 2
    174c:	2e 5f       	subi	r18, 0xFE	; 254
    174e:	3d 93       	st	X+, r19
    1750:	30 e3       	ldi	r19, 0x30	; 48
    1752:	2a 95       	dec	r18
    1754:	e1 f7       	brne	.-8      	; 0x174e <__ftoa_engine+0x1e>
    1756:	08 95       	ret
    1758:	9f 3f       	cpi	r25, 0xFF	; 255
    175a:	30 f0       	brcs	.+12     	; 0x1768 <__ftoa_engine+0x38>
    175c:	80 38       	cpi	r24, 0x80	; 128
    175e:	71 05       	cpc	r23, r1
    1760:	61 05       	cpc	r22, r1
    1762:	09 f0       	breq	.+2      	; 0x1766 <__ftoa_engine+0x36>
    1764:	3c 5f       	subi	r19, 0xFC	; 252
    1766:	3c 5f       	subi	r19, 0xFC	; 252
    1768:	3d 93       	st	X+, r19
    176a:	91 30       	cpi	r25, 0x01	; 1
    176c:	08 f0       	brcs	.+2      	; 0x1770 <__ftoa_engine+0x40>
    176e:	80 68       	ori	r24, 0x80	; 128
    1770:	91 1d       	adc	r25, r1
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	1f 93       	push	r17
    1778:	0f 93       	push	r16
    177a:	ff 92       	push	r15
    177c:	ef 92       	push	r14
    177e:	19 2f       	mov	r17, r25
    1780:	98 7f       	andi	r25, 0xF8	; 248
    1782:	96 95       	lsr	r25
    1784:	e9 2f       	mov	r30, r25
    1786:	96 95       	lsr	r25
    1788:	96 95       	lsr	r25
    178a:	e9 0f       	add	r30, r25
    178c:	ff 27       	eor	r31, r31
    178e:	e8 57       	subi	r30, 0x78	; 120
    1790:	fe 4f       	sbci	r31, 0xFE	; 254
    1792:	99 27       	eor	r25, r25
    1794:	33 27       	eor	r19, r19
    1796:	ee 24       	eor	r14, r14
    1798:	ff 24       	eor	r15, r15
    179a:	a7 01       	movw	r20, r14
    179c:	e7 01       	movw	r28, r14
    179e:	05 90       	lpm	r0, Z+
    17a0:	08 94       	sec
    17a2:	07 94       	ror	r0
    17a4:	28 f4       	brcc	.+10     	; 0x17b0 <__ftoa_engine+0x80>
    17a6:	36 0f       	add	r19, r22
    17a8:	e7 1e       	adc	r14, r23
    17aa:	f8 1e       	adc	r15, r24
    17ac:	49 1f       	adc	r20, r25
    17ae:	51 1d       	adc	r21, r1
    17b0:	66 0f       	add	r22, r22
    17b2:	77 1f       	adc	r23, r23
    17b4:	88 1f       	adc	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	06 94       	lsr	r0
    17ba:	a1 f7       	brne	.-24     	; 0x17a4 <__ftoa_engine+0x74>
    17bc:	05 90       	lpm	r0, Z+
    17be:	07 94       	ror	r0
    17c0:	28 f4       	brcc	.+10     	; 0x17cc <__ftoa_engine+0x9c>
    17c2:	e7 0e       	add	r14, r23
    17c4:	f8 1e       	adc	r15, r24
    17c6:	49 1f       	adc	r20, r25
    17c8:	56 1f       	adc	r21, r22
    17ca:	c1 1d       	adc	r28, r1
    17cc:	77 0f       	add	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	66 1f       	adc	r22, r22
    17d4:	06 94       	lsr	r0
    17d6:	a1 f7       	brne	.-24     	; 0x17c0 <__ftoa_engine+0x90>
    17d8:	05 90       	lpm	r0, Z+
    17da:	07 94       	ror	r0
    17dc:	28 f4       	brcc	.+10     	; 0x17e8 <__ftoa_engine+0xb8>
    17de:	f8 0e       	add	r15, r24
    17e0:	49 1f       	adc	r20, r25
    17e2:	56 1f       	adc	r21, r22
    17e4:	c7 1f       	adc	r28, r23
    17e6:	d1 1d       	adc	r29, r1
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	66 1f       	adc	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	06 94       	lsr	r0
    17f2:	a1 f7       	brne	.-24     	; 0x17dc <__ftoa_engine+0xac>
    17f4:	05 90       	lpm	r0, Z+
    17f6:	07 94       	ror	r0
    17f8:	20 f4       	brcc	.+8      	; 0x1802 <__ftoa_engine+0xd2>
    17fa:	49 0f       	add	r20, r25
    17fc:	56 1f       	adc	r21, r22
    17fe:	c7 1f       	adc	r28, r23
    1800:	d8 1f       	adc	r29, r24
    1802:	99 0f       	add	r25, r25
    1804:	66 1f       	adc	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	06 94       	lsr	r0
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <__ftoa_engine+0xc8>
    180e:	84 91       	lpm	r24, Z
    1810:	10 95       	com	r17
    1812:	17 70       	andi	r17, 0x07	; 7
    1814:	41 f0       	breq	.+16     	; 0x1826 <__ftoa_engine+0xf6>
    1816:	d6 95       	lsr	r29
    1818:	c7 95       	ror	r28
    181a:	57 95       	ror	r21
    181c:	47 95       	ror	r20
    181e:	f7 94       	ror	r15
    1820:	e7 94       	ror	r14
    1822:	1a 95       	dec	r17
    1824:	c1 f7       	brne	.-16     	; 0x1816 <__ftoa_engine+0xe6>
    1826:	ee e2       	ldi	r30, 0x2E	; 46
    1828:	f1 e0       	ldi	r31, 0x01	; 1
    182a:	68 94       	set
    182c:	15 90       	lpm	r1, Z+
    182e:	15 91       	lpm	r17, Z+
    1830:	35 91       	lpm	r19, Z+
    1832:	65 91       	lpm	r22, Z+
    1834:	95 91       	lpm	r25, Z+
    1836:	05 90       	lpm	r0, Z+
    1838:	7f e2       	ldi	r23, 0x2F	; 47
    183a:	73 95       	inc	r23
    183c:	e1 18       	sub	r14, r1
    183e:	f1 0a       	sbc	r15, r17
    1840:	43 0b       	sbc	r20, r19
    1842:	56 0b       	sbc	r21, r22
    1844:	c9 0b       	sbc	r28, r25
    1846:	d0 09       	sbc	r29, r0
    1848:	c0 f7       	brcc	.-16     	; 0x183a <__ftoa_engine+0x10a>
    184a:	e1 0c       	add	r14, r1
    184c:	f1 1e       	adc	r15, r17
    184e:	43 1f       	adc	r20, r19
    1850:	56 1f       	adc	r21, r22
    1852:	c9 1f       	adc	r28, r25
    1854:	d0 1d       	adc	r29, r0
    1856:	7e f4       	brtc	.+30     	; 0x1876 <__ftoa_engine+0x146>
    1858:	70 33       	cpi	r23, 0x30	; 48
    185a:	11 f4       	brne	.+4      	; 0x1860 <__ftoa_engine+0x130>
    185c:	8a 95       	dec	r24
    185e:	e6 cf       	rjmp	.-52     	; 0x182c <__ftoa_engine+0xfc>
    1860:	e8 94       	clt
    1862:	01 50       	subi	r16, 0x01	; 1
    1864:	30 f0       	brcs	.+12     	; 0x1872 <__ftoa_engine+0x142>
    1866:	08 0f       	add	r16, r24
    1868:	0a f4       	brpl	.+2      	; 0x186c <__ftoa_engine+0x13c>
    186a:	00 27       	eor	r16, r16
    186c:	02 17       	cp	r16, r18
    186e:	08 f4       	brcc	.+2      	; 0x1872 <__ftoa_engine+0x142>
    1870:	20 2f       	mov	r18, r16
    1872:	23 95       	inc	r18
    1874:	02 2f       	mov	r16, r18
    1876:	7a 33       	cpi	r23, 0x3A	; 58
    1878:	28 f0       	brcs	.+10     	; 0x1884 <__ftoa_engine+0x154>
    187a:	79 e3       	ldi	r23, 0x39	; 57
    187c:	7d 93       	st	X+, r23
    187e:	2a 95       	dec	r18
    1880:	e9 f7       	brne	.-6      	; 0x187c <__ftoa_engine+0x14c>
    1882:	10 c0       	rjmp	.+32     	; 0x18a4 <__ftoa_engine+0x174>
    1884:	7d 93       	st	X+, r23
    1886:	2a 95       	dec	r18
    1888:	89 f6       	brne	.-94     	; 0x182c <__ftoa_engine+0xfc>
    188a:	06 94       	lsr	r0
    188c:	97 95       	ror	r25
    188e:	67 95       	ror	r22
    1890:	37 95       	ror	r19
    1892:	17 95       	ror	r17
    1894:	17 94       	ror	r1
    1896:	e1 18       	sub	r14, r1
    1898:	f1 0a       	sbc	r15, r17
    189a:	43 0b       	sbc	r20, r19
    189c:	56 0b       	sbc	r21, r22
    189e:	c9 0b       	sbc	r28, r25
    18a0:	d0 09       	sbc	r29, r0
    18a2:	98 f0       	brcs	.+38     	; 0x18ca <__ftoa_engine+0x19a>
    18a4:	23 95       	inc	r18
    18a6:	7e 91       	ld	r23, -X
    18a8:	73 95       	inc	r23
    18aa:	7a 33       	cpi	r23, 0x3A	; 58
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <__ftoa_engine+0x180>
    18ae:	70 e3       	ldi	r23, 0x30	; 48
    18b0:	7c 93       	st	X, r23
    18b2:	20 13       	cpse	r18, r16
    18b4:	b8 f7       	brcc	.-18     	; 0x18a4 <__ftoa_engine+0x174>
    18b6:	7e 91       	ld	r23, -X
    18b8:	70 61       	ori	r23, 0x10	; 16
    18ba:	7d 93       	st	X+, r23
    18bc:	30 f0       	brcs	.+12     	; 0x18ca <__ftoa_engine+0x19a>
    18be:	83 95       	inc	r24
    18c0:	71 e3       	ldi	r23, 0x31	; 49
    18c2:	7d 93       	st	X+, r23
    18c4:	70 e3       	ldi	r23, 0x30	; 48
    18c6:	2a 95       	dec	r18
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <__ftoa_engine+0x192>
    18ca:	11 24       	eor	r1, r1
    18cc:	ef 90       	pop	r14
    18ce:	ff 90       	pop	r15
    18d0:	0f 91       	pop	r16
    18d2:	1f 91       	pop	r17
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	99 27       	eor	r25, r25
    18da:	87 fd       	sbrc	r24, 7
    18dc:	90 95       	com	r25
    18de:	08 95       	ret

000018e0 <_exit>:
    18e0:	f8 94       	cli

000018e2 <__stop_program>:
    18e2:	ff cf       	rjmp	.-2      	; 0x18e2 <__stop_program>
