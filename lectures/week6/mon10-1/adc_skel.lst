
adc_skel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000d04  00000d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  00800100  00800100  00000d98  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000227a  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5c  00000000  00000000  000030c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b24  00000000  00000000  00003d22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00004848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b6b  00000000  00000000  00005023  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00006b8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 35       	cpi	r26, 0x5C	; 92
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 60 05 	call	0xac0	; 0xac0 <main>
  ac:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <spi_init>:
div_t    fp_adc_result, fp_low_result;  //double fp_adc_result; 

/*******************************************************/
void spi_init(void){
 /* Run this code before attempting to write to the LCD.*/
 DDRF  |= 0x08;  //port F bit 3 is enabling for LCD
  b4:	e1 e6       	ldi	r30, 0x61	; 97
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	80 83       	st	Z, r24
 PORTF &= 0xF7;  //port F bit 3 is initially low
  be:	e2 e6       	ldi	r30, 0x62	; 98
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	80 83       	st	Z, r24

 DDRB  |= 0x07;  //Turn on SS_n, MOSI, SCLK. SS_n must be out for MSTR mode
  c8:	87 b3       	in	r24, 0x17	; 23
  ca:	87 60       	ori	r24, 0x07	; 7
  cc:	87 bb       	out	0x17, r24	; 23
//see: /$install_path/avr/include/avr/iom128.h for bit definitions   

 //Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
 SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
  ce:	80 e5       	ldi	r24, 0x50	; 80
  d0:	8d b9       	out	0x0d, r24	; 13
 SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)  
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8e b9       	out	0x0e, r24	; 14
  d6:	08 95       	ret

000000d8 <send_lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	81 11       	cpse	r24, r1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <send_lcd+0x8>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  e2:	77 9b       	sbis	0x0e, 7	; 14
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <send_lcd+0xa>
  SPDR = byte;                        //send payload
  e6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <send_lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
  ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  fa:	87 7f       	andi	r24, 0xF7	; 247
  fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <send_lcd+0x2c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <send_lcd+0x32>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <refresh_lcd>:

void refresh_lcd(char lcd_string_array[]) {

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	2f b9       	out	0x0f, r18	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
 112:	77 9b       	sbis	0x0e, 7	; 14
 114:	fe cf       	rjmp	.-4      	; 0x112 <refresh_lcd+0x4>
    SPDR = lcd_string_array[index];
 116:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11a:	fc 01       	movw	r30, r24
 11c:	e2 0f       	add	r30, r18
 11e:	f1 1d       	adc	r31, r1
 120:	80 81       	ld	r24, Z
 122:	8f b9       	out	0x0f, r24	; 15
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
 124:	77 9b       	sbis	0x0e, 7	; 14
 126:	fe cf       	rjmp	.-4      	; 0x124 <refresh_lcd+0x16>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 128:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    SPDR = 0x01; //set SR for data
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
 13c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
 146:	80 31       	cpi	r24, 0x10	; 16
 148:	09 f1       	breq	.+66     	; 0x18c <refresh_lcd+0x7e>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
 14a:	80 32       	cpi	r24, 0x20	; 32
 14c:	09 f0       	breq	.+2      	; 0x150 <refresh_lcd+0x42>
 14e:	08 95       	ret
 150:	95 ed       	ldi	r25, 0xD5	; 213
 152:	9a 95       	dec	r25
 154:	f1 f7       	brne	.-4      	; 0x152 <refresh_lcd+0x44>
 156:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 158:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 15a:	77 9b       	sbis	0x0e, 7	; 14
 15c:	fe cf       	rjmp	.-4      	; 0x15a <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 162:	77 9b       	sbis	0x0e, 7	; 14
 164:	fe cf       	rjmp	.-4      	; 0x162 <refresh_lcd+0x54>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 166:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 170:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 17a:	8f e9       	ldi	r24, 0x9F	; 159
 17c:	9f e0       	ldi	r25, 0x0F	; 15
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <refresh_lcd+0x70>
 182:	00 c0       	rjmp	.+0      	; 0x184 <refresh_lcd+0x76>
 184:	00 00       	nop
    SPDR = lcd_string_array[index];
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
    strobe_lcd();                   //write into LCD
    index++;                        //increment to next character
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
 186:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	08 95       	ret
 18c:	85 ed       	ldi	r24, 0xD5	; 213
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <refresh_lcd+0x80>
 192:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 194:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 196:	77 9b       	sbis	0x0e, 7	; 14
 198:	fe cf       	rjmp	.-4      	; 0x196 <refresh_lcd+0x88>
  SPDR = byte;                        //send payload
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 19e:	77 9b       	sbis	0x0e, 7	; 14
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <refresh_lcd+0x90>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 1a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1a6:	88 60       	ori	r24, 0x08	; 8
 1a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <refresh_lcd+0xac>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <refresh_lcd+0xb2>
 1c0:	00 00       	nop
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c6:	c1 cf       	rjmp	.-126    	; 0x14a <refresh_lcd+0x3c>

000001c8 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
 1c8:	66 0f       	add	r22, r22
 1ca:	66 0f       	add	r22, r22
 1cc:	66 0f       	add	r22, r22
 1ce:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 1d0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1d2:	77 9b       	sbis	0x0e, 7	; 14
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 1d6:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 1d8:	77 9b       	sbis	0x0e, 7	; 14
 1da:	fe cf       	rjmp	.-4      	; 0x1d8 <set_custom_character+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 1dc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1e0:	28 60       	ori	r18, 0x08	; 8
 1e2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1e6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1ea:	27 7f       	andi	r18, 0xF7	; 247
 1ec:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 1f0:	af e9       	ldi	r26, 0x9F	; 159
 1f2:	bf e0       	ldi	r27, 0x0F	; 15
 1f4:	11 97       	sbiw	r26, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <set_custom_character+0x2c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <set_custom_character+0x32>
 1fa:	00 00       	nop
 1fc:	fc 01       	movw	r30, r24
 1fe:	9c 01       	movw	r18, r24
 200:	28 5f       	subi	r18, 0xF8	; 248
 202:	3f 4f       	sbci	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 204:	91 e0       	ldi	r25, 0x01	; 1
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
 206:	81 91       	ld	r24, Z+
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 208:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 20a:	77 9b       	sbis	0x0e, 7	; 14
 20c:	fe cf       	rjmp	.-4      	; 0x20a <set_custom_character+0x42>
  SPDR = byte;                        //send payload
 20e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 210:	77 9b       	sbis	0x0e, 7	; 14
 212:	fe cf       	rjmp	.-4      	; 0x210 <set_custom_character+0x48>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 214:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 218:	88 60       	ori	r24, 0x08	; 8
 21a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 21e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 222:	87 7f       	andi	r24, 0xF7	; 247
 224:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 228:	af e9       	ldi	r26, 0x9F	; 159
 22a:	bf e0       	ldi	r27, 0x0F	; 15
 22c:	11 97       	sbiw	r26, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <set_custom_character+0x64>
 230:	00 c0       	rjmp	.+0      	; 0x232 <set_custom_character+0x6a>
 232:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
 234:	e2 17       	cp	r30, r18
 236:	f3 07       	cpc	r31, r19
 238:	31 f7       	brne	.-52     	; 0x206 <set_custom_character+0x3e>
}
 23a:	08 95       	ret

0000023c <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
 23c:	90 e4       	ldi	r25, 0x40	; 64
 23e:	89 9f       	mul	r24, r25
 240:	60 0d       	add	r22, r0
 242:	11 24       	eor	r1, r1
 244:	60 5c       	subi	r22, 0xC0	; 192
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 246:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 248:	77 9b       	sbis	0x0e, 7	; 14
 24a:	fe cf       	rjmp	.-4      	; 0x248 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 24c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 24e:	77 9b       	sbis	0x0e, 7	; 14
 250:	fe cf       	rjmp	.-4      	; 0x24e <set_cursor+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 252:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 256:	88 60       	ori	r24, 0x08	; 8
 258:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 25c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 260:	87 7f       	andi	r24, 0xF7	; 247
 262:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 266:	8f e9       	ldi	r24, 0x9F	; 159
 268:	9f e0       	ldi	r25, 0x0F	; 15
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <set_cursor+0x2e>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <set_cursor+0x34>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
 274:	81 11       	cpse	r24, r1
 276:	19 c0       	rjmp	.+50     	; 0x2aa <uint2lcd+0x36>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 27c:	77 9b       	sbis	0x0e, 7	; 14
 27e:	fe cf       	rjmp	.-4      	; 0x27c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 284:	77 9b       	sbis	0x0e, 7	; 14
 286:	fe cf       	rjmp	.-4      	; 0x284 <uint2lcd+0x10>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 288:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 28c:	88 60       	ori	r24, 0x08	; 8
 28e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 292:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 296:	87 7f       	andi	r24, 0xF7	; 247
 298:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 29c:	8f e9       	ldi	r24, 0x9F	; 159
 29e:	9f e0       	ldi	r25, 0x0F	; 15
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <uint2lcd+0x2c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <uint2lcd+0x32>
 2a6:	00 00       	nop
 2a8:	08 95       	ret
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
 2aa:	84 36       	cpi	r24, 0x64	; 100
 2ac:	b0 f4       	brcc	.+44     	; 0x2da <uint2lcd+0x66>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
 2ae:	8a 30       	cpi	r24, 0x0A	; 10
 2b0:	90 f5       	brcc	.+100    	; 0x316 <uint2lcd+0xa2>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2b6:	77 9b       	sbis	0x0e, 7	; 14
 2b8:	fe cf       	rjmp	.-4      	; 0x2b6 <uint2lcd+0x42>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
 2ba:	9d ec       	ldi	r25, 0xCD	; 205
 2bc:	89 9f       	mul	r24, r25
 2be:	91 2d       	mov	r25, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	96 95       	lsr	r25
 2c4:	96 95       	lsr	r25
 2c6:	96 95       	lsr	r25
 2c8:	fa e0       	ldi	r31, 0x0A	; 10
 2ca:	9f 9f       	mul	r25, r31
 2cc:	80 19       	sub	r24, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	80 5d       	subi	r24, 0xD0	; 208


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 2d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2d4:	77 9b       	sbis	0x0e, 7	; 14
 2d6:	fe cf       	rjmp	.-4      	; 0x2d4 <uint2lcd+0x60>
 2d8:	d7 cf       	rjmp	.-82     	; 0x288 <uint2lcd+0x14>
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
 2da:	99 e2       	ldi	r25, 0x29	; 41
 2dc:	89 9f       	mul	r24, r25
 2de:	91 2d       	mov	r25, r1
 2e0:	11 24       	eor	r1, r1
 2e2:	92 95       	swap	r25
 2e4:	9f 70       	andi	r25, 0x0F	; 15
 2e6:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ec:	77 9b       	sbis	0x0e, 7	; 14
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <uint2lcd+0x78>
  SPDR = byte;                        //send payload
 2f0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2f2:	77 9b       	sbis	0x0e, 7	; 14
 2f4:	fe cf       	rjmp	.-4      	; 0x2f2 <uint2lcd+0x7e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2f6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2fa:	98 60       	ori	r25, 0x08	; 8
 2fc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 300:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 304:	97 7f       	andi	r25, 0xF7	; 247
 306:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 30a:	ef e9       	ldi	r30, 0x9F	; 159
 30c:	ff e0       	ldi	r31, 0x0F	; 15
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <uint2lcd+0x9a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <uint2lcd+0xa0>
 314:	00 00       	nop
//
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
 316:	99 e2       	ldi	r25, 0x29	; 41
 318:	89 9f       	mul	r24, r25
 31a:	91 2d       	mov	r25, r1
 31c:	11 24       	eor	r1, r1
 31e:	92 95       	swap	r25
 320:	9f 70       	andi	r25, 0x0F	; 15
 322:	28 2f       	mov	r18, r24
 324:	f4 e6       	ldi	r31, 0x64	; 100
 326:	9f 9f       	mul	r25, r31
 328:	20 19       	sub	r18, r0
 32a:	11 24       	eor	r1, r1
 32c:	92 2f       	mov	r25, r18
 32e:	2d ec       	ldi	r18, 0xCD	; 205
 330:	92 9f       	mul	r25, r18
 332:	91 2d       	mov	r25, r1
 334:	11 24       	eor	r1, r1
 336:	96 95       	lsr	r25
 338:	96 95       	lsr	r25
 33a:	96 95       	lsr	r25
 33c:	90 5d       	subi	r25, 0xD0	; 208
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 342:	77 9b       	sbis	0x0e, 7	; 14
 344:	fe cf       	rjmp	.-4      	; 0x342 <uint2lcd+0xce>
  SPDR = byte;                        //send payload
 346:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 348:	77 9b       	sbis	0x0e, 7	; 14
 34a:	fe cf       	rjmp	.-4      	; 0x348 <uint2lcd+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 34c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 350:	98 60       	ori	r25, 0x08	; 8
 352:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 356:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 35a:	97 7f       	andi	r25, 0xF7	; 247
 35c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 360:	ef e9       	ldi	r30, 0x9F	; 159
 362:	ff e0       	ldi	r31, 0x0F	; 15
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <uint2lcd+0xf0>
 368:	00 c0       	rjmp	.+0      	; 0x36a <uint2lcd+0xf6>
 36a:	00 00       	nop
 36c:	a2 cf       	rjmp	.-188    	; 0x2b2 <uint2lcd+0x3e>

0000036e <int2lcd>:
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
 36e:	87 ff       	sbrs	r24, 7
    else                                    {uint2lcd(number);}
 370:	0c 94 3a 01 	jmp	0x274	; 0x274 <uint2lcd>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 378:	77 9b       	sbis	0x0e, 7	; 14
 37a:	fe cf       	rjmp	.-4      	; 0x378 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 37c:	9d e2       	ldi	r25, 0x2D	; 45
 37e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 380:	77 9b       	sbis	0x0e, 7	; 14
 382:	fe cf       	rjmp	.-4      	; 0x380 <int2lcd+0x12>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 384:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 388:	98 60       	ori	r25, 0x08	; 8
 38a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 38e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 392:	97 7f       	andi	r25, 0xF7	; 247
 394:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 398:	ef e9       	ldi	r30, 0x9F	; 159
 39a:	ff e0       	ldi	r31, 0x0F	; 15
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <int2lcd+0x2e>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <int2lcd+0x34>
 3a2:	00 00       	nop
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
 3a4:	81 95       	neg	r24
 3a6:	0c 94 3a 01 	jmp	0x274	; 0x274 <uint2lcd>

000003aa <cursor_on>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3aa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ac:	77 9b       	sbis	0x0e, 7	; 14
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <cursor_on+0x2>
  SPDR = byte;                        //send payload
 3b0:	8e e0       	ldi	r24, 0x0E	; 14
 3b2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3b4:	77 9b       	sbis	0x0e, 7	; 14
 3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <cursor_on+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3bc:	88 60       	ori	r24, 0x08	; 8
 3be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3c6:	87 7f       	andi	r24, 0xF7	; 247
 3c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <cursor_on+0x26>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <cursor_on+0x2c>
 3d6:	00 00       	nop
 3d8:	08 95       	ret

000003da <cursor_off>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3da:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3dc:	77 9b       	sbis	0x0e, 7	; 14
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <cursor_off+0x2>
  SPDR = byte;                        //send payload
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3e4:	77 9b       	sbis	0x0e, 7	; 14
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <cursor_off+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3e8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ec:	88 60       	ori	r24, 0x08	; 8
 3ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3f6:	87 7f       	andi	r24, 0xF7	; 247
 3f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3fc:	8f e9       	ldi	r24, 0x9F	; 159
 3fe:	9f e0       	ldi	r25, 0x0F	; 15
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 406:	00 00       	nop
 408:	08 95       	ret

0000040a <shift_right>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 40a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 40c:	77 9b       	sbis	0x0e, 7	; 14
 40e:	fe cf       	rjmp	.-4      	; 0x40c <shift_right+0x2>
  SPDR = byte;                        //send payload
 410:	8e e1       	ldi	r24, 0x1E	; 30
 412:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 414:	77 9b       	sbis	0x0e, 7	; 14
 416:	fe cf       	rjmp	.-4      	; 0x414 <shift_right+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 418:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 41c:	88 60       	ori	r24, 0x08	; 8
 41e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 422:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 426:	87 7f       	andi	r24, 0xF7	; 247
 428:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 42c:	8f e9       	ldi	r24, 0x9F	; 159
 42e:	9f e0       	ldi	r25, 0x0F	; 15
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <shift_right+0x26>
 434:	00 c0       	rjmp	.+0      	; 0x436 <shift_right+0x2c>
 436:	00 00       	nop
 438:	08 95       	ret

0000043a <shift_left>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 43a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 43c:	77 9b       	sbis	0x0e, 7	; 14
 43e:	fe cf       	rjmp	.-4      	; 0x43c <shift_left+0x2>
  SPDR = byte;                        //send payload
 440:	88 e1       	ldi	r24, 0x18	; 24
 442:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 444:	77 9b       	sbis	0x0e, 7	; 14
 446:	fe cf       	rjmp	.-4      	; 0x444 <shift_left+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 448:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 44c:	88 60       	ori	r24, 0x08	; 8
 44e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 452:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 456:	87 7f       	andi	r24, 0xF7	; 247
 458:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 45c:	8f e9       	ldi	r24, 0x9F	; 159
 45e:	9f e0       	ldi	r25, 0x0F	; 15
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <shift_left+0x26>
 464:	00 c0       	rjmp	.+0      	; 0x466 <shift_left+0x2c>
 466:	00 00       	nop
 468:	08 95       	ret

0000046a <strobe_lcd>:
 46a:	e2 e6       	ldi	r30, 0x62	; 98
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	88 60       	ori	r24, 0x08	; 8
 472:	80 83       	st	Z, r24
 474:	80 81       	ld	r24, Z
 476:	87 7f       	andi	r24, 0xF7	; 247
 478:	80 83       	st	Z, r24
 47a:	08 95       	ret

0000047c <clear_display>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 47c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 47e:	77 9b       	sbis	0x0e, 7	; 14
 480:	fe cf       	rjmp	.-4      	; 0x47e <clear_display+0x2>
  SPDR = byte;                        //send payload
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 486:	77 9b       	sbis	0x0e, 7	; 14
 488:	fe cf       	rjmp	.-4      	; 0x486 <clear_display+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 48a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 48e:	88 60       	ori	r24, 0x08	; 8
 490:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 494:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 498:	87 7f       	andi	r24, 0xF7	; 247
 49a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 49e:	8f e9       	ldi	r24, 0x9F	; 159
 4a0:	9f e0       	ldi	r25, 0x0F	; 15
 4a2:	01 97       	sbiw	r24, 0x01	; 1
 4a4:	f1 f7       	brne	.-4      	; 0x4a2 <clear_display+0x26>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <clear_display+0x2c>
 4a8:	00 00       	nop
 4aa:	08 95       	ret

000004ac <cursor_home>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4ac:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ae:	77 9b       	sbis	0x0e, 7	; 14
 4b0:	fe cf       	rjmp	.-4      	; 0x4ae <cursor_home+0x2>
  SPDR = byte;                        //send payload
 4b2:	82 e0       	ldi	r24, 0x02	; 2
 4b4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4b6:	77 9b       	sbis	0x0e, 7	; 14
 4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <cursor_home+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4be:	88 60       	ori	r24, 0x08	; 8
 4c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c8:	87 7f       	andi	r24, 0xF7	; 247
 4ca:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ce:	8f e9       	ldi	r24, 0x9F	; 159
 4d0:	9f e0       	ldi	r25, 0x0F	; 15
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <cursor_home+0x26>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <cursor_home+0x2c>
 4d8:	00 00       	nop
 4da:	08 95       	ret

000004dc <home_line2>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4dc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4de:	77 9b       	sbis	0x0e, 7	; 14
 4e0:	fe cf       	rjmp	.-4      	; 0x4de <home_line2+0x2>
  SPDR = byte;                        //send payload
 4e2:	80 ec       	ldi	r24, 0xC0	; 192
 4e4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4e6:	77 9b       	sbis	0x0e, 7	; 14
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <home_line2+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4ee:	88 60       	ori	r24, 0x08	; 8
 4f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4f8:	87 7f       	andi	r24, 0xF7	; 247
 4fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4fe:	8f e9       	ldi	r24, 0x9F	; 159
 500:	9f e0       	ldi	r25, 0x0F	; 15
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <home_line2+0x26>
 506:	00 c0       	rjmp	.+0      	; 0x508 <home_line2+0x2c>
 508:	00 00       	nop
 50a:	08 95       	ret

0000050c <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 50c:	90 e1       	ldi	r25, 0x10	; 16
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 50e:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 510:	20 e2       	ldi	r18, 0x20	; 32
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 512:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 514:	77 9b       	sbis	0x0e, 7	; 14
 516:	fe cf       	rjmp	.-4      	; 0x514 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 518:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 51a:	77 9b       	sbis	0x0e, 7	; 14
 51c:	fe cf       	rjmp	.-4      	; 0x51a <fill_spaces+0xe>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 51e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 522:	88 60       	ori	r24, 0x08	; 8
 524:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 528:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 52c:	87 7f       	andi	r24, 0xF7	; 247
 52e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 532:	ef e9       	ldi	r30, 0x9F	; 159
 534:	ff e0       	ldi	r31, 0x0F	; 15
 536:	31 97       	sbiw	r30, 0x01	; 1
 538:	f1 f7       	brne	.-4      	; 0x536 <fill_spaces+0x2a>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <fill_spaces+0x30>
 53c:	00 00       	nop
 53e:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 540:	41 f7       	brne	.-48     	; 0x512 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
 542:	08 95       	ret

00000544 <char2lcd>:
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 548:	77 9b       	sbis	0x0e, 7	; 14
 54a:	fe cf       	rjmp	.-4      	; 0x548 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 54c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 54e:	77 9b       	sbis	0x0e, 7	; 14
 550:	fe cf       	rjmp	.-4      	; 0x54e <char2lcd+0xa>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 552:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 556:	88 60       	ori	r24, 0x08	; 8
 558:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 55c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 560:	87 7f       	andi	r24, 0xF7	; 247
 562:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 566:	8f e9       	ldi	r24, 0x9F	; 159
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <char2lcd+0x26>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <char2lcd+0x2c>
 570:	00 00       	nop
 572:	08 95       	ret

00000574 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 574:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	60 e0       	ldi	r22, 0x00	; 0
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 57c:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 57e:	df 01       	movw	r26, r30
 580:	a4 0f       	add	r26, r20
 582:	b5 1f       	adc	r27, r21
 584:	8c 91       	ld	r24, X
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 586:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 588:	77 9b       	sbis	0x0e, 7	; 14
 58a:	fe cf       	rjmp	.-4      	; 0x588 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 58c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 58e:	77 9b       	sbis	0x0e, 7	; 14
 590:	fe cf       	rjmp	.-4      	; 0x58e <string2lcd+0x1a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 592:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 596:	98 60       	ori	r25, 0x08	; 8
 598:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 59c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a0:	97 7f       	andi	r25, 0xF7	; 247
 5a2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5a6:	8f e9       	ldi	r24, 0x9F	; 159
 5a8:	9f e0       	ldi	r25, 0x0F	; 15
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <string2lcd+0x36>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <string2lcd+0x3c>
 5b0:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
 5b2:	6f 5f       	subi	r22, 0xFF	; 255
 5b4:	46 2f       	mov	r20, r22
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	df 01       	movw	r26, r30
 5ba:	0d 90       	ld	r0, X+
 5bc:	00 20       	and	r0, r0
 5be:	e9 f7       	brne	.-6      	; 0x5ba <string2lcd+0x46>
 5c0:	9d 01       	movw	r18, r26
 5c2:	2e 1b       	sub	r18, r30
 5c4:	3f 0b       	sbc	r19, r31
 5c6:	22 50       	subi	r18, 0x02	; 2
 5c8:	31 09       	sbc	r19, r1
 5ca:	24 17       	cp	r18, r20
 5cc:	35 07       	cpc	r19, r21
 5ce:	b8 f6       	brcc	.-82     	; 0x57e <string2lcd+0xa>
} 
 5d0:	08 95       	ret

000005d2 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	99 ef       	ldi	r25, 0xF9	; 249
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_init+0x4>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <lcd_init+0xa>
 5dc:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 5de:	88 e0       	ldi	r24, 0x08	; 8
 5e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5e4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5e6:	77 9b       	sbis	0x0e, 7	; 14
 5e8:	fe cf       	rjmp	.-4      	; 0x5e6 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 5ea:	80 e3       	ldi	r24, 0x30	; 48
 5ec:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5ee:	77 9b       	sbis	0x0e, 7	; 14
 5f0:	fe cf       	rjmp	.-4      	; 0x5ee <lcd_init+0x1c>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5f6:	88 60       	ori	r24, 0x08	; 8
 5f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 600:	87 7f       	andi	r24, 0xF7	; 247
 602:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 606:	8f e9       	ldi	r24, 0x9F	; 159
 608:	9f e0       	ldi	r25, 0x0F	; 15
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	f1 f7       	brne	.-4      	; 0x60a <lcd_init+0x38>
 60e:	00 c0       	rjmp	.+0      	; 0x610 <lcd_init+0x3e>
 610:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 612:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 614:	77 9b       	sbis	0x0e, 7	; 14
 616:	fe cf       	rjmp	.-4      	; 0x614 <lcd_init+0x42>
  SPDR = byte;                        //send payload
 618:	80 e3       	ldi	r24, 0x30	; 48
 61a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 61c:	77 9b       	sbis	0x0e, 7	; 14
 61e:	fe cf       	rjmp	.-4      	; 0x61c <lcd_init+0x4a>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 620:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 624:	88 60       	ori	r24, 0x08	; 8
 626:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 62a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 62e:	87 7f       	andi	r24, 0xF7	; 247
 630:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 634:	8f e9       	ldi	r24, 0x9F	; 159
 636:	9f e0       	ldi	r25, 0x0F	; 15
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <lcd_init+0x66>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <lcd_init+0x6c>
 63e:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 640:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 642:	77 9b       	sbis	0x0e, 7	; 14
 644:	fe cf       	rjmp	.-4      	; 0x642 <lcd_init+0x70>
  SPDR = byte;                        //send payload
 646:	80 e3       	ldi	r24, 0x30	; 48
 648:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 64a:	77 9b       	sbis	0x0e, 7	; 14
 64c:	fe cf       	rjmp	.-4      	; 0x64a <lcd_init+0x78>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 64e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 652:	88 60       	ori	r24, 0x08	; 8
 654:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 658:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 65c:	87 7f       	andi	r24, 0xF7	; 247
 65e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 662:	8f e9       	ldi	r24, 0x9F	; 159
 664:	9f e0       	ldi	r25, 0x0F	; 15
 666:	01 97       	sbiw	r24, 0x01	; 1
 668:	f1 f7       	brne	.-4      	; 0x666 <lcd_init+0x94>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <lcd_init+0x9a>
 66c:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 66e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 670:	77 9b       	sbis	0x0e, 7	; 14
 672:	fe cf       	rjmp	.-4      	; 0x670 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 674:	88 e3       	ldi	r24, 0x38	; 56
 676:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 678:	77 9b       	sbis	0x0e, 7	; 14
 67a:	fe cf       	rjmp	.-4      	; 0x678 <lcd_init+0xa6>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 67c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 680:	88 60       	ori	r24, 0x08	; 8
 682:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 686:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 68a:	87 7f       	andi	r24, 0xF7	; 247
 68c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 690:	8f e9       	ldi	r24, 0x9F	; 159
 692:	9f e0       	ldi	r25, 0x0F	; 15
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	f1 f7       	brne	.-4      	; 0x694 <lcd_init+0xc2>
 698:	00 c0       	rjmp	.+0      	; 0x69a <lcd_init+0xc8>
 69a:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 69c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 69e:	77 9b       	sbis	0x0e, 7	; 14
 6a0:	fe cf       	rjmp	.-4      	; 0x69e <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 6a2:	88 e0       	ldi	r24, 0x08	; 8
 6a4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6a6:	77 9b       	sbis	0x0e, 7	; 14
 6a8:	fe cf       	rjmp	.-4      	; 0x6a6 <lcd_init+0xd4>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ae:	88 60       	ori	r24, 0x08	; 8
 6b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6b8:	87 7f       	andi	r24, 0xF7	; 247
 6ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6be:	8f e9       	ldi	r24, 0x9F	; 159
 6c0:	9f e0       	ldi	r25, 0x0F	; 15
 6c2:	01 97       	sbiw	r24, 0x01	; 1
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <lcd_init+0xf0>
 6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <lcd_init+0xf6>
 6c8:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6ca:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6cc:	77 9b       	sbis	0x0e, 7	; 14
 6ce:	fe cf       	rjmp	.-4      	; 0x6cc <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6d4:	77 9b       	sbis	0x0e, 7	; 14
 6d6:	fe cf       	rjmp	.-4      	; 0x6d4 <lcd_init+0x102>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6dc:	88 60       	ori	r24, 0x08	; 8
 6de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6e6:	87 7f       	andi	r24, 0xF7	; 247
 6e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ec:	8f e9       	ldi	r24, 0x9F	; 159
 6ee:	9f e0       	ldi	r25, 0x0F	; 15
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <lcd_init+0x11e>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <lcd_init+0x124>
 6f6:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6f8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6fa:	77 9b       	sbis	0x0e, 7	; 14
 6fc:	fe cf       	rjmp	.-4      	; 0x6fa <lcd_init+0x128>
  SPDR = byte;                        //send payload
 6fe:	86 e0       	ldi	r24, 0x06	; 6
 700:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 702:	77 9b       	sbis	0x0e, 7	; 14
 704:	fe cf       	rjmp	.-4      	; 0x702 <lcd_init+0x130>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 706:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 70a:	88 60       	ori	r24, 0x08	; 8
 70c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 710:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 714:	87 7f       	andi	r24, 0xF7	; 247
 716:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71a:	8f e9       	ldi	r24, 0x9F	; 159
 71c:	9f e0       	ldi	r25, 0x0F	; 15
 71e:	01 97       	sbiw	r24, 0x01	; 1
 720:	f1 f7       	brne	.-4      	; 0x71e <lcd_init+0x14c>
 722:	00 c0       	rjmp	.+0      	; 0x724 <lcd_init+0x152>
 724:	00 00       	nop
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 726:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 728:	77 9b       	sbis	0x0e, 7	; 14
 72a:	fe cf       	rjmp	.-4      	; 0x728 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 72c:	8c e0       	ldi	r24, 0x0C	; 12
 72e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 730:	77 9b       	sbis	0x0e, 7	; 14
 732:	fe cf       	rjmp	.-4      	; 0x730 <lcd_init+0x15e>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 734:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 738:	88 60       	ori	r24, 0x08	; 8
 73a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 73e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 742:	87 7f       	andi	r24, 0xF7	; 247
 744:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 748:	8f e9       	ldi	r24, 0x9F	; 159
 74a:	9f e0       	ldi	r25, 0x0F	; 15
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <lcd_init+0x17a>
 750:	00 c0       	rjmp	.+0      	; 0x752 <lcd_init+0x180>
 752:	00 00       	nop
 754:	08 95       	ret

00000756 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 756:	4f 92       	push	r4
 758:	5f 92       	push	r5
 75a:	6f 92       	push	r6
 75c:	7f 92       	push	r7
 75e:	8f 92       	push	r8
 760:	9f 92       	push	r9
 762:	af 92       	push	r10
 764:	bf 92       	push	r11
 766:	cf 92       	push	r12
 768:	df 92       	push	r13
 76a:	ef 92       	push	r14
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	69 97       	sbiw	r28, 0x19	; 25
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	de bf       	out	0x3e, r29	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	cd bf       	out	0x3d, r28	; 61
 786:	14 2f       	mov	r17, r20
 788:	42 2e       	mov	r4, r18
 78a:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 78c:	00 23       	and	r16, r16
 78e:	79 f0       	breq	.+30     	; 0x7ae <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 790:	6b 01       	movw	r12, r22
 792:	7c 01       	movw	r14, r24
 794:	cc 24       	eor	r12, r12
 796:	f7 fc       	sbrc	r15, 7
 798:	c3 94       	inc	r12
 79a:	dd 24       	eor	r13, r13
 79c:	ee 24       	eor	r14, r14
 79e:	ff 24       	eor	r15, r15
 7a0:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 7a2:	6b 01       	movw	r12, r22
 7a4:	7c 01       	movw	r14, r24
 7a6:	97 fd       	sbrc	r25, 7
 7a8:	a5 c0       	rjmp	.+330    	; 0x8f4 <lcd_int32+0x19e>
 7aa:	c7 01       	movw	r24, r14
 7ac:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 7ae:	44 20       	and	r4, r4
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <lcd_int32+0x5e>
 7b2:	98 c0       	rjmp	.+304    	; 0x8e4 <lcd_int32+0x18e>
 7b4:	9e 01       	movw	r18, r28
 7b6:	2f 5f       	subi	r18, 0xFF	; 255
 7b8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ba:	59 01       	movw	r10, r18
 7bc:	49 01       	movw	r8, r18
 7be:	66 24       	eor	r6, r6
 7c0:	6a 94       	dec	r6
 7c2:	64 0c       	add	r6, r4
 7c4:	71 2c       	mov	r7, r1
 7c6:	3f ef       	ldi	r19, 0xFF	; 255
 7c8:	63 1a       	sub	r6, r19
 7ca:	73 0a       	sbc	r7, r19
 7cc:	6a 0c       	add	r6, r10
 7ce:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 7d0:	2a e0       	ldi	r18, 0x0A	; 10
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	50 e0       	ldi	r21, 0x00	; 0
 7d8:	0e 94 f6 05 	call	0xbec	; 0xbec <__divmodsi4>
 7dc:	e6 2f       	mov	r30, r22
 7de:	2a 8b       	std	Y+18, r18	; 0x12
 7e0:	3b 8b       	std	Y+19, r19	; 0x13
 7e2:	4c 8b       	std	Y+20, r20	; 0x14
 7e4:	5d 8b       	std	Y+21, r21	; 0x15
 7e6:	6a 89       	ldd	r22, Y+18	; 0x12
 7e8:	7b 89       	ldd	r23, Y+19	; 0x13
 7ea:	8c 89       	ldd	r24, Y+20	; 0x14
 7ec:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 7ee:	20 e3       	ldi	r18, 0x30	; 48
 7f0:	2e 0f       	add	r18, r30
 7f2:	f4 01       	movw	r30, r8
 7f4:	21 93       	st	Z+, r18
 7f6:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 7f8:	6e 16       	cp	r6, r30
 7fa:	7f 06       	cpc	r7, r31
 7fc:	49 f7       	brne	.-46     	; 0x7d0 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 7fe:	99 24       	eor	r9, r9
 800:	93 94       	inc	r9
 802:	94 0c       	add	r9, r4
 804:	f5 01       	movw	r30, r10
 806:	e4 0d       	add	r30, r4
 808:	f1 1d       	adc	r31, r1
 80a:	2e e2       	ldi	r18, 0x2E	; 46
 80c:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	30 e0       	ldi	r19, 0x00	; 0
 812:	40 e0       	ldi	r20, 0x00	; 0
 814:	50 e0       	ldi	r21, 0x00	; 0
 816:	0e 94 f6 05 	call	0xbec	; 0xbec <__divmodsi4>
 81a:	e6 2f       	mov	r30, r22
 81c:	2a 8b       	std	Y+18, r18	; 0x12
 81e:	3b 8b       	std	Y+19, r19	; 0x13
 820:	4c 8b       	std	Y+20, r20	; 0x14
 822:	5d 8b       	std	Y+21, r21	; 0x15
 824:	6e 8b       	std	Y+22, r22	; 0x16
 826:	7f 8b       	std	Y+23, r23	; 0x17
 828:	88 8f       	std	Y+24, r24	; 0x18
 82a:	99 8f       	std	Y+25, r25	; 0x19
 82c:	6a 89       	ldd	r22, Y+18	; 0x12
 82e:	7b 89       	ldd	r23, Y+19	; 0x13
 830:	8c 89       	ldd	r24, Y+20	; 0x14
 832:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 834:	31 e0       	ldi	r19, 0x01	; 1
 836:	39 0d       	add	r19, r9
 838:	d5 01       	movw	r26, r10
 83a:	a9 0d       	add	r26, r9
 83c:	b1 1d       	adc	r27, r1
 83e:	e0 5d       	subi	r30, 0xD0	; 208
 840:	ec 93       	st	X, r30
 842:	93 2e       	mov	r9, r19
        }while(qr.quot);
 844:	61 15       	cp	r22, r1
 846:	71 05       	cpc	r23, r1
 848:	81 05       	cpc	r24, r1
 84a:	91 05       	cpc	r25, r1
 84c:	01 f7       	brne	.-64     	; 0x80e <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 84e:	11 23       	and	r17, r17
 850:	61 f0       	breq	.+24     	; 0x86a <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 852:	51 10       	cpse	r5, r1
 854:	4d c0       	rjmp	.+154    	; 0x8f0 <lcd_int32+0x19a>
 856:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 858:	31 17       	cp	r19, r17
 85a:	38 f4       	brcc	.+14     	; 0x86a <lcd_int32+0x114>
 85c:	f5 01       	movw	r30, r10
 85e:	e3 0f       	add	r30, r19
 860:	f1 1d       	adc	r31, r1
 862:	90 83       	st	Z, r25
 864:	3f 5f       	subi	r19, 0xFF	; 255
 866:	13 13       	cpse	r17, r19
 868:	f9 cf       	rjmp	.-14     	; 0x85c <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 86a:	00 23       	and	r16, r16
 86c:	31 f0       	breq	.+12     	; 0x87a <lcd_int32+0x124>
 86e:	f5 01       	movw	r30, r10
 870:	e3 0f       	add	r30, r19
 872:	f1 1d       	adc	r31, r1
 874:	9d e2       	ldi	r25, 0x2D	; 45
 876:	90 83       	st	Z, r25
 878:	3f 5f       	subi	r19, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 87a:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 87c:	31 50       	subi	r19, 0x01	; 1
 87e:	f5 01       	movw	r30, r10
 880:	e3 0f       	add	r30, r19
 882:	f1 1d       	adc	r31, r1
 884:	90 81       	ld	r25, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 886:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 888:	77 9b       	sbis	0x0e, 7	; 14
 88a:	fe cf       	rjmp	.-4      	; 0x888 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 88c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 88e:	77 9b       	sbis	0x0e, 7	; 14
 890:	fe cf       	rjmp	.-4      	; 0x88e <lcd_int32+0x138>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 892:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 896:	98 60       	ori	r25, 0x08	; 8
 898:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 89c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8a0:	97 7f       	andi	r25, 0xF7	; 247
 8a2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 8a6:	8f e9       	ldi	r24, 0x9F	; 159
 8a8:	9f e0       	ldi	r25, 0x0F	; 15
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <lcd_int32+0x154>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <lcd_int32+0x15a>
 8b0:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 8b2:	31 11       	cpse	r19, r1
 8b4:	e3 cf       	rjmp	.-58     	; 0x87c <lcd_int32+0x126>

}
 8b6:	69 96       	adiw	r28, 0x19	; 25
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	de bf       	out	0x3e, r29	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	cd bf       	out	0x3d, r28	; 61
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	ef 90       	pop	r14
 8ce:	df 90       	pop	r13
 8d0:	cf 90       	pop	r12
 8d2:	bf 90       	pop	r11
 8d4:	af 90       	pop	r10
 8d6:	9f 90       	pop	r9
 8d8:	8f 90       	pop	r8
 8da:	7f 90       	pop	r7
 8dc:	6f 90       	pop	r6
 8de:	5f 90       	pop	r5
 8e0:	4f 90       	pop	r4
 8e2:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 8e4:	91 2c       	mov	r9, r1
 8e6:	9e 01       	movw	r18, r28
 8e8:	2f 5f       	subi	r18, 0xFF	; 255
 8ea:	3f 4f       	sbci	r19, 0xFF	; 255
 8ec:	59 01       	movw	r10, r18
 8ee:	8f cf       	rjmp	.-226    	; 0x80e <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 8f0:	90 e3       	ldi	r25, 0x30	; 48
 8f2:	b2 cf       	rjmp	.-156    	; 0x858 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 8f4:	f0 94       	com	r15
 8f6:	e0 94       	com	r14
 8f8:	d0 94       	com	r13
 8fa:	c0 94       	com	r12
 8fc:	c1 1c       	adc	r12, r1
 8fe:	d1 1c       	adc	r13, r1
 900:	e1 1c       	adc	r14, r1
 902:	f1 1c       	adc	r15, r1
 904:	52 cf       	rjmp	.-348    	; 0x7aa <lcd_int32+0x54>

00000906 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 906:	5f 92       	push	r5
 908:	6f 92       	push	r6
 90a:	7f 92       	push	r7
 90c:	8f 92       	push	r8
 90e:	9f 92       	push	r9
 910:	af 92       	push	r10
 912:	bf 92       	push	r11
 914:	cf 92       	push	r12
 916:	df 92       	push	r13
 918:	ef 92       	push	r14
 91a:	ff 92       	push	r15
 91c:	0f 93       	push	r16
 91e:	1f 93       	push	r17
 920:	cf 93       	push	r28
 922:	df 93       	push	r29
 924:	cd b7       	in	r28, 0x3d	; 61
 926:	de b7       	in	r29, 0x3e	; 62
 928:	61 97       	sbiw	r28, 0x11	; 17
 92a:	0f b6       	in	r0, 0x3f	; 63
 92c:	f8 94       	cli
 92e:	de bf       	out	0x3e, r29	; 62
 930:	0f be       	out	0x3f, r0	; 63
 932:	cd bf       	out	0x3d, r28	; 61
 934:	5c 01       	movw	r10, r24
 936:	96 2e       	mov	r9, r22
 938:	54 2e       	mov	r5, r20
 93a:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 93c:	8b 2c       	mov	r8, r11
 93e:	88 1c       	adc	r8, r8
 940:	88 24       	eor	r8, r8
 942:	88 1c       	adc	r8, r8
 944:	78 2c       	mov	r7, r8
 946:	9c 01       	movw	r18, r24
 948:	97 fd       	sbrc	r25, 7
 94a:	9f c0       	rjmp	.+318    	; 0xa8a <lcd_int16+0x184>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
 94c:	55 20       	and	r5, r5
 94e:	09 f4       	brne	.+2      	; 0x952 <lcd_int16+0x4c>
 950:	90 c0       	rjmp	.+288    	; 0xa72 <lcd_int16+0x16c>
 952:	8e 01       	movw	r16, r28
 954:	0f 5f       	subi	r16, 0xFF	; 255
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	78 01       	movw	r14, r16
 95a:	cc 24       	eor	r12, r12
 95c:	ca 94       	dec	r12
 95e:	c5 0c       	add	r12, r5
 960:	d1 2c       	mov	r13, r1
 962:	8f ef       	ldi	r24, 0xFF	; 255
 964:	c8 1a       	sub	r12, r24
 966:	d8 0a       	sbc	r13, r24
 968:	c0 0e       	add	r12, r16
 96a:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 96c:	6a e0       	ldi	r22, 0x0A	; 10
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	c9 01       	movw	r24, r18
 972:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__divmodhi4>
 976:	46 2f       	mov	r20, r22
 978:	24 2f       	mov	r18, r20
 97a:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
 97c:	80 5d       	subi	r24, 0xD0	; 208
 97e:	f7 01       	movw	r30, r14
 980:	81 93       	st	Z+, r24
 982:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 984:	ec 15       	cp	r30, r12
 986:	fd 05       	cpc	r31, r13
 988:	89 f7       	brne	.-30     	; 0x96c <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 98a:	ff 24       	eor	r15, r15
 98c:	f3 94       	inc	r15
 98e:	f5 0c       	add	r15, r5
 990:	f8 01       	movw	r30, r16
 992:	e5 0d       	add	r30, r5
 994:	f1 1d       	adc	r31, r1
 996:	8e e2       	ldi	r24, 0x2E	; 46
 998:	80 83       	st	Z, r24
 99a:	01 c0       	rjmp	.+2      	; 0x99e <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 99c:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 99e:	6a e0       	ldi	r22, 0x0A	; 10
 9a0:	70 e0       	ldi	r23, 0x00	; 0
 9a2:	c9 01       	movw	r24, r18
 9a4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__divmodhi4>
 9a8:	46 2f       	mov	r20, r22
 9aa:	24 2f       	mov	r18, r20
 9ac:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
 9ae:	91 e0       	ldi	r25, 0x01	; 1
 9b0:	9f 0d       	add	r25, r15
 9b2:	f8 01       	movw	r30, r16
 9b4:	ef 0d       	add	r30, r15
 9b6:	f1 1d       	adc	r31, r1
 9b8:	80 5d       	subi	r24, 0xD0	; 208
 9ba:	80 83       	st	Z, r24
        }
        while(qr.quot);
 9bc:	21 15       	cp	r18, r1
 9be:	31 05       	cpc	r19, r1
 9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 9c2:	61 10       	cpse	r6, r1
 9c4:	5b c0       	rjmp	.+182    	; 0xa7c <lcd_int16+0x176>
 9c6:	b7 fc       	sbrc	r11, 7
 9c8:	65 c0       	rjmp	.+202    	; 0xa94 <lcd_int16+0x18e>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 9ca:	99 20       	and	r9, r9
 9cc:	b1 f0       	breq	.+44     	; 0x9fa <lcd_int16+0xf4>
 9ce:	68 2d       	mov	r22, r8
 9d0:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 9d2:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 9d4:	29 2f       	mov	r18, r25
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	49 2d       	mov	r20, r9
 9da:	50 e0       	ldi	r21, 0x00	; 0
 9dc:	46 1b       	sub	r20, r22
 9de:	57 0b       	sbc	r21, r23
 9e0:	24 17       	cp	r18, r20
 9e2:	35 07       	cpc	r19, r21
 9e4:	54 f4       	brge	.+20     	; 0x9fa <lcd_int16+0xf4>
 9e6:	9f 5f       	subi	r25, 0xFF	; 255
 9e8:	f8 01       	movw	r30, r16
 9ea:	e2 0f       	add	r30, r18
 9ec:	f3 1f       	adc	r31, r19
 9ee:	80 83       	st	Z, r24
 9f0:	29 2f       	mov	r18, r25
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	24 17       	cp	r18, r20
 9f6:	35 07       	cpc	r19, r21
 9f8:	b4 f3       	brlt	.-20     	; 0x9e6 <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 9fa:	77 20       	and	r7, r7
 9fc:	31 f0       	breq	.+12     	; 0xa0a <lcd_int16+0x104>
 9fe:	f8 01       	movw	r30, r16
 a00:	e9 0f       	add	r30, r25
 a02:	f1 1d       	adc	r31, r1
 a04:	8d e2       	ldi	r24, 0x2D	; 45
 a06:	80 83       	st	Z, r24
 a08:	9f 5f       	subi	r25, 0xFF	; 255
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a0a:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 a0c:	91 50       	subi	r25, 0x01	; 1
 a0e:	f8 01       	movw	r30, r16
 a10:	e9 0f       	add	r30, r25
 a12:	f1 1d       	adc	r31, r1
 a14:	80 81       	ld	r24, Z
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 a16:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a18:	77 9b       	sbis	0x0e, 7	; 14
 a1a:	fe cf       	rjmp	.-4      	; 0xa18 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
 a1c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 a1e:	77 9b       	sbis	0x0e, 7	; 14
 a20:	fe cf       	rjmp	.-4      	; 0xa1e <lcd_int16+0x118>
//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 a22:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a26:	88 60       	ori	r24, 0x08	; 8
 a28:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a2c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a30:	87 7f       	andi	r24, 0xF7	; 247
 a32:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 a36:	ef e9       	ldi	r30, 0x9F	; 159
 a38:	ff e0       	ldi	r31, 0x0F	; 15
 a3a:	31 97       	sbiw	r30, 0x01	; 1
 a3c:	f1 f7       	brne	.-4      	; 0xa3a <lcd_int16+0x134>
 a3e:	00 c0       	rjmp	.+0      	; 0xa40 <lcd_int16+0x13a>
 a40:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
 a42:	91 11       	cpse	r25, r1
 a44:	e3 cf       	rjmp	.-58     	; 0xa0c <lcd_int16+0x106>
}
 a46:	61 96       	adiw	r28, 0x11	; 17
 a48:	0f b6       	in	r0, 0x3f	; 63
 a4a:	f8 94       	cli
 a4c:	de bf       	out	0x3e, r29	; 62
 a4e:	0f be       	out	0x3f, r0	; 63
 a50:	cd bf       	out	0x3d, r28	; 61
 a52:	df 91       	pop	r29
 a54:	cf 91       	pop	r28
 a56:	1f 91       	pop	r17
 a58:	0f 91       	pop	r16
 a5a:	ff 90       	pop	r15
 a5c:	ef 90       	pop	r14
 a5e:	df 90       	pop	r13
 a60:	cf 90       	pop	r12
 a62:	bf 90       	pop	r11
 a64:	af 90       	pop	r10
 a66:	9f 90       	pop	r9
 a68:	8f 90       	pop	r8
 a6a:	7f 90       	pop	r7
 a6c:	6f 90       	pop	r6
 a6e:	5f 90       	pop	r5
 a70:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 a72:	f1 2c       	mov	r15, r1
 a74:	8e 01       	movw	r16, r28
 a76:	0f 5f       	subi	r16, 0xFF	; 255
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	91 cf       	rjmp	.-222    	; 0x99e <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 a7c:	99 20       	and	r9, r9
 a7e:	09 f4       	brne	.+2      	; 0xa82 <lcd_int16+0x17c>
 a80:	bc cf       	rjmp	.-136    	; 0x9fa <lcd_int16+0xf4>
 a82:	68 2d       	mov	r22, r8
 a84:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 a86:	80 e3       	ldi	r24, 0x30	; 48
 a88:	a5 cf       	rjmp	.-182    	; 0x9d4 <lcd_int16+0xce>
 a8a:	22 27       	eor	r18, r18
 a8c:	33 27       	eor	r19, r19
 a8e:	28 1b       	sub	r18, r24
 a90:	39 0b       	sbc	r19, r25
 a92:	5c cf       	rjmp	.-328    	; 0x94c <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 a94:	f3 94       	inc	r15
 a96:	f3 94       	inc	r15
 a98:	f8 01       	movw	r30, r16
 a9a:	e9 0f       	add	r30, r25
 a9c:	f1 1d       	adc	r31, r1
 a9e:	8d e2       	ldi	r24, 0x2D	; 45
 aa0:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 aa2:	99 20       	and	r9, r9
 aa4:	59 f0       	breq	.+22     	; 0xabc <lcd_int16+0x1b6>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 aa6:	2f 2d       	mov	r18, r15
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	49 2d       	mov	r20, r9
 aac:	50 e0       	ldi	r21, 0x00	; 0
 aae:	24 17       	cp	r18, r20
 ab0:	35 07       	cpc	r19, r21
 ab2:	24 f4       	brge	.+8      	; 0xabc <lcd_int16+0x1b6>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 ab4:	9f 2d       	mov	r25, r15
                bSigned = 0;
 ab6:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	95 cf       	rjmp	.-214    	; 0x9e6 <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 abc:	9f 2d       	mov	r25, r15
 abe:	a5 cf       	rjmp	.-182    	; 0xa0a <lcd_int16+0x104>

00000ac0 <main>:
div_t    fp_adc_result, fp_low_result;  //double fp_adc_result; 

/*******************************************************/
void spi_init(void){
 /* Run this code before attempting to write to the LCD.*/
 DDRF  |= 0x08;  //port F bit 3 is enabling for LCD
 ac0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 ac4:	88 60       	ori	r24, 0x08	; 8
 ac6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 PORTF &= 0xF7;  //port F bit 3 is initially low
 aca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 ace:	87 7f       	andi	r24, 0xF7	; 247
 ad0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

 DDRB  |= 0x07;  //Turn on SS_n, MOSI, SCLK. SS_n must be out for MSTR mode
 ad4:	87 b3       	in	r24, 0x17	; 23
 ad6:	87 60       	ori	r24, 0x07	; 7
 ad8:	87 bb       	out	0x17, r24	; 23
//see: /$install_path/avr/include/avr/iom128.h for bit definitions   

 //Master mode, Clock=clk/4, Cycle half phase, Low polarity, MSB first
 SPCR=(1<<SPE) | (1<<MSTR); //enable SPI, clk low initially, rising edge sample
 ada:	80 e5       	ldi	r24, 0x50	; 80
 adc:	8d b9       	out	0x0d, r24	; 13
 SPSR=(1<<SPI2X);           //SPI at 2x speed (8 MHz)  
 ade:	81 e0       	ldi	r24, 0x01	; 1
 ae0:	8e b9       	out	0x0e, r24	; 14

int main()
{
//initalize the SPI port then the LCD
spi_init();
lcd_init(); 
 ae2:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <lcd_init>
clear_display();
 ae6:	0e 94 3e 02 	call	0x47c	; 0x47c <clear_display>

//Initalize ADC and its ports
DDRF  &= ~(_BV(DDF7)); //make port F bit 7 the ADC input  
 aea:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 aee:	8f 77       	andi	r24, 0x7F	; 127
 af0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
PORTF &= ~(_BV(PF7));  //port F bit 7 pullups must be off 
 af4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 af8:	8f 77       	andi	r24, 0x7F	; 127
 afa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

ADMUX |= (0 << REFS1) | (1 << REFS0) | (0 << MUX4) | (0 << MUX3) | (1 << MUX2) | (1 << MUX1) | (1 << MUX0);    //single-ended input, PORTF bit 7, right adjusted, 10 bits
 afe:	87 b1       	in	r24, 0x07	; 7
 b00:	87 64       	ori	r24, 0x47	; 71
 b02:	87 b9       	out	0x07, r24	; 7
                                         //reference is AVCC

ADCSRA |=  (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC enabled, don't start yet, single shot mode 
 b04:	86 b1       	in	r24, 0x06	; 6
 b06:	87 68       	ori	r24, 0x87	; 135
 b08:	86 b9       	out	0x06, r24	; 6
  //remainder in a structure called div_t that contains two members, quot and rem. 
  
  //now determine Vin, where Vin = (adc_result/204.8)
  fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 b0a:	c4 e6       	ldi	r28, 0x64	; 100
                                         //reference is AVCC

ADCSRA |=  (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC enabled, don't start yet, single shot mode 
                                         //division factor is 128 (125khz)
while(1){ 
  ADCSRA |= (1 << ADSC);                          //poke the ADSC bit and start conversion
 b0c:	36 9a       	sbi	0x06, 6	; 6

  while(bit_is_clear(ADCSRA, ADIF)){}                     //spin while interrupt flag not set
 b0e:	34 9b       	sbis	0x06, 4	; 6
 b10:	fe cf       	rjmp	.-4      	; 0xb0e <main+0x4e>

  ADCSRA |= 1 << ADIF;                              //its done, clear flag by writing a one 
 b12:	34 9a       	sbi	0x06, 4	; 6

  adc_result = ADC;                      //read the ADC output as 16 bits
 b14:	84 b1       	in	r24, 0x04	; 4
 b16:	95 b1       	in	r25, 0x05	; 5
 b18:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <adc_result+0x1>
 b1c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adc_result>

  //div() function computes the value num/denom and returns the quotient and
  //remainder in a structure called div_t that contains two members, quot and rem. 
  
  //now determine Vin, where Vin = (adc_result/204.8)
  fp_adc_result = div(adc_result, 205);              //do division by 205 (204.8 to be exact)
 b20:	6d ec       	ldi	r22, 0xCD	; 205
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__divmodhi4>
 b28:	9b 01       	movw	r18, r22
 b2a:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <fp_adc_result>
 b2e:	70 93 29 01 	sts	0x0129, r23	; 0x800129 <fp_adc_result+0x1>
 b32:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <fp_adc_result+0x2>
 b36:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <fp_adc_result+0x3>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 b3a:	4a e0       	ldi	r20, 0x0A	; 10
 b3c:	68 e1       	ldi	r22, 0x18	; 24
 b3e:	71 e0       	ldi	r23, 0x01	; 1
 b40:	c9 01       	movw	r24, r18
 b42:	0e 94 4b 06 	call	0xc96	; 0xc96 <__itoa_ncheck>
  itoa(fp_adc_result.quot, lcd_str_h, 10);           //convert non-fractional part to ascii string
  fp_low_result = div((fp_adc_result.rem*100), 205); //get the decimal fraction into non-fractional form 
 b46:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <fp_adc_result+0x2>
 b4a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <fp_adc_result+0x3>
 b4e:	6d ec       	ldi	r22, 0xCD	; 205
 b50:	70 e0       	ldi	r23, 0x00	; 0
 b52:	9c 01       	movw	r18, r24
 b54:	c2 9f       	mul	r28, r18
 b56:	c0 01       	movw	r24, r0
 b58:	c3 9f       	mul	r28, r19
 b5a:	90 0d       	add	r25, r0
 b5c:	11 24       	eor	r1, r1
 b5e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__divmodhi4>
 b62:	9b 01       	movw	r18, r22
 b64:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <fp_low_result>
 b68:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <fp_low_result+0x1>
 b6c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <fp_low_result+0x2>
 b70:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <fp_low_result+0x3>
 b74:	4a e0       	ldi	r20, 0x0A	; 10
 b76:	63 e0       	ldi	r22, 0x03	; 3
 b78:	71 e0       	ldi	r23, 0x01	; 1
 b7a:	c9 01       	movw	r24, r18
 b7c:	0e 94 4b 06 	call	0xc96	; 0xc96 <__itoa_ncheck>
  itoa(fp_low_result.quot, lcd_str_l, 10);           //convert fractional part to ascii string

  //send string to LCD
  string2lcd(lcd_str_h);  //write upper half
 b80:	88 e1       	ldi	r24, 0x18	; 24
 b82:	91 e0       	ldi	r25, 0x01	; 1
 b84:	0e 94 ba 02 	call	0x574	; 0x574 <string2lcd>
  char2lcd('.');          //write decimal point
 b88:	8e e2       	ldi	r24, 0x2E	; 46
 b8a:	0e 94 a2 02 	call	0x544	; 0x544 <char2lcd>
  string2lcd(lcd_str_l);  //write lower half
 b8e:	83 e0       	ldi	r24, 0x03	; 3
 b90:	91 e0       	ldi	r25, 0x01	; 1
 b92:	0e 94 ba 02 	call	0x574	; 0x574 <string2lcd>

  for(i=0;i<=10;i++){ _delay_ms(50);}  //delay 0.5 sec
 b96:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b9a:	3f ef       	ldi	r19, 0xFF	; 255
 b9c:	80 e7       	ldi	r24, 0x70	; 112
 b9e:	92 e0       	ldi	r25, 0x02	; 2
 ba0:	31 50       	subi	r19, 0x01	; 1
 ba2:	80 40       	sbci	r24, 0x00	; 0
 ba4:	90 40       	sbci	r25, 0x00	; 0
 ba6:	e1 f7       	brne	.-8      	; 0xba0 <main+0xe0>
 ba8:	00 c0       	rjmp	.+0      	; 0xbaa <main+0xea>
 baa:	00 00       	nop
 bac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <i>
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <i>
 bb6:	8b 30       	cpi	r24, 0x0B	; 11
 bb8:	80 f3       	brcs	.-32     	; 0xb9a <main+0xda>
  clear_display();
 bba:	0e 94 3e 02 	call	0x47c	; 0x47c <clear_display>
  cursor_home();
 bbe:	0e 94 56 02 	call	0x4ac	; 0x4ac <cursor_home>
  } //while
 bc2:	a4 cf       	rjmp	.-184    	; 0xb0c <main+0x4c>

00000bc4 <__divmodhi4>:
 bc4:	97 fb       	bst	r25, 7
 bc6:	07 2e       	mov	r0, r23
 bc8:	16 f4       	brtc	.+4      	; 0xbce <__divmodhi4+0xa>
 bca:	00 94       	com	r0
 bcc:	07 d0       	rcall	.+14     	; 0xbdc <__divmodhi4_neg1>
 bce:	77 fd       	sbrc	r23, 7
 bd0:	09 d0       	rcall	.+18     	; 0xbe4 <__divmodhi4_neg2>
 bd2:	0e 94 15 06 	call	0xc2a	; 0xc2a <__udivmodhi4>
 bd6:	07 fc       	sbrc	r0, 7
 bd8:	05 d0       	rcall	.+10     	; 0xbe4 <__divmodhi4_neg2>
 bda:	3e f4       	brtc	.+14     	; 0xbea <__divmodhi4_exit>

00000bdc <__divmodhi4_neg1>:
 bdc:	90 95       	com	r25
 bde:	81 95       	neg	r24
 be0:	9f 4f       	sbci	r25, 0xFF	; 255
 be2:	08 95       	ret

00000be4 <__divmodhi4_neg2>:
 be4:	70 95       	com	r23
 be6:	61 95       	neg	r22
 be8:	7f 4f       	sbci	r23, 0xFF	; 255

00000bea <__divmodhi4_exit>:
 bea:	08 95       	ret

00000bec <__divmodsi4>:
 bec:	05 2e       	mov	r0, r21
 bee:	97 fb       	bst	r25, 7
 bf0:	1e f4       	brtc	.+6      	; 0xbf8 <__divmodsi4+0xc>
 bf2:	00 94       	com	r0
 bf4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__negsi2>
 bf8:	57 fd       	sbrc	r21, 7
 bfa:	07 d0       	rcall	.+14     	; 0xc0a <__divmodsi4_neg2>
 bfc:	0e 94 29 06 	call	0xc52	; 0xc52 <__udivmodsi4>
 c00:	07 fc       	sbrc	r0, 7
 c02:	03 d0       	rcall	.+6      	; 0xc0a <__divmodsi4_neg2>
 c04:	4e f4       	brtc	.+18     	; 0xc18 <__divmodsi4_exit>
 c06:	0c 94 0d 06 	jmp	0xc1a	; 0xc1a <__negsi2>

00000c0a <__divmodsi4_neg2>:
 c0a:	50 95       	com	r21
 c0c:	40 95       	com	r20
 c0e:	30 95       	com	r19
 c10:	21 95       	neg	r18
 c12:	3f 4f       	sbci	r19, 0xFF	; 255
 c14:	4f 4f       	sbci	r20, 0xFF	; 255
 c16:	5f 4f       	sbci	r21, 0xFF	; 255

00000c18 <__divmodsi4_exit>:
 c18:	08 95       	ret

00000c1a <__negsi2>:
 c1a:	90 95       	com	r25
 c1c:	80 95       	com	r24
 c1e:	70 95       	com	r23
 c20:	61 95       	neg	r22
 c22:	7f 4f       	sbci	r23, 0xFF	; 255
 c24:	8f 4f       	sbci	r24, 0xFF	; 255
 c26:	9f 4f       	sbci	r25, 0xFF	; 255
 c28:	08 95       	ret

00000c2a <__udivmodhi4>:
 c2a:	aa 1b       	sub	r26, r26
 c2c:	bb 1b       	sub	r27, r27
 c2e:	51 e1       	ldi	r21, 0x11	; 17
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <__udivmodhi4_ep>

00000c32 <__udivmodhi4_loop>:
 c32:	aa 1f       	adc	r26, r26
 c34:	bb 1f       	adc	r27, r27
 c36:	a6 17       	cp	r26, r22
 c38:	b7 07       	cpc	r27, r23
 c3a:	10 f0       	brcs	.+4      	; 0xc40 <__udivmodhi4_ep>
 c3c:	a6 1b       	sub	r26, r22
 c3e:	b7 0b       	sbc	r27, r23

00000c40 <__udivmodhi4_ep>:
 c40:	88 1f       	adc	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	5a 95       	dec	r21
 c46:	a9 f7       	brne	.-22     	; 0xc32 <__udivmodhi4_loop>
 c48:	80 95       	com	r24
 c4a:	90 95       	com	r25
 c4c:	bc 01       	movw	r22, r24
 c4e:	cd 01       	movw	r24, r26
 c50:	08 95       	ret

00000c52 <__udivmodsi4>:
 c52:	a1 e2       	ldi	r26, 0x21	; 33
 c54:	1a 2e       	mov	r1, r26
 c56:	aa 1b       	sub	r26, r26
 c58:	bb 1b       	sub	r27, r27
 c5a:	fd 01       	movw	r30, r26
 c5c:	0d c0       	rjmp	.+26     	; 0xc78 <__udivmodsi4_ep>

00000c5e <__udivmodsi4_loop>:
 c5e:	aa 1f       	adc	r26, r26
 c60:	bb 1f       	adc	r27, r27
 c62:	ee 1f       	adc	r30, r30
 c64:	ff 1f       	adc	r31, r31
 c66:	a2 17       	cp	r26, r18
 c68:	b3 07       	cpc	r27, r19
 c6a:	e4 07       	cpc	r30, r20
 c6c:	f5 07       	cpc	r31, r21
 c6e:	20 f0       	brcs	.+8      	; 0xc78 <__udivmodsi4_ep>
 c70:	a2 1b       	sub	r26, r18
 c72:	b3 0b       	sbc	r27, r19
 c74:	e4 0b       	sbc	r30, r20
 c76:	f5 0b       	sbc	r31, r21

00000c78 <__udivmodsi4_ep>:
 c78:	66 1f       	adc	r22, r22
 c7a:	77 1f       	adc	r23, r23
 c7c:	88 1f       	adc	r24, r24
 c7e:	99 1f       	adc	r25, r25
 c80:	1a 94       	dec	r1
 c82:	69 f7       	brne	.-38     	; 0xc5e <__udivmodsi4_loop>
 c84:	60 95       	com	r22
 c86:	70 95       	com	r23
 c88:	80 95       	com	r24
 c8a:	90 95       	com	r25
 c8c:	9b 01       	movw	r18, r22
 c8e:	ac 01       	movw	r20, r24
 c90:	bd 01       	movw	r22, r26
 c92:	cf 01       	movw	r24, r30
 c94:	08 95       	ret

00000c96 <__itoa_ncheck>:
 c96:	bb 27       	eor	r27, r27
 c98:	4a 30       	cpi	r20, 0x0A	; 10
 c9a:	31 f4       	brne	.+12     	; 0xca8 <__itoa_ncheck+0x12>
 c9c:	99 23       	and	r25, r25
 c9e:	22 f4       	brpl	.+8      	; 0xca8 <__itoa_ncheck+0x12>
 ca0:	bd e2       	ldi	r27, 0x2D	; 45
 ca2:	90 95       	com	r25
 ca4:	81 95       	neg	r24
 ca6:	9f 4f       	sbci	r25, 0xFF	; 255
 ca8:	0c 94 57 06 	jmp	0xcae	; 0xcae <__utoa_common>

00000cac <__utoa_ncheck>:
 cac:	bb 27       	eor	r27, r27

00000cae <__utoa_common>:
 cae:	fb 01       	movw	r30, r22
 cb0:	55 27       	eor	r21, r21
 cb2:	aa 27       	eor	r26, r26
 cb4:	88 0f       	add	r24, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	aa 1f       	adc	r26, r26
 cba:	a4 17       	cp	r26, r20
 cbc:	10 f0       	brcs	.+4      	; 0xcc2 <__utoa_common+0x14>
 cbe:	a4 1b       	sub	r26, r20
 cc0:	83 95       	inc	r24
 cc2:	50 51       	subi	r21, 0x10	; 16
 cc4:	b9 f7       	brne	.-18     	; 0xcb4 <__utoa_common+0x6>
 cc6:	a0 5d       	subi	r26, 0xD0	; 208
 cc8:	aa 33       	cpi	r26, 0x3A	; 58
 cca:	08 f0       	brcs	.+2      	; 0xcce <__utoa_common+0x20>
 ccc:	a9 5d       	subi	r26, 0xD9	; 217
 cce:	a1 93       	st	Z+, r26
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	79 f7       	brne	.-34     	; 0xcb2 <__utoa_common+0x4>
 cd4:	b1 11       	cpse	r27, r1
 cd6:	b1 93       	st	Z+, r27
 cd8:	11 92       	st	Z+, r1
 cda:	cb 01       	movw	r24, r22
 cdc:	0c 94 70 06 	jmp	0xce0	; 0xce0 <strrev>

00000ce0 <strrev>:
 ce0:	dc 01       	movw	r26, r24
 ce2:	fc 01       	movw	r30, r24
 ce4:	67 2f       	mov	r22, r23
 ce6:	71 91       	ld	r23, Z+
 ce8:	77 23       	and	r23, r23
 cea:	e1 f7       	brne	.-8      	; 0xce4 <strrev+0x4>
 cec:	32 97       	sbiw	r30, 0x02	; 2
 cee:	04 c0       	rjmp	.+8      	; 0xcf8 <strrev+0x18>
 cf0:	7c 91       	ld	r23, X
 cf2:	6d 93       	st	X+, r22
 cf4:	70 83       	st	Z, r23
 cf6:	62 91       	ld	r22, -Z
 cf8:	ae 17       	cp	r26, r30
 cfa:	bf 07       	cpc	r27, r31
 cfc:	c8 f3       	brcs	.-14     	; 0xcf0 <strrev+0x10>
 cfe:	08 95       	ret

00000d00 <_exit>:
 d00:	f8 94       	cli

00000d02 <__stop_program>:
 d02:	ff cf       	rjmp	.-2      	; 0xd02 <__stop_program>
