
uart_rxtx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000d76  00000e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e9  0080010c  0080010c  00000e16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002072  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8f  00000000  00000000  00002f5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c8b  00000000  00000000  00003ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  00004978  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000664  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000180f  00000000  00000000  000052f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_18>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3f       	cpi	r26, 0xF5	; 245
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c1 05 	call	0xb82	; 0xb82 <main>
  c6:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
uint8_t send_seq = 0;   //transmit sequence number
char lcd_string[3];     //holds value of sequence number

void spi_init(void)
{
  DDRB = DDRB | 0x07;               //Turn on SS, MOSI, SCLK pins
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
  SPCR |= (1 << SPE) | (1 << MSTR); //set up SPI mode
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
  SPSR |= (1 << SPI2X);             //run at double speed
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <__vector_18>:
    //**************  end tx portion ***************
  } //while
} //main

ISR(USART0_RX_vect)
{
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	0b b6       	in	r0, 0x3b	; 59
  ea:	0f 92       	push	r0
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
  static uint8_t i;
  rx_char = UDR0;               //get character
  f4:	8c b1       	in	r24, 0x0c	; 12
  f6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rx_char>
  lcd_str_array[i++] = rx_char; //store in array
  fa:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <i.2115>
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9e 0f       	add	r25, r30
 102:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <i.2115>
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	ec 5e       	subi	r30, 0xEC	; 236
 10a:	fe 4f       	sbci	r31, 0xFE	; 254
 10c:	80 83       	st	Z, r24
                                //if entire string has arrived, set flag, reset index
  if (rx_char == '\0')
 10e:	81 11       	cpse	r24, r1
 110:	09 c0       	rjmp	.+18     	; 0x124 <__vector_18+0x46>
  {
    rcv_rdy = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rcv_rdy>
    lcd_str_array[--i] = (' '); //clear the count field
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 83       	st	Z, r24
    lcd_str_array[i + 1] = (' ');
 11c:	81 83       	std	Z+1, r24	; 0x01
    lcd_str_array[i + 2] = (' ');
 11e:	82 83       	std	Z+2, r24	; 0x02
    i = 0;
 120:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <i.2115>
  }
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0b be       	out	0x3b, r0	; 59
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <uart_putc>:
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
 13a:	5d 9b       	sbis	0x0b, 5	; 11
 13c:	fe cf       	rjmp	.-4      	; 0x13a <uart_putc>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
 13e:	8c b9       	out	0x0c, r24	; 12
  while (!(UCSR0A & (1 << UDRE0)))
 140:	5d 9b       	sbis	0x0b, 5	; 11
 142:	fe cf       	rjmp	.-4      	; 0x140 <uart_putc+0x6>
    ; // Wait for previous transmissions
}
 144:	08 95       	ret

00000146 <uart1_putc>:
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data)
{
  while (!(UCSR1A & (1 << UDRE1)))
 146:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 14a:	95 ff       	sbrs	r25, 5
 14c:	fc cf       	rjmp	.-8      	; 0x146 <uart1_putc>
    ;          // Wait for previous transmissions
  UDR1 = data; // Send data byte
 14e:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  while (!(UCSR1A & (1 << UDRE1)))
 152:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 156:	85 ff       	sbrs	r24, 5
 158:	fc cf       	rjmp	.-8      	; 0x152 <uart1_putc+0xc>
    ; // Wait for previous transmissions
}
 15a:	08 95       	ret

0000015c <uart_puts>:
//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str)
{
 15c:	fc 01       	movw	r30, r24
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
 15e:	90 81       	ld	r25, Z
 160:	99 23       	and	r25, r25
 162:	49 f0       	breq	.+18     	; 0x176 <uart_puts+0x1a>
 164:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
 166:	5d 9b       	sbis	0x0b, 5	; 11
 168:	fe cf       	rjmp	.-4      	; 0x166 <uart_puts+0xa>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
 16a:	9c b9       	out	0x0c, r25	; 12
  while (!(UCSR0A & (1 << UDRE0)))
 16c:	5d 9b       	sbis	0x0b, 5	; 11
 16e:	fe cf       	rjmp	.-4      	; 0x16c <uart_puts+0x10>
//void uart_puts(unsigned char *str) {
void uart_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
 170:	91 91       	ld	r25, Z+
 172:	91 11       	cpse	r25, r1
 174:	f8 cf       	rjmp	.-16     	; 0x166 <uart_puts+0xa>
 176:	08 95       	ret

00000178 <uart1_puts>:
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	22 23       	and	r18, r18
 17e:	71 f0       	breq	.+28     	; 0x19c <uart1_puts+0x24>
 180:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data)
{
  while (!(UCSR1A & (1 << UDRE1)))
 182:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 186:	95 ff       	sbrs	r25, 5
 188:	fc cf       	rjmp	.-8      	; 0x182 <uart1_puts+0xa>
    ;          // Wait for previous transmissions
  UDR1 = data; // Send data byte
 18a:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  while (!(UCSR1A & (1 << UDRE1)))
 18e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 192:	95 ff       	sbrs	r25, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <uart1_puts+0x16>
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
 196:	21 91       	ld	r18, Z+
 198:	21 11       	cpse	r18, r1
 19a:	f3 cf       	rjmp	.-26     	; 0x182 <uart1_puts+0xa>
 19c:	08 95       	ret

0000019e <uart_puts_p>:
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str)
{
  // Loop through string, sending each character
  while (pgm_read_byte(str) != 0x00)
 19e:	9c 01       	movw	r18, r24
 1a0:	fc 01       	movw	r30, r24
 1a2:	44 91       	lpm	r20, Z
 1a4:	44 23       	and	r20, r20
 1a6:	69 f0       	breq	.+26     	; 0x1c2 <uart_puts_p+0x24>
  {
    uart_putc(pgm_read_byte(str++));
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	f9 01       	movw	r30, r18
 1ac:	24 91       	lpm	r18, Z
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
 1ae:	5d 9b       	sbis	0x0b, 5	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart_puts_p+0x10>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
 1b2:	2c b9       	out	0x0c, r18	; 12
  while (!(UCSR0A & (1 << UDRE0)))
 1b4:	5d 9b       	sbis	0x0b, 5	; 11
 1b6:	fe cf       	rjmp	.-4      	; 0x1b4 <uart_puts_p+0x16>
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str)
{
  // Loop through string, sending each character
  while (pgm_read_byte(str) != 0x00)
 1b8:	9c 01       	movw	r18, r24
 1ba:	fc 01       	movw	r30, r24
 1bc:	44 91       	lpm	r20, Z
 1be:	41 11       	cpse	r20, r1
 1c0:	f3 cf       	rjmp	.-26     	; 0x1a8 <uart_puts_p+0xa>
  {
    uart_putc(pgm_read_byte(str++));
  }
}
 1c2:	08 95       	ret

000001c4 <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init()
{
  //rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); //INTERRUPTS ENABLED
 1c4:	8a b1       	in	r24, 0x0a	; 10
 1c6:	88 69       	ori	r24, 0x98	; 152
 1c8:	8a b9       	out	0x0a, r24	; 10
                                                         //  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 1ca:	e5 e9       	ldi	r30, 0x95	; 149
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	86 60       	ori	r24, 0x06	; 6
 1d2:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >> 8); //load upper byte of the baud rate into UBRR
 1d4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L = BAUDVALUE;        //load lower byte of the baud rate into UBRR
 1d8:	87 e6       	ldi	r24, 0x67	; 103
 1da:	89 b9       	out	0x09, r24	; 9
 1dc:	08 95       	ret

000001de <uart1_init>:

void uart1_init()
{
  //rx and tx enable, receive interrupt enabled, 8 bit characters
  //UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1 << RXEN1) | (1 << TXEN1); //INTERRUPS DISABLED
 1de:	ea e9       	ldi	r30, 0x9A	; 154
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	80 83       	st	Z, r24

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
 1e8:	ed e9       	ldi	r30, 0x9D	; 157
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	86 60       	ori	r24, 0x06	; 6
 1f0:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >> 8); //load upper byte of the baud rate into UBRR
 1f2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L = BAUDVALUE_1;        //load lower byte of the baud rate into UBRR
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 1fc:	08 95       	ret

000001fe <uart_getc>:
//
char uart_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR0A & (1 << RXC0)))
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	9e e3       	ldi	r25, 0x3E	; 62
 202:	02 c0       	rjmp	.+4      	; 0x208 <uart_getc+0xa>
 204:	01 97       	sbiw	r24, 0x01	; 1
  {
    timer++;
    if (timer >= 16000)
 206:	21 f0       	breq	.+8      	; 0x210 <uart_getc+0x12>
//
char uart_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR0A & (1 << RXC0)))
 208:	5f 9b       	sbis	0x0b, 7	; 11
 20a:	fc cf       	rjmp	.-8      	; 0x204 <uart_getc+0x6>
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
    // return -1;

  }              // Wait for byte to arrive
  return (UDR0); //return the received data
 20c:	8c b1       	in	r24, 0x0c	; 12
 20e:	08 95       	ret
  while (!(UCSR0A & (1 << RXC0)))
  {
    timer++;
    if (timer >= 16000)
    {
      return (0);
 210:	80 e0       	ldi	r24, 0x00	; 0
    //return a -1 if no data comes back.
    // return -1;

  }              // Wait for byte to arrive
  return (UDR0); //return the received data
}
 212:	08 95       	ret

00000214 <uart1_getc>:
//
char uart1_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR1A & (1 << RXC1)))
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	9e e3       	ldi	r25, 0x3E	; 62
 218:	02 c0       	rjmp	.+4      	; 0x21e <uart1_getc+0xa>
 21a:	01 97       	sbiw	r24, 0x01	; 1
  {
    timer++;
    if (timer >= 16000)
 21c:	39 f0       	breq	.+14     	; 0x22c <uart1_getc+0x18>
//
char uart1_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR1A & (1 << RXC1)))
 21e:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 222:	27 ff       	sbrs	r18, 7
 224:	fa cf       	rjmp	.-12     	; 0x21a <uart1_getc+0x6>
    //what should we return if nothing comes in?
    //return the data into a global variable
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
  }              // Wait for byte to arrive
  return (UDR1); //return the received data
 226:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 22a:	08 95       	ret
  while (!(UCSR1A & (1 << RXC1)))
  {
    timer++;
    if (timer >= 16000)
    {
      return (0);
 22c:	80 e0       	ldi	r24, 0x00	; 0
    //return the data into a global variable
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
  }              // Wait for byte to arrive
  return (UDR1); //return the received data
}
 22e:	08 95       	ret

00000230 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	81 11       	cpse	r24, r1
 234:	01 c0       	rjmp	.+2      	; 0x238 <send_lcd+0x8>
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 23a:	77 9b       	sbis	0x0e, 7	; 14
 23c:	fe cf       	rjmp	.-4      	; 0x23a <send_lcd+0xa>
  SPDR = byte;                        //send payload
 23e:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 240:	77 9b       	sbis	0x0e, 7	; 14
 242:	fe cf       	rjmp	.-4      	; 0x240 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 244:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 24e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 252:	87 7f       	andi	r24, 0xF7	; 247
 254:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 258:	08 95       	ret

0000025a <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 25a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <i.2094>
 25e:	82 0f       	add	r24, r18
 260:	91 1d       	adc	r25, r1
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 26a:	77 9b       	sbis	0x0e, 7	; 14
 26c:	fe cf       	rjmp	.-4      	; 0x26a <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
 26e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 270:	77 9b       	sbis	0x0e, 7	; 14
 272:	fe cf       	rjmp	.-4      	; 0x270 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 274:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 278:	88 60       	ori	r24, 0x08	; 8
 27a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 27e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 282:	87 7f       	andi	r24, 0xF7	; 247
 284:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 288:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <i.2094>
 28c:	8f 5f       	subi	r24, 0xFF	; 255
 28e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 292:	80 31       	cpi	r24, 0x10	; 16
 294:	d9 f0       	breq	.+54     	; 0x2cc <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 296:	80 32       	cpi	r24, 0x20	; 32
 298:	09 f0       	breq	.+2      	; 0x29c <refresh_lcd+0x42>
 29a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	85 ed       	ldi	r24, 0xD5	; 213
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <refresh_lcd+0x44>
 2a2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2a4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2a6:	77 9b       	sbis	0x0e, 7	; 14
 2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
 2aa:	80 e8       	ldi	r24, 0x80	; 128
 2ac:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2ae:	77 9b       	sbis	0x0e, 7	; 14
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2b6:	88 60       	ori	r24, 0x08	; 8
 2b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2c0:	87 7f       	andi	r24, 0xF7	; 247
 2c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
 2c6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <i.2094>
 2ca:	08 95       	ret
 2cc:	f5 ed       	ldi	r31, 0xD5	; 213
 2ce:	fa 95       	dec	r31
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <refresh_lcd+0x74>
 2d2:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 2d4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2d6:	77 9b       	sbis	0x0e, 7	; 14
 2d8:	fe cf       	rjmp	.-4      	; 0x2d6 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
 2da:	80 ec       	ldi	r24, 0xC0	; 192
 2dc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 2de:	77 9b       	sbis	0x0e, 7	; 14
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 2e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2e6:	88 60       	ori	r24, 0x08	; 8
 2e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2ec:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2f0:	87 7f       	andi	r24, 0xF7	; 247
 2f2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 2f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <i.2094>
 2fa:	cd cf       	rjmp	.-102    	; 0x296 <refresh_lcd+0x3c>

000002fc <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
 2fc:	66 0f       	add	r22, r22
 2fe:	66 0f       	add	r22, r22
 300:	66 0f       	add	r22, r22
 302:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 304:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 306:	77 9b       	sbis	0x0e, 7	; 14
 308:	fe cf       	rjmp	.-4      	; 0x306 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
 30a:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 30c:	77 9b       	sbis	0x0e, 7	; 14
 30e:	fe cf       	rjmp	.-4      	; 0x30c <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 310:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 314:	28 60       	ori	r18, 0x08	; 8
 316:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 31a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 31e:	27 7f       	andi	r18, 0xF7	; 247
 320:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 324:	25 ed       	ldi	r18, 0xD5	; 213
 326:	2a 95       	dec	r18
 328:	f1 f7       	brne	.-4      	; 0x326 <set_custom_character+0x2a>
 32a:	00 00       	nop
 32c:	fc 01       	movw	r30, r24
 32e:	9c 01       	movw	r18, r24
 330:	28 5f       	subi	r18, 0xF8	; 248
 332:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 334:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
 336:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 338:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 33a:	77 9b       	sbis	0x0e, 7	; 14
 33c:	fe cf       	rjmp	.-4      	; 0x33a <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
 33e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 340:	77 9b       	sbis	0x0e, 7	; 14
 342:	fe cf       	rjmp	.-4      	; 0x340 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 344:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 348:	88 60       	ori	r24, 0x08	; 8
 34a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 34e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 352:	87 7f       	andi	r24, 0xF7	; 247
 354:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 358:	85 ed       	ldi	r24, 0xD5	; 213
 35a:	8a 95       	dec	r24
 35c:	f1 f7       	brne	.-4      	; 0x35a <set_custom_character+0x5e>
 35e:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
 360:	e2 17       	cp	r30, r18
 362:	f3 07       	cpc	r31, r19
 364:	41 f7       	brne	.-48     	; 0x336 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
 366:	08 95       	ret

00000368 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
 368:	90 e4       	ldi	r25, 0x40	; 64
 36a:	89 9f       	mul	r24, r25
 36c:	60 0d       	add	r22, r0
 36e:	11 24       	eor	r1, r1
 370:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 372:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 374:	77 9b       	sbis	0x0e, 7	; 14
 376:	fe cf       	rjmp	.-4      	; 0x374 <set_cursor+0xc>
  SPDR = byte;                        //send payload
 378:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 37a:	77 9b       	sbis	0x0e, 7	; 14
 37c:	fe cf       	rjmp	.-4      	; 0x37a <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 37e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 382:	88 60       	ori	r24, 0x08	; 8
 384:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 388:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 38c:	87 7f       	andi	r24, 0xF7	; 247
 38e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 392:	08 95       	ret

00000394 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
 394:	81 11       	cpse	r24, r1
 396:	13 c0       	rjmp	.+38     	; 0x3be <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 39c:	77 9b       	sbis	0x0e, 7	; 14
 39e:	fe cf       	rjmp	.-4      	; 0x39c <uint2lcd+0x8>
  SPDR = byte;                        //send payload
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3a4:	77 9b       	sbis	0x0e, 7	; 14
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 3a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3ac:	88 60       	ori	r24, 0x08	; 8
 3ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3b6:	87 7f       	andi	r24, 0xF7	; 247
 3b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 3bc:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 3be:	84 36       	cpi	r24, 0x64	; 100
 3c0:	b0 f4       	brcc	.+44     	; 0x3ee <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 3c2:	8a 30       	cpi	r24, 0x0A	; 10
 3c4:	60 f5       	brcc	.+88     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3ca:	77 9b       	sbis	0x0e, 7	; 14
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
 3ce:	9d ec       	ldi	r25, 0xCD	; 205
 3d0:	89 9f       	mul	r24, r25
 3d2:	91 2d       	mov	r25, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	96 95       	lsr	r25
 3d8:	96 95       	lsr	r25
 3da:	96 95       	lsr	r25
 3dc:	2a e0       	ldi	r18, 0x0A	; 10
 3de:	92 9f       	mul	r25, r18
 3e0:	80 19       	sub	r24, r0
 3e2:	11 24       	eor	r1, r1
 3e4:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 3e6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 3e8:	77 9b       	sbis	0x0e, 7	; 14
 3ea:	fe cf       	rjmp	.-4      	; 0x3e8 <uint2lcd+0x54>
 3ec:	dd cf       	rjmp	.-70     	; 0x3a8 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
 3ee:	99 e2       	ldi	r25, 0x29	; 41
 3f0:	89 9f       	mul	r24, r25
 3f2:	91 2d       	mov	r25, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	92 95       	swap	r25
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 400:	77 9b       	sbis	0x0e, 7	; 14
 402:	fe cf       	rjmp	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
  SPDR = byte;                        //send payload
 404:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 406:	77 9b       	sbis	0x0e, 7	; 14
 408:	fe cf       	rjmp	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 40a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 40e:	98 60       	ori	r25, 0x08	; 8
 410:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 414:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 418:	97 7f       	andi	r25, 0xF7	; 247
 41a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
 41e:	99 e2       	ldi	r25, 0x29	; 41
 420:	89 9f       	mul	r24, r25
 422:	91 2d       	mov	r25, r1
 424:	11 24       	eor	r1, r1
 426:	92 95       	swap	r25
 428:	9f 70       	andi	r25, 0x0F	; 15
 42a:	38 2f       	mov	r19, r24
 42c:	24 e6       	ldi	r18, 0x64	; 100
 42e:	92 9f       	mul	r25, r18
 430:	30 19       	sub	r19, r0
 432:	11 24       	eor	r1, r1
 434:	2d ec       	ldi	r18, 0xCD	; 205
 436:	32 9f       	mul	r19, r18
 438:	91 2d       	mov	r25, r1
 43a:	11 24       	eor	r1, r1
 43c:	96 95       	lsr	r25
 43e:	96 95       	lsr	r25
 440:	96 95       	lsr	r25
 442:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 444:	21 e0       	ldi	r18, 0x01	; 1
 446:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 448:	77 9b       	sbis	0x0e, 7	; 14
 44a:	fe cf       	rjmp	.-4      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
  SPDR = byte;                        //send payload
 44c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 44e:	77 9b       	sbis	0x0e, 7	; 14
 450:	fe cf       	rjmp	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 452:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 456:	98 60       	ori	r25, 0x08	; 8
 458:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 45c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 460:	97 7f       	andi	r25, 0xF7	; 247
 462:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 466:	af cf       	rjmp	.-162    	; 0x3c6 <uint2lcd+0x32>

00000468 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 468:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
 46a:	0c 94 ca 01 	jmp	0x394	; 0x394 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 472:	77 9b       	sbis	0x0e, 7	; 14
 474:	fe cf       	rjmp	.-4      	; 0x472 <int2lcd+0xa>
  SPDR = byte;                        //send payload
 476:	9d e2       	ldi	r25, 0x2D	; 45
 478:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 47a:	77 9b       	sbis	0x0e, 7	; 14
 47c:	fe cf       	rjmp	.-4      	; 0x47a <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 47e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 482:	98 60       	ori	r25, 0x08	; 8
 484:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 488:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 48c:	97 7f       	andi	r25, 0xF7	; 247
 48e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 492:	95 ed       	ldi	r25, 0xD5	; 213
 494:	9a 95       	dec	r25
 496:	f1 f7       	brne	.-4      	; 0x494 <int2lcd+0x2c>
 498:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
 49a:	81 95       	neg	r24
 49c:	0c 94 ca 01 	jmp	0x394	; 0x394 <uint2lcd>

000004a0 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4a0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4a2:	77 9b       	sbis	0x0e, 7	; 14
 4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <cursor_on+0x2>
  SPDR = byte;                        //send payload
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4aa:	77 9b       	sbis	0x0e, 7	; 14
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4ae:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4b2:	88 60       	ori	r24, 0x08	; 8
 4b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4bc:	87 7f       	andi	r24, 0xF7	; 247
 4be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4c2:	08 95       	ret

000004c4 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4c4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4c6:	77 9b       	sbis	0x0e, 7	; 14
 4c8:	fe cf       	rjmp	.-4      	; 0x4c6 <cursor_off+0x2>
  SPDR = byte;                        //send payload
 4ca:	8c e0       	ldi	r24, 0x0C	; 12
 4cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ce:	77 9b       	sbis	0x0e, 7	; 14
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e0:	87 7f       	andi	r24, 0xF7	; 247
 4e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4e6:	08 95       	ret

000004e8 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 4e8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4ea:	77 9b       	sbis	0x0e, 7	; 14
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <shift_right+0x2>
  SPDR = byte;                        //send payload
 4ee:	8e e1       	ldi	r24, 0x1E	; 30
 4f0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 4f2:	77 9b       	sbis	0x0e, 7	; 14
 4f4:	fe cf       	rjmp	.-4      	; 0x4f2 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 4f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 4fa:	88 60       	ori	r24, 0x08	; 8
 4fc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 500:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 504:	87 7f       	andi	r24, 0xF7	; 247
 506:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 50a:	08 95       	ret

0000050c <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 50c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 50e:	77 9b       	sbis	0x0e, 7	; 14
 510:	fe cf       	rjmp	.-4      	; 0x50e <shift_left+0x2>
  SPDR = byte;                        //send payload
 512:	88 e1       	ldi	r24, 0x18	; 24
 514:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 516:	77 9b       	sbis	0x0e, 7	; 14
 518:	fe cf       	rjmp	.-4      	; 0x516 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 51a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 51e:	88 60       	ori	r24, 0x08	; 8
 520:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 524:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 528:	87 7f       	andi	r24, 0xF7	; 247
 52a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 52e:	08 95       	ret

00000530 <strobe_lcd>:
 530:	e2 e6       	ldi	r30, 0x62	; 98
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	88 60       	ori	r24, 0x08	; 8
 538:	80 83       	st	Z, r24
 53a:	80 81       	ld	r24, Z
 53c:	87 7f       	andi	r24, 0xF7	; 247
 53e:	80 83       	st	Z, r24
 540:	08 95       	ret

00000542 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 542:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 544:	77 9b       	sbis	0x0e, 7	; 14
 546:	fe cf       	rjmp	.-4      	; 0x544 <clear_display+0x2>
  SPDR = byte;                        //send payload
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 54c:	77 9b       	sbis	0x0e, 7	; 14
 54e:	fe cf       	rjmp	.-4      	; 0x54c <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 550:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 554:	88 60       	ori	r24, 0x08	; 8
 556:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 55a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 55e:	87 7f       	andi	r24, 0xF7	; 247
 560:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 564:	8f e1       	ldi	r24, 0x1F	; 31
 566:	9c e1       	ldi	r25, 0x1C	; 28
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <clear_display+0x26>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <clear_display+0x2c>
 56e:	00 00       	nop
 570:	08 95       	ret

00000572 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 572:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 574:	77 9b       	sbis	0x0e, 7	; 14
 576:	fe cf       	rjmp	.-4      	; 0x574 <cursor_home+0x2>
  SPDR = byte;                        //send payload
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 57c:	77 9b       	sbis	0x0e, 7	; 14
 57e:	fe cf       	rjmp	.-4      	; 0x57c <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 580:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 584:	88 60       	ori	r24, 0x08	; 8
 586:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 58a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 58e:	87 7f       	andi	r24, 0xF7	; 247
 590:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 594:	8f e6       	ldi	r24, 0x6F	; 111
 596:	97 e1       	ldi	r25, 0x17	; 23
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <cursor_home+0x26>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <cursor_home+0x2c>
 59e:	00 00       	nop
 5a0:	08 95       	ret

000005a2 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5a2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5a4:	77 9b       	sbis	0x0e, 7	; 14
 5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <line2_col1+0x2>
  SPDR = byte;                        //send payload
 5a8:	80 ec       	ldi	r24, 0xC0	; 192
 5aa:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5ac:	77 9b       	sbis	0x0e, 7	; 14
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5b4:	88 60       	ori	r24, 0x08	; 8
 5b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5ba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5be:	87 7f       	andi	r24, 0xF7	; 247
 5c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5c4:	08 95       	ret

000005c6 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5c6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5c8:	77 9b       	sbis	0x0e, 7	; 14
 5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <line1_col1+0x2>
  SPDR = byte;                        //send payload
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5d0:	77 9b       	sbis	0x0e, 7	; 14
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5d4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e2:	87 7f       	andi	r24, 0xF7	; 247
 5e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 5e8:	08 95       	ret

000005ea <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
 5ea:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5ec:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
 5ee:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 5f0:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f2:	77 9b       	sbis	0x0e, 7	; 14
 5f4:	fe cf       	rjmp	.-4      	; 0x5f2 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
 5f6:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 5f8:	77 9b       	sbis	0x0e, 7	; 14
 5fa:	fe cf       	rjmp	.-4      	; 0x5f8 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 5fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 600:	88 60       	ori	r24, 0x08	; 8
 602:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 606:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 60a:	87 7f       	andi	r24, 0xF7	; 247
 60c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 610:	85 ed       	ldi	r24, 0xD5	; 213
 612:	8a 95       	dec	r24
 614:	f1 f7       	brne	.-4      	; 0x612 <fill_spaces+0x28>
 616:	00 00       	nop
 618:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
 61a:	51 f7       	brne	.-44     	; 0x5f0 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
 61c:	08 95       	ret

0000061e <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 622:	77 9b       	sbis	0x0e, 7	; 14
 624:	fe cf       	rjmp	.-4      	; 0x622 <char2lcd+0x4>
  SPDR = byte;                        //send payload
 626:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 628:	77 9b       	sbis	0x0e, 7	; 14
 62a:	fe cf       	rjmp	.-4      	; 0x628 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 62c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 630:	88 60       	ori	r24, 0x08	; 8
 632:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 636:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 63a:	87 7f       	andi	r24, 0xF7	; 247
 63c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 640:	08 95       	ret

00000642 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
 642:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 64a:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 64c:	df 01       	movw	r26, r30
 64e:	a4 0f       	add	r26, r20
 650:	b5 1f       	adc	r27, r21
 652:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 654:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 656:	77 9b       	sbis	0x0e, 7	; 14
 658:	fe cf       	rjmp	.-4      	; 0x656 <string2lcd+0x14>
  SPDR = byte;                        //send payload
 65a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 65c:	77 9b       	sbis	0x0e, 7	; 14
 65e:	fe cf       	rjmp	.-4      	; 0x65c <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 660:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 664:	98 60       	ori	r25, 0x08	; 8
 666:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 66a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 66e:	97 7f       	andi	r25, 0xF7	; 247
 670:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 674:	85 ed       	ldi	r24, 0xD5	; 213
 676:	8a 95       	dec	r24
 678:	f1 f7       	brne	.-4      	; 0x676 <string2lcd+0x34>
 67a:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
 67c:	6f 5f       	subi	r22, 0xFF	; 255
 67e:	46 2f       	mov	r20, r22
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	df 01       	movw	r26, r30
 684:	0d 90       	ld	r0, X+
 686:	00 20       	and	r0, r0
 688:	e9 f7       	brne	.-6      	; 0x684 <string2lcd+0x42>
 68a:	9d 01       	movw	r18, r26
 68c:	2e 1b       	sub	r18, r30
 68e:	3f 0b       	sbc	r19, r31
 690:	22 50       	subi	r18, 0x02	; 2
 692:	31 09       	sbc	r19, r1
 694:	24 17       	cp	r18, r20
 696:	35 07       	cpc	r19, r21
 698:	c8 f6       	brcc	.-78     	; 0x64c <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
 69a:	08 95       	ret

0000069c <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	99 ef       	ldi	r25, 0xF9	; 249
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <lcd_init+0x4>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <lcd_init+0xa>
 6a6:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
 6a8:	88 e0       	ldi	r24, 0x08	; 8
 6aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6ae:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6b0:	77 9b       	sbis	0x0e, 7	; 14
 6b2:	fe cf       	rjmp	.-4      	; 0x6b0 <lcd_init+0x14>
  SPDR = byte;                        //send payload
 6b4:	80 e3       	ldi	r24, 0x30	; 48
 6b6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6b8:	77 9b       	sbis	0x0e, 7	; 14
 6ba:	fe cf       	rjmp	.-4      	; 0x6b8 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6c6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ca:	87 7f       	andi	r24, 0xF7	; 247
 6cc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6d0:	8f e5       	ldi	r24, 0x5F	; 95
 6d2:	9d e6       	ldi	r25, 0x6D	; 109
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <lcd_init+0x38>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <lcd_init+0x3e>
 6da:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 6dc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6de:	77 9b       	sbis	0x0e, 7	; 14
 6e0:	fe cf       	rjmp	.-4      	; 0x6de <lcd_init+0x42>
  SPDR = byte;                        //send payload
 6e2:	80 e3       	ldi	r24, 0x30	; 48
 6e4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 6e6:	77 9b       	sbis	0x0e, 7	; 14
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 6ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6ee:	88 60       	ori	r24, 0x08	; 8
 6f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6f8:	87 7f       	andi	r24, 0xF7	; 247
 6fa:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 6fe:	8f e5       	ldi	r24, 0x5F	; 95
 700:	9d e6       	ldi	r25, 0x6D	; 109
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <lcd_init+0x66>
 706:	00 c0       	rjmp	.+0      	; 0x708 <lcd_init+0x6c>
 708:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 70a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 70c:	77 9b       	sbis	0x0e, 7	; 14
 70e:	fe cf       	rjmp	.-4      	; 0x70c <lcd_init+0x70>
  SPDR = byte;                        //send payload
 710:	80 e3       	ldi	r24, 0x30	; 48
 712:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 714:	77 9b       	sbis	0x0e, 7	; 14
 716:	fe cf       	rjmp	.-4      	; 0x714 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 718:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 71c:	88 60       	ori	r24, 0x08	; 8
 71e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 722:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 726:	87 7f       	andi	r24, 0xF7	; 247
 728:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 72c:	8f e5       	ldi	r24, 0x5F	; 95
 72e:	9d e6       	ldi	r25, 0x6D	; 109
 730:	01 97       	sbiw	r24, 0x01	; 1
 732:	f1 f7       	brne	.-4      	; 0x730 <lcd_init+0x94>
 734:	00 c0       	rjmp	.+0      	; 0x736 <lcd_init+0x9a>
 736:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 738:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 73a:	77 9b       	sbis	0x0e, 7	; 14
 73c:	fe cf       	rjmp	.-4      	; 0x73a <lcd_init+0x9e>
  SPDR = byte;                        //send payload
 73e:	88 e3       	ldi	r24, 0x38	; 56
 740:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 742:	77 9b       	sbis	0x0e, 7	; 14
 744:	fe cf       	rjmp	.-4      	; 0x742 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 746:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 74a:	88 60       	ori	r24, 0x08	; 8
 74c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 750:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 754:	87 7f       	andi	r24, 0xF7	; 247
 756:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 75a:	8f e1       	ldi	r24, 0x1F	; 31
 75c:	9e e4       	ldi	r25, 0x4E	; 78
 75e:	01 97       	sbiw	r24, 0x01	; 1
 760:	f1 f7       	brne	.-4      	; 0x75e <lcd_init+0xc2>
 762:	00 c0       	rjmp	.+0      	; 0x764 <lcd_init+0xc8>
 764:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 766:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 768:	77 9b       	sbis	0x0e, 7	; 14
 76a:	fe cf       	rjmp	.-4      	; 0x768 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
 76c:	88 e0       	ldi	r24, 0x08	; 8
 76e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 770:	77 9b       	sbis	0x0e, 7	; 14
 772:	fe cf       	rjmp	.-4      	; 0x770 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 774:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 778:	88 60       	ori	r24, 0x08	; 8
 77a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 77e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 782:	87 7f       	andi	r24, 0xF7	; 247
 784:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 788:	8f e1       	ldi	r24, 0x1F	; 31
 78a:	9e e4       	ldi	r25, 0x4E	; 78
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	f1 f7       	brne	.-4      	; 0x78c <lcd_init+0xf0>
 790:	00 c0       	rjmp	.+0      	; 0x792 <lcd_init+0xf6>
 792:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 794:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 796:	77 9b       	sbis	0x0e, 7	; 14
 798:	fe cf       	rjmp	.-4      	; 0x796 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 79e:	77 9b       	sbis	0x0e, 7	; 14
 7a0:	fe cf       	rjmp	.-4      	; 0x79e <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7a2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7a6:	88 60       	ori	r24, 0x08	; 8
 7a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7b0:	87 7f       	andi	r24, 0xF7	; 247
 7b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7b6:	8f e1       	ldi	r24, 0x1F	; 31
 7b8:	9e e4       	ldi	r25, 0x4E	; 78
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <lcd_init+0x11e>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <lcd_init+0x124>
 7c0:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7c2:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7c4:	77 9b       	sbis	0x0e, 7	; 14
 7c6:	fe cf       	rjmp	.-4      	; 0x7c4 <lcd_init+0x128>
  SPDR = byte;                        //send payload
 7c8:	86 e0       	ldi	r24, 0x06	; 6
 7ca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7cc:	77 9b       	sbis	0x0e, 7	; 14
 7ce:	fe cf       	rjmp	.-4      	; 0x7cc <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7d4:	88 60       	ori	r24, 0x08	; 8
 7d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7de:	87 7f       	andi	r24, 0xF7	; 247
 7e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 7e4:	8f e1       	ldi	r24, 0x1F	; 31
 7e6:	9e e4       	ldi	r25, 0x4E	; 78
 7e8:	01 97       	sbiw	r24, 0x01	; 1
 7ea:	f1 f7       	brne	.-4      	; 0x7e8 <lcd_init+0x14c>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <lcd_init+0x152>
 7ee:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 7f0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7f2:	77 9b       	sbis	0x0e, 7	; 14
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <lcd_init+0x156>
  SPDR = byte;                        //send payload
 7f6:	8c e0       	ldi	r24, 0x0C	; 12
 7f8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 7fa:	77 9b       	sbis	0x0e, 7	; 14
 7fc:	fe cf       	rjmp	.-4      	; 0x7fa <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 7fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 802:	88 60       	ori	r24, 0x08	; 8
 804:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 808:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 80c:	87 7f       	andi	r24, 0xF7	; 247
 80e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 812:	8f e1       	ldi	r24, 0x1F	; 31
 814:	9e e4       	ldi	r25, 0x4E	; 78
 816:	01 97       	sbiw	r24, 0x01	; 1
 818:	f1 f7       	brne	.-4      	; 0x816 <lcd_init+0x17a>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <lcd_init+0x180>
 81c:	00 00       	nop
 81e:	08 95       	ret

00000820 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
 820:	4f 92       	push	r4
 822:	5f 92       	push	r5
 824:	6f 92       	push	r6
 826:	7f 92       	push	r7
 828:	8f 92       	push	r8
 82a:	9f 92       	push	r9
 82c:	af 92       	push	r10
 82e:	bf 92       	push	r11
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	ff 92       	push	r15
 838:	0f 93       	push	r16
 83a:	1f 93       	push	r17
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
 844:	69 97       	sbiw	r28, 0x19	; 25
 846:	0f b6       	in	r0, 0x3f	; 63
 848:	f8 94       	cli
 84a:	de bf       	out	0x3e, r29	; 62
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	cd bf       	out	0x3d, r28	; 61
 850:	14 2f       	mov	r17, r20
 852:	42 2e       	mov	r4, r18
 854:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
 856:	00 23       	and	r16, r16
 858:	79 f0       	breq	.+30     	; 0x878 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
 85a:	6b 01       	movw	r12, r22
 85c:	7c 01       	movw	r14, r24
 85e:	cc 24       	eor	r12, r12
 860:	f7 fc       	sbrc	r15, 7
 862:	c3 94       	inc	r12
 864:	dd 24       	eor	r13, r13
 866:	ee 24       	eor	r14, r14
 868:	ff 24       	eor	r15, r15
 86a:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
 86c:	6b 01       	movw	r12, r22
 86e:	7c 01       	movw	r14, r24
 870:	97 fd       	sbrc	r25, 7
 872:	a3 c0       	rjmp	.+326    	; 0x9ba <lcd_int32+0x19a>
 874:	c7 01       	movw	r24, r14
 876:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
 878:	44 20       	and	r4, r4
 87a:	09 f4       	brne	.+2      	; 0x87e <lcd_int32+0x5e>
 87c:	96 c0       	rjmp	.+300    	; 0x9aa <lcd_int32+0x18a>
 87e:	9e 01       	movw	r18, r28
 880:	2f 5f       	subi	r18, 0xFF	; 255
 882:	3f 4f       	sbci	r19, 0xFF	; 255
 884:	59 01       	movw	r10, r18
 886:	49 01       	movw	r8, r18
 888:	66 24       	eor	r6, r6
 88a:	6a 94       	dec	r6
 88c:	64 0c       	add	r6, r4
 88e:	71 2c       	mov	r7, r1
 890:	3f ef       	ldi	r19, 0xFF	; 255
 892:	63 1a       	sub	r6, r19
 894:	73 0a       	sbc	r7, r19
 896:	6a 0c       	add	r6, r10
 898:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
 89a:	2a e0       	ldi	r18, 0x0A	; 10
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	40 e0       	ldi	r20, 0x00	; 0
 8a0:	50 e0       	ldi	r21, 0x00	; 0
 8a2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__divmodsi4>
 8a6:	e6 2f       	mov	r30, r22
 8a8:	2a 8b       	std	Y+18, r18	; 0x12
 8aa:	3b 8b       	std	Y+19, r19	; 0x13
 8ac:	4c 8b       	std	Y+20, r20	; 0x14
 8ae:	5d 8b       	std	Y+21, r21	; 0x15
 8b0:	6a 89       	ldd	r22, Y+18	; 0x12
 8b2:	7b 89       	ldd	r23, Y+19	; 0x13
 8b4:	8c 89       	ldd	r24, Y+20	; 0x14
 8b6:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 8b8:	20 e3       	ldi	r18, 0x30	; 48
 8ba:	2e 0f       	add	r18, r30
 8bc:	f4 01       	movw	r30, r8
 8be:	21 93       	st	Z+, r18
 8c0:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
 8c2:	6e 16       	cp	r6, r30
 8c4:	7f 06       	cpc	r7, r31
 8c6:	49 f7       	brne	.-46     	; 0x89a <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
 8c8:	99 24       	eor	r9, r9
 8ca:	93 94       	inc	r9
 8cc:	94 0c       	add	r9, r4
 8ce:	f5 01       	movw	r30, r10
 8d0:	e4 0d       	add	r30, r4
 8d2:	f1 1d       	adc	r31, r1
 8d4:	2e e2       	ldi	r18, 0x2E	; 46
 8d6:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
 8d8:	2a e0       	ldi	r18, 0x0A	; 10
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	40 e0       	ldi	r20, 0x00	; 0
 8de:	50 e0       	ldi	r21, 0x00	; 0
 8e0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__divmodsi4>
 8e4:	e6 2f       	mov	r30, r22
 8e6:	2a 8b       	std	Y+18, r18	; 0x12
 8e8:	3b 8b       	std	Y+19, r19	; 0x13
 8ea:	4c 8b       	std	Y+20, r20	; 0x14
 8ec:	5d 8b       	std	Y+21, r21	; 0x15
 8ee:	6e 8b       	std	Y+22, r22	; 0x16
 8f0:	7f 8b       	std	Y+23, r23	; 0x17
 8f2:	88 8f       	std	Y+24, r24	; 0x18
 8f4:	99 8f       	std	Y+25, r25	; 0x19
 8f6:	6a 89       	ldd	r22, Y+18	; 0x12
 8f8:	7b 89       	ldd	r23, Y+19	; 0x13
 8fa:	8c 89       	ldd	r24, Y+20	; 0x14
 8fc:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
 8fe:	31 e0       	ldi	r19, 0x01	; 1
 900:	39 0d       	add	r19, r9
 902:	d5 01       	movw	r26, r10
 904:	a9 0d       	add	r26, r9
 906:	b1 1d       	adc	r27, r1
 908:	e0 5d       	subi	r30, 0xD0	; 208
 90a:	ec 93       	st	X, r30
 90c:	93 2e       	mov	r9, r19
        }while(qr.quot);
 90e:	61 15       	cp	r22, r1
 910:	71 05       	cpc	r23, r1
 912:	81 05       	cpc	r24, r1
 914:	91 05       	cpc	r25, r1
 916:	01 f7       	brne	.-64     	; 0x8d8 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
 918:	11 23       	and	r17, r17
 91a:	61 f0       	breq	.+24     	; 0x934 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
 91c:	51 10       	cpse	r5, r1
 91e:	4b c0       	rjmp	.+150    	; 0x9b6 <lcd_int32+0x196>
 920:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
 922:	31 17       	cp	r19, r17
 924:	38 f4       	brcc	.+14     	; 0x934 <lcd_int32+0x114>
 926:	f5 01       	movw	r30, r10
 928:	e3 0f       	add	r30, r19
 92a:	f1 1d       	adc	r31, r1
 92c:	90 83       	st	Z, r25
 92e:	3f 5f       	subi	r19, 0xFF	; 255
 930:	13 13       	cpse	r17, r19
 932:	f9 cf       	rjmp	.-14     	; 0x926 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
 934:	00 23       	and	r16, r16
 936:	31 f0       	breq	.+12     	; 0x944 <lcd_int32+0x124>
 938:	f5 01       	movw	r30, r10
 93a:	e3 0f       	add	r30, r19
 93c:	f1 1d       	adc	r31, r1
 93e:	9d e2       	ldi	r25, 0x2D	; 45
 940:	90 83       	st	Z, r25
 942:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 944:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 946:	31 50       	subi	r19, 0x01	; 1
 948:	f5 01       	movw	r30, r10
 94a:	e3 0f       	add	r30, r19
 94c:	f1 1d       	adc	r31, r1
 94e:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 950:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 952:	77 9b       	sbis	0x0e, 7	; 14
 954:	fe cf       	rjmp	.-4      	; 0x952 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
 956:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 958:	77 9b       	sbis	0x0e, 7	; 14
 95a:	fe cf       	rjmp	.-4      	; 0x958 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 95c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 960:	98 60       	ori	r25, 0x08	; 8
 962:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 966:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 96a:	97 7f       	andi	r25, 0xF7	; 247
 96c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 970:	85 ed       	ldi	r24, 0xD5	; 213
 972:	8a 95       	dec	r24
 974:	f1 f7       	brne	.-4      	; 0x972 <lcd_int32+0x152>
 976:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 978:	31 11       	cpse	r19, r1
 97a:	e5 cf       	rjmp	.-54     	; 0x946 <lcd_int32+0x126>

}
 97c:	69 96       	adiw	r28, 0x19	; 25
 97e:	0f b6       	in	r0, 0x3f	; 63
 980:	f8 94       	cli
 982:	de bf       	out	0x3e, r29	; 62
 984:	0f be       	out	0x3f, r0	; 63
 986:	cd bf       	out	0x3d, r28	; 61
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	ff 90       	pop	r15
 992:	ef 90       	pop	r14
 994:	df 90       	pop	r13
 996:	cf 90       	pop	r12
 998:	bf 90       	pop	r11
 99a:	af 90       	pop	r10
 99c:	9f 90       	pop	r9
 99e:	8f 90       	pop	r8
 9a0:	7f 90       	pop	r7
 9a2:	6f 90       	pop	r6
 9a4:	5f 90       	pop	r5
 9a6:	4f 90       	pop	r4
 9a8:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
 9aa:	91 2c       	mov	r9, r1
 9ac:	9e 01       	movw	r18, r28
 9ae:	2f 5f       	subi	r18, 0xFF	; 255
 9b0:	3f 4f       	sbci	r19, 0xFF	; 255
 9b2:	59 01       	movw	r10, r18
 9b4:	91 cf       	rjmp	.-222    	; 0x8d8 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
 9b6:	90 e3       	ldi	r25, 0x30	; 48
 9b8:	b4 cf       	rjmp	.-152    	; 0x922 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
 9ba:	f0 94       	com	r15
 9bc:	e0 94       	com	r14
 9be:	d0 94       	com	r13
 9c0:	c0 94       	com	r12
 9c2:	c1 1c       	adc	r12, r1
 9c4:	d1 1c       	adc	r13, r1
 9c6:	e1 1c       	adc	r14, r1
 9c8:	f1 1c       	adc	r15, r1
 9ca:	54 cf       	rjmp	.-344    	; 0x874 <lcd_int32+0x54>

000009cc <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
 9cc:	5f 92       	push	r5
 9ce:	6f 92       	push	r6
 9d0:	7f 92       	push	r7
 9d2:	8f 92       	push	r8
 9d4:	9f 92       	push	r9
 9d6:	af 92       	push	r10
 9d8:	bf 92       	push	r11
 9da:	cf 92       	push	r12
 9dc:	df 92       	push	r13
 9de:	ef 92       	push	r14
 9e0:	ff 92       	push	r15
 9e2:	0f 93       	push	r16
 9e4:	1f 93       	push	r17
 9e6:	cf 93       	push	r28
 9e8:	df 93       	push	r29
 9ea:	cd b7       	in	r28, 0x3d	; 61
 9ec:	de b7       	in	r29, 0x3e	; 62
 9ee:	61 97       	sbiw	r28, 0x11	; 17
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	f8 94       	cli
 9f4:	de bf       	out	0x3e, r29	; 62
 9f6:	0f be       	out	0x3f, r0	; 63
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	5c 01       	movw	r10, r24
 9fc:	96 2e       	mov	r9, r22
 9fe:	54 2e       	mov	r5, r20
 a00:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
 a02:	8b 2c       	mov	r8, r11
 a04:	88 1c       	adc	r8, r8
 a06:	88 24       	eor	r8, r8
 a08:	88 1c       	adc	r8, r8
 a0a:	78 2c       	mov	r7, r8
 a0c:	9c 01       	movw	r18, r24
 a0e:	97 fd       	sbrc	r25, 7
 a10:	9d c0       	rjmp	.+314    	; 0xb4c <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
 a12:	55 20       	and	r5, r5
 a14:	09 f4       	brne	.+2      	; 0xa18 <lcd_int16+0x4c>
 a16:	8e c0       	rjmp	.+284    	; 0xb34 <lcd_int16+0x168>
 a18:	8e 01       	movw	r16, r28
 a1a:	0f 5f       	subi	r16, 0xFF	; 255
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
 a1e:	78 01       	movw	r14, r16
 a20:	cc 24       	eor	r12, r12
 a22:	ca 94       	dec	r12
 a24:	c5 0c       	add	r12, r5
 a26:	d1 2c       	mov	r13, r1
 a28:	8f ef       	ldi	r24, 0xFF	; 255
 a2a:	c8 1a       	sub	r12, r24
 a2c:	d8 0a       	sbc	r13, r24
 a2e:	c0 0e       	add	r12, r16
 a30:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
 a32:	6a e0       	ldi	r22, 0x0A	; 10
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	c9 01       	movw	r24, r18
 a38:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divmodhi4>
 a3c:	46 2f       	mov	r20, r22
 a3e:	24 2f       	mov	r18, r20
 a40:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
 a42:	80 5d       	subi	r24, 0xD0	; 208
 a44:	f7 01       	movw	r30, r14
 a46:	81 93       	st	Z+, r24
 a48:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
 a4a:	ec 15       	cp	r30, r12
 a4c:	fd 05       	cpc	r31, r13
 a4e:	89 f7       	brne	.-30     	; 0xa32 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
 a50:	ff 24       	eor	r15, r15
 a52:	f3 94       	inc	r15
 a54:	f5 0c       	add	r15, r5
 a56:	f8 01       	movw	r30, r16
 a58:	e5 0d       	add	r30, r5
 a5a:	f1 1d       	adc	r31, r1
 a5c:	8e e2       	ldi	r24, 0x2E	; 46
 a5e:	80 83       	st	Z, r24
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
 a62:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
 a64:	6a e0       	ldi	r22, 0x0A	; 10
 a66:	70 e0       	ldi	r23, 0x00	; 0
 a68:	c9 01       	movw	r24, r18
 a6a:	0e 94 1b 06 	call	0xc36	; 0xc36 <__divmodhi4>
 a6e:	46 2f       	mov	r20, r22
 a70:	24 2f       	mov	r18, r20
 a72:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
 a74:	91 e0       	ldi	r25, 0x01	; 1
 a76:	9f 0d       	add	r25, r15
 a78:	f8 01       	movw	r30, r16
 a7a:	ef 0d       	add	r30, r15
 a7c:	f1 1d       	adc	r31, r1
 a7e:	80 5d       	subi	r24, 0xD0	; 208
 a80:	80 83       	st	Z, r24
        }
        while(qr.quot);
 a82:	21 15       	cp	r18, r1
 a84:	31 05       	cpc	r19, r1
 a86:	69 f7       	brne	.-38     	; 0xa62 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
 a88:	61 10       	cpse	r6, r1
 a8a:	59 c0       	rjmp	.+178    	; 0xb3e <lcd_int16+0x172>
 a8c:	b7 fc       	sbrc	r11, 7
 a8e:	63 c0       	rjmp	.+198    	; 0xb56 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 a90:	99 20       	and	r9, r9
 a92:	b1 f0       	breq	.+44     	; 0xac0 <lcd_int16+0xf4>
 a94:	68 2d       	mov	r22, r8
 a96:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 a98:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 a9a:	29 2f       	mov	r18, r25
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	49 2d       	mov	r20, r9
 aa0:	50 e0       	ldi	r21, 0x00	; 0
 aa2:	46 1b       	sub	r20, r22
 aa4:	57 0b       	sbc	r21, r23
 aa6:	24 17       	cp	r18, r20
 aa8:	35 07       	cpc	r19, r21
 aaa:	54 f4       	brge	.+20     	; 0xac0 <lcd_int16+0xf4>
 aac:	9f 5f       	subi	r25, 0xFF	; 255
 aae:	f8 01       	movw	r30, r16
 ab0:	e2 0f       	add	r30, r18
 ab2:	f3 1f       	adc	r31, r19
 ab4:	80 83       	st	Z, r24
 ab6:	29 2f       	mov	r18, r25
 ab8:	30 e0       	ldi	r19, 0x00	; 0
 aba:	24 17       	cp	r18, r20
 abc:	35 07       	cpc	r19, r21
 abe:	b4 f3       	brlt	.-20     	; 0xaac <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
 ac0:	77 20       	and	r7, r7
 ac2:	31 f0       	breq	.+12     	; 0xad0 <lcd_int16+0x104>
 ac4:	f8 01       	movw	r30, r16
 ac6:	e9 0f       	add	r30, r25
 ac8:	f1 1d       	adc	r31, r1
 aca:	8d e2       	ldi	r24, 0x2D	; 45
 acc:	80 83       	st	Z, r24
 ace:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 ad0:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 ad2:	91 50       	subi	r25, 0x01	; 1
 ad4:	f8 01       	movw	r30, r16
 ad6:	e9 0f       	add	r30, r25
 ad8:	f1 1d       	adc	r31, r1
 ada:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
 adc:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 ade:	77 9b       	sbis	0x0e, 7	; 14
 ae0:	fe cf       	rjmp	.-4      	; 0xade <lcd_int16+0x112>
  SPDR = byte;                        //send payload
 ae2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
 ae4:	77 9b       	sbis	0x0e, 7	; 14
 ae6:	fe cf       	rjmp	.-4      	; 0xae4 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
 ae8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 aec:	88 60       	ori	r24, 0x08	; 8
 aee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 af2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 af6:	87 7f       	andi	r24, 0xF7	; 247
 af8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 afc:	f5 ed       	ldi	r31, 0xD5	; 213
 afe:	fa 95       	dec	r31
 b00:	f1 f7       	brne	.-4      	; 0xafe <lcd_int16+0x132>
 b02:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
 b04:	91 11       	cpse	r25, r1
 b06:	e5 cf       	rjmp	.-54     	; 0xad2 <lcd_int16+0x106>
}
 b08:	61 96       	adiw	r28, 0x11	; 17
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	f8 94       	cli
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	cd bf       	out	0x3d, r28	; 61
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	0f 91       	pop	r16
 b1c:	ff 90       	pop	r15
 b1e:	ef 90       	pop	r14
 b20:	df 90       	pop	r13
 b22:	cf 90       	pop	r12
 b24:	bf 90       	pop	r11
 b26:	af 90       	pop	r10
 b28:	9f 90       	pop	r9
 b2a:	8f 90       	pop	r8
 b2c:	7f 90       	pop	r7
 b2e:	6f 90       	pop	r6
 b30:	5f 90       	pop	r5
 b32:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
 b34:	f1 2c       	mov	r15, r1
 b36:	8e 01       	movw	r16, r28
 b38:	0f 5f       	subi	r16, 0xFF	; 255
 b3a:	1f 4f       	sbci	r17, 0xFF	; 255
 b3c:	93 cf       	rjmp	.-218    	; 0xa64 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 b3e:	99 20       	and	r9, r9
 b40:	09 f4       	brne	.+2      	; 0xb44 <lcd_int16+0x178>
 b42:	be cf       	rjmp	.-132    	; 0xac0 <lcd_int16+0xf4>
 b44:	68 2d       	mov	r22, r8
 b46:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 b48:	80 e3       	ldi	r24, 0x30	; 48
 b4a:	a7 cf       	rjmp	.-178    	; 0xa9a <lcd_int16+0xce>
 b4c:	22 27       	eor	r18, r18
 b4e:	33 27       	eor	r19, r19
 b50:	28 1b       	sub	r18, r24
 b52:	39 0b       	sbc	r19, r25
 b54:	5e cf       	rjmp	.-324    	; 0xa12 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 b56:	f3 94       	inc	r15
 b58:	f3 94       	inc	r15
 b5a:	f8 01       	movw	r30, r16
 b5c:	e9 0f       	add	r30, r25
 b5e:	f1 1d       	adc	r31, r1
 b60:	8d e2       	ldi	r24, 0x2D	; 45
 b62:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
 b64:	99 20       	and	r9, r9
 b66:	59 f0       	breq	.+22     	; 0xb7e <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
 b68:	2f 2d       	mov	r18, r15
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	49 2d       	mov	r20, r9
 b6e:	50 e0       	ldi	r21, 0x00	; 0
 b70:	24 17       	cp	r18, r20
 b72:	35 07       	cpc	r19, r21
 b74:	24 f4       	brge	.+8      	; 0xb7e <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 b76:	9f 2d       	mov	r25, r15
                bSigned = 0;
 b78:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
 b7a:	80 e2       	ldi	r24, 0x20	; 32
 b7c:	97 cf       	rjmp	.-210    	; 0xaac <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
 b7e:	9f 2d       	mov	r25, r15
 b80:	a7 cf       	rjmp	.-178    	; 0xad0 <lcd_int16+0x104>

00000b82 <main>:
  SPSR |= (1 << SPI2X);             //run at double speed
} //spi_init

int main()
{
  DDRF |= 0x08; //lcd strobe bit
 b82:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 b86:	88 60       	ori	r24, 0x08	; 8
 b88:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  uart_init();
 b8c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_init>
uint8_t send_seq = 0;   //transmit sequence number
char lcd_string[3];     //holds value of sequence number

void spi_init(void)
{
  DDRB = DDRB | 0x07;               //Turn on SS, MOSI, SCLK pins
 b90:	87 b3       	in	r24, 0x17	; 23
 b92:	87 60       	ori	r24, 0x07	; 7
 b94:	87 bb       	out	0x17, r24	; 23
  SPCR |= (1 << SPE) | (1 << MSTR); //set up SPI mode
 b96:	8d b1       	in	r24, 0x0d	; 13
 b98:	80 65       	ori	r24, 0x50	; 80
 b9a:	8d b9       	out	0x0d, r24	; 13
  SPSR |= (1 << SPI2X);             //run at double speed
 b9c:	70 9a       	sbi	0x0e, 0	; 14
int main()
{
  DDRF |= 0x08; //lcd strobe bit
  uart_init();
  spi_init();
  lcd_init();
 b9e:	0e 94 4e 03 	call	0x69c	; 0x69c <lcd_init>
  clear_display();
 ba2:	0e 94 a1 02 	call	0x542	; 0x542 <clear_display>
  cursor_home();
 ba6:	0e 94 b9 02 	call	0x572	; 0x572 <cursor_home>

  sei();
 baa:	78 94       	sei
    for (i = 0; i <= 9; i++)
    {
      _delay_ms(100);
    }
    send_seq++;
    send_seq = (send_seq % 20);
 bac:	cd ec       	ldi	r28, 0xCD	; 205

  sei();
  while (1)
  {
    //**************  start rcv portion ***************
    if (rcv_rdy == 1)
 bae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rcv_rdy>
 bb2:	81 30       	cpi	r24, 0x01	; 1
 bb4:	b9 f1       	breq	.+110    	; 0xc24 <main+0xa2>
      cursor_home();
    } //if
      //**************  end rcv portion ***************

    //**************  start tx portion ***************
    uart_puts("Hi! Triet: ");
 bb6:	80 e0       	ldi	r24, 0x00	; 0
 bb8:	91 e0       	ldi	r25, 0x01	; 1
 bba:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 bbe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 bc2:	4a e0       	ldi	r20, 0x0A	; 10
 bc4:	61 e1       	ldi	r22, 0x11	; 17
 bc6:	71 e0       	ldi	r23, 0x01	; 1
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 84 06 	call	0xd08	; 0xd08 <__itoa_ncheck>
    itoa(send_seq, lcd_string, 10);
    uart_puts(lcd_string);
 bce:	81 e1       	ldi	r24, 0x11	; 17
 bd0:	91 e0       	ldi	r25, 0x01	; 1
 bd2:	0e 94 ae 00 	call	0x15c	; 0x15c <uart_puts>
    uart_putc('\0');
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	0e 94 9d 00 	call	0x13a	; 0x13a <uart_putc>
    for (i = 0; i <= 9; i++)
 bdc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 be0:	2f ef       	ldi	r18, 0xFF	; 255
 be2:	81 ee       	ldi	r24, 0xE1	; 225
 be4:	94 e0       	ldi	r25, 0x04	; 4
 be6:	21 50       	subi	r18, 0x01	; 1
 be8:	80 40       	sbci	r24, 0x00	; 0
 bea:	90 40       	sbci	r25, 0x00	; 0
 bec:	e1 f7       	brne	.-8      	; 0xbe6 <main+0x64>
 bee:	00 c0       	rjmp	.+0      	; 0xbf0 <main+0x6e>
 bf0:	00 00       	nop
 bf2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i>
 bf6:	8f 5f       	subi	r24, 0xFF	; 255
 bf8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i>
 bfc:	8a 30       	cpi	r24, 0x0A	; 10
 bfe:	80 f3       	brcs	.-32     	; 0xbe0 <main+0x5e>
    {
      _delay_ms(100);
    }
    send_seq++;
    send_seq = (send_seq % 20);
 c00:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 c04:	8f 5f       	subi	r24, 0xFF	; 255
 c06:	8c 9f       	mul	r24, r28
 c08:	91 2d       	mov	r25, r1
 c0a:	11 24       	eor	r1, r1
 c0c:	92 95       	swap	r25
 c0e:	9f 70       	andi	r25, 0x0F	; 15
 c10:	24 e1       	ldi	r18, 0x14	; 20
 c12:	92 9f       	mul	r25, r18
 c14:	80 19       	sub	r24, r0
 c16:	11 24       	eor	r1, r1
 c18:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>

  sei();
  while (1)
  {
    //**************  start rcv portion ***************
    if (rcv_rdy == 1)
 c1c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rcv_rdy>
 c20:	81 30       	cpi	r24, 0x01	; 1
 c22:	49 f6       	brne	.-110    	; 0xbb6 <main+0x34>
    {
      string2lcd(lcd_str_array); //write out string if its ready
 c24:	84 e1       	ldi	r24, 0x14	; 20
 c26:	91 e0       	ldi	r25, 0x01	; 1
 c28:	0e 94 21 03 	call	0x642	; 0x642 <string2lcd>
      rcv_rdy = 0;
 c2c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <rcv_rdy>
      cursor_home();
 c30:	0e 94 b9 02 	call	0x572	; 0x572 <cursor_home>
 c34:	c0 cf       	rjmp	.-128    	; 0xbb6 <main+0x34>

00000c36 <__divmodhi4>:
 c36:	97 fb       	bst	r25, 7
 c38:	07 2e       	mov	r0, r23
 c3a:	16 f4       	brtc	.+4      	; 0xc40 <__divmodhi4+0xa>
 c3c:	00 94       	com	r0
 c3e:	07 d0       	rcall	.+14     	; 0xc4e <__divmodhi4_neg1>
 c40:	77 fd       	sbrc	r23, 7
 c42:	09 d0       	rcall	.+18     	; 0xc56 <__divmodhi4_neg2>
 c44:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__udivmodhi4>
 c48:	07 fc       	sbrc	r0, 7
 c4a:	05 d0       	rcall	.+10     	; 0xc56 <__divmodhi4_neg2>
 c4c:	3e f4       	brtc	.+14     	; 0xc5c <__divmodhi4_exit>

00000c4e <__divmodhi4_neg1>:
 c4e:	90 95       	com	r25
 c50:	81 95       	neg	r24
 c52:	9f 4f       	sbci	r25, 0xFF	; 255
 c54:	08 95       	ret

00000c56 <__divmodhi4_neg2>:
 c56:	70 95       	com	r23
 c58:	61 95       	neg	r22
 c5a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c5c <__divmodhi4_exit>:
 c5c:	08 95       	ret

00000c5e <__divmodsi4>:
 c5e:	05 2e       	mov	r0, r21
 c60:	97 fb       	bst	r25, 7
 c62:	1e f4       	brtc	.+6      	; 0xc6a <__divmodsi4+0xc>
 c64:	00 94       	com	r0
 c66:	0e 94 46 06 	call	0xc8c	; 0xc8c <__negsi2>
 c6a:	57 fd       	sbrc	r21, 7
 c6c:	07 d0       	rcall	.+14     	; 0xc7c <__divmodsi4_neg2>
 c6e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__udivmodsi4>
 c72:	07 fc       	sbrc	r0, 7
 c74:	03 d0       	rcall	.+6      	; 0xc7c <__divmodsi4_neg2>
 c76:	4e f4       	brtc	.+18     	; 0xc8a <__divmodsi4_exit>
 c78:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__negsi2>

00000c7c <__divmodsi4_neg2>:
 c7c:	50 95       	com	r21
 c7e:	40 95       	com	r20
 c80:	30 95       	com	r19
 c82:	21 95       	neg	r18
 c84:	3f 4f       	sbci	r19, 0xFF	; 255
 c86:	4f 4f       	sbci	r20, 0xFF	; 255
 c88:	5f 4f       	sbci	r21, 0xFF	; 255

00000c8a <__divmodsi4_exit>:
 c8a:	08 95       	ret

00000c8c <__negsi2>:
 c8c:	90 95       	com	r25
 c8e:	80 95       	com	r24
 c90:	70 95       	com	r23
 c92:	61 95       	neg	r22
 c94:	7f 4f       	sbci	r23, 0xFF	; 255
 c96:	8f 4f       	sbci	r24, 0xFF	; 255
 c98:	9f 4f       	sbci	r25, 0xFF	; 255
 c9a:	08 95       	ret

00000c9c <__udivmodhi4>:
 c9c:	aa 1b       	sub	r26, r26
 c9e:	bb 1b       	sub	r27, r27
 ca0:	51 e1       	ldi	r21, 0x11	; 17
 ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <__udivmodhi4_ep>

00000ca4 <__udivmodhi4_loop>:
 ca4:	aa 1f       	adc	r26, r26
 ca6:	bb 1f       	adc	r27, r27
 ca8:	a6 17       	cp	r26, r22
 caa:	b7 07       	cpc	r27, r23
 cac:	10 f0       	brcs	.+4      	; 0xcb2 <__udivmodhi4_ep>
 cae:	a6 1b       	sub	r26, r22
 cb0:	b7 0b       	sbc	r27, r23

00000cb2 <__udivmodhi4_ep>:
 cb2:	88 1f       	adc	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	5a 95       	dec	r21
 cb8:	a9 f7       	brne	.-22     	; 0xca4 <__udivmodhi4_loop>
 cba:	80 95       	com	r24
 cbc:	90 95       	com	r25
 cbe:	bc 01       	movw	r22, r24
 cc0:	cd 01       	movw	r24, r26
 cc2:	08 95       	ret

00000cc4 <__udivmodsi4>:
 cc4:	a1 e2       	ldi	r26, 0x21	; 33
 cc6:	1a 2e       	mov	r1, r26
 cc8:	aa 1b       	sub	r26, r26
 cca:	bb 1b       	sub	r27, r27
 ccc:	fd 01       	movw	r30, r26
 cce:	0d c0       	rjmp	.+26     	; 0xcea <__udivmodsi4_ep>

00000cd0 <__udivmodsi4_loop>:
 cd0:	aa 1f       	adc	r26, r26
 cd2:	bb 1f       	adc	r27, r27
 cd4:	ee 1f       	adc	r30, r30
 cd6:	ff 1f       	adc	r31, r31
 cd8:	a2 17       	cp	r26, r18
 cda:	b3 07       	cpc	r27, r19
 cdc:	e4 07       	cpc	r30, r20
 cde:	f5 07       	cpc	r31, r21
 ce0:	20 f0       	brcs	.+8      	; 0xcea <__udivmodsi4_ep>
 ce2:	a2 1b       	sub	r26, r18
 ce4:	b3 0b       	sbc	r27, r19
 ce6:	e4 0b       	sbc	r30, r20
 ce8:	f5 0b       	sbc	r31, r21

00000cea <__udivmodsi4_ep>:
 cea:	66 1f       	adc	r22, r22
 cec:	77 1f       	adc	r23, r23
 cee:	88 1f       	adc	r24, r24
 cf0:	99 1f       	adc	r25, r25
 cf2:	1a 94       	dec	r1
 cf4:	69 f7       	brne	.-38     	; 0xcd0 <__udivmodsi4_loop>
 cf6:	60 95       	com	r22
 cf8:	70 95       	com	r23
 cfa:	80 95       	com	r24
 cfc:	90 95       	com	r25
 cfe:	9b 01       	movw	r18, r22
 d00:	ac 01       	movw	r20, r24
 d02:	bd 01       	movw	r22, r26
 d04:	cf 01       	movw	r24, r30
 d06:	08 95       	ret

00000d08 <__itoa_ncheck>:
 d08:	bb 27       	eor	r27, r27
 d0a:	4a 30       	cpi	r20, 0x0A	; 10
 d0c:	31 f4       	brne	.+12     	; 0xd1a <__itoa_ncheck+0x12>
 d0e:	99 23       	and	r25, r25
 d10:	22 f4       	brpl	.+8      	; 0xd1a <__itoa_ncheck+0x12>
 d12:	bd e2       	ldi	r27, 0x2D	; 45
 d14:	90 95       	com	r25
 d16:	81 95       	neg	r24
 d18:	9f 4f       	sbci	r25, 0xFF	; 255
 d1a:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__utoa_common>

00000d1e <__utoa_ncheck>:
 d1e:	bb 27       	eor	r27, r27

00000d20 <__utoa_common>:
 d20:	fb 01       	movw	r30, r22
 d22:	55 27       	eor	r21, r21
 d24:	aa 27       	eor	r26, r26
 d26:	88 0f       	add	r24, r24
 d28:	99 1f       	adc	r25, r25
 d2a:	aa 1f       	adc	r26, r26
 d2c:	a4 17       	cp	r26, r20
 d2e:	10 f0       	brcs	.+4      	; 0xd34 <__utoa_common+0x14>
 d30:	a4 1b       	sub	r26, r20
 d32:	83 95       	inc	r24
 d34:	50 51       	subi	r21, 0x10	; 16
 d36:	b9 f7       	brne	.-18     	; 0xd26 <__utoa_common+0x6>
 d38:	a0 5d       	subi	r26, 0xD0	; 208
 d3a:	aa 33       	cpi	r26, 0x3A	; 58
 d3c:	08 f0       	brcs	.+2      	; 0xd40 <__utoa_common+0x20>
 d3e:	a9 5d       	subi	r26, 0xD9	; 217
 d40:	a1 93       	st	Z+, r26
 d42:	00 97       	sbiw	r24, 0x00	; 0
 d44:	79 f7       	brne	.-34     	; 0xd24 <__utoa_common+0x4>
 d46:	b1 11       	cpse	r27, r1
 d48:	b1 93       	st	Z+, r27
 d4a:	11 92       	st	Z+, r1
 d4c:	cb 01       	movw	r24, r22
 d4e:	0c 94 a9 06 	jmp	0xd52	; 0xd52 <strrev>

00000d52 <strrev>:
 d52:	dc 01       	movw	r26, r24
 d54:	fc 01       	movw	r30, r24
 d56:	67 2f       	mov	r22, r23
 d58:	71 91       	ld	r23, Z+
 d5a:	77 23       	and	r23, r23
 d5c:	e1 f7       	brne	.-8      	; 0xd56 <strrev+0x4>
 d5e:	32 97       	sbiw	r30, 0x02	; 2
 d60:	04 c0       	rjmp	.+8      	; 0xd6a <strrev+0x18>
 d62:	7c 91       	ld	r23, X
 d64:	6d 93       	st	X+, r22
 d66:	70 83       	st	Z, r23
 d68:	62 91       	ld	r22, -Z
 d6a:	ae 17       	cp	r26, r30
 d6c:	bf 07       	cpc	r27, r31
 d6e:	c8 f3       	brcs	.-14     	; 0xd62 <strrev+0x10>
 d70:	08 95       	ret

00000d72 <_exit>:
 d72:	f8 94       	cli

00000d74 <__stop_program>:
 d74:	ff cf       	rjmp	.-2      	; 0xd74 <__stop_program>
