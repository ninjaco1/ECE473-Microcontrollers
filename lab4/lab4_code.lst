
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000011e6  0000127a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  00800104  00800104  0000127e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fb3  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce1  00000000  00000000  000032e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f30  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00004ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064f  00000000  00000000  00005238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a10  00000000  00000000  00005887  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00007297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 ee       	ldi	r30, 0xE6	; 230
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 30       	cpi	r26, 0x04	; 4
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a4 e0       	ldi	r26, 0x04	; 4
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 36       	cpi	r26, 0x6A	; 106
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 d6 07 	call	0xfac	; 0xfac <main>
      c6:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_dec_to_7seg>:
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
      ce:	e9 e2       	ldi	r30, 0x29	; 41
      d0:	f1 e0       	ldi	r31, 0x01	; 1
      d2:	80 ec       	ldi	r24, 0xC0	; 192
      d4:	80 83       	st	Z, r24
    dec_to_7seg[1] = ~(ONE);
      d6:	89 ef       	ldi	r24, 0xF9	; 249
      d8:	81 83       	std	Z+1, r24	; 0x01
    dec_to_7seg[2] = ~(TWO);
      da:	84 ea       	ldi	r24, 0xA4	; 164
      dc:	82 83       	std	Z+2, r24	; 0x02
    dec_to_7seg[3] = ~(THREE);
      de:	80 eb       	ldi	r24, 0xB0	; 176
      e0:	83 83       	std	Z+3, r24	; 0x03
    dec_to_7seg[4] = ~(FOUR);
      e2:	89 e9       	ldi	r24, 0x99	; 153
      e4:	84 83       	std	Z+4, r24	; 0x04
    dec_to_7seg[5] = ~(FIVE);
      e6:	82 e9       	ldi	r24, 0x92	; 146
      e8:	85 83       	std	Z+5, r24	; 0x05
    dec_to_7seg[6] = ~(SIX);
      ea:	82 e8       	ldi	r24, 0x82	; 130
      ec:	86 83       	std	Z+6, r24	; 0x06
    dec_to_7seg[7] = ~(SEVEN);
      ee:	88 ef       	ldi	r24, 0xF8	; 248
      f0:	87 83       	std	Z+7, r24	; 0x07
    dec_to_7seg[8] = ~(EIGHT);
      f2:	80 e8       	ldi	r24, 0x80	; 128
      f4:	80 87       	std	Z+8, r24	; 0x08
    dec_to_7seg[9] = ~(NINE);
      f6:	88 e9       	ldi	r24, 0x98	; 152
      f8:	81 87       	std	Z+9, r24	; 0x09
    dec_to_7seg[10] = ~(COLON);
      fa:	8c ef       	ldi	r24, 0xFC	; 252
      fc:	82 87       	std	Z+10, r24	; 0x0a
    dec_to_7seg[11] = ~(BLANK);
      fe:	8f ef       	ldi	r24, 0xFF	; 255
     100:	83 87       	std	Z+11, r24	; 0x0b
     102:	08 95       	ret

00000104 <set_decoder>:
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
     104:	e1 e2       	ldi	r30, 0x21	; 33
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	10 82       	st	Z, r1
    decoder[1] = DIGIT3;
     10a:	80 e1       	ldi	r24, 0x10	; 16
     10c:	81 83       	std	Z+1, r24	; 0x01
    decoder[2] = DIS_COLON;
     10e:	80 e2       	ldi	r24, 0x20	; 32
     110:	82 83       	std	Z+2, r24	; 0x02
    decoder[3] = DIGIT2;
     112:	80 e3       	ldi	r24, 0x30	; 48
     114:	83 83       	std	Z+3, r24	; 0x03
    decoder[4] = DIGIT1;
     116:	80 e4       	ldi	r24, 0x40	; 64
     118:	84 83       	std	Z+4, r24	; 0x04
    decoder[7] = TRI_BUFFER;
     11a:	80 e7       	ldi	r24, 0x70	; 112
     11c:	87 83       	std	Z+7, r24	; 0x07
     11e:	08 95       	ret

00000120 <chk_buttons>:
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
int8_t chk_buttons(int button)
{
     120:	ac 01       	movw	r20, r24
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
     122:	99 b3       	in	r25, 0x19	; 25
     124:	fa 01       	movw	r30, r20
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	e7 5f       	subi	r30, 0xF7	; 247
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	20 81       	ld	r18, Z
     130:	31 81       	ldd	r19, Z+1	; 0x01
     132:	22 0f       	add	r18, r18
     134:	33 1f       	adc	r19, r19
     136:	30 6e       	ori	r19, 0xE0	; 224
     138:	89 2f       	mov	r24, r25
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <chk_buttons+0x22>
     13e:	95 95       	asr	r25
     140:	87 95       	ror	r24
     142:	4a 95       	dec	r20
     144:	e2 f7       	brpl	.-8      	; 0x13e <chk_buttons+0x1e>
     146:	81 70       	andi	r24, 0x01	; 1
     148:	99 27       	eor	r25, r25
     14a:	28 2b       	or	r18, r24
     14c:	39 2b       	or	r19, r25
     14e:	31 83       	std	Z+1, r19	; 0x01
     150:	20 83       	st	Z, r18
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	21 15       	cp	r18, r1
     156:	30 4f       	sbci	r19, 0xF0	; 240
     158:	09 f0       	breq	.+2      	; 0x15c <chk_buttons+0x3c>
     15a:	80 e0       	ldi	r24, 0x00	; 0

    if (state[button] == 0xF000)
        return 1;

    return 0;
}
     15c:	08 95       	ret

0000015e <segsum>:
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum)
{
     15e:	ac 01       	movw	r20, r24
    //break up decimal sum into 4 digit-segments
    //blank out leading zero digits
    //now move data to right place for misplaced colon position
    int i;//, leading_zero;

    segment_data[0] = sum % 10;
     160:	9c 01       	movw	r18, r24
     162:	ad ec       	ldi	r26, 0xCD	; 205
     164:	bc ec       	ldi	r27, 0xCC	; 204
     166:	0e 94 ac 08 	call	0x1158	; 0x1158 <__umulhisi3>
     16a:	96 95       	lsr	r25
     16c:	87 95       	ror	r24
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	96 95       	lsr	r25
     174:	87 95       	ror	r24
     176:	9c 01       	movw	r18, r24
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	82 0f       	add	r24, r18
     18a:	93 1f       	adc	r25, r19
     18c:	9a 01       	movw	r18, r20
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	20 93 35 01 	sts	0x0135, r18	; 0x800135 <segment_data>
    segment_data[1] = (sum % 100) / 10;
     196:	9a 01       	movw	r18, r20
     198:	36 95       	lsr	r19
     19a:	27 95       	ror	r18
     19c:	36 95       	lsr	r19
     19e:	27 95       	ror	r18
     1a0:	ab e7       	ldi	r26, 0x7B	; 123
     1a2:	b4 e1       	ldi	r27, 0x14	; 20
     1a4:	0e 94 ac 08 	call	0x1158	; 0x1158 <__umulhisi3>
     1a8:	96 95       	lsr	r25
     1aa:	87 95       	ror	r24
     1ac:	64 e6       	ldi	r22, 0x64	; 100
     1ae:	68 9f       	mul	r22, r24
     1b0:	90 01       	movw	r18, r0
     1b2:	69 9f       	mul	r22, r25
     1b4:	30 0d       	add	r19, r0
     1b6:	11 24       	eor	r1, r1
     1b8:	ca 01       	movw	r24, r20
     1ba:	82 1b       	sub	r24, r18
     1bc:	93 0b       	sbc	r25, r19
     1be:	9c 01       	movw	r18, r24
     1c0:	ad ec       	ldi	r26, 0xCD	; 205
     1c2:	bc ec       	ldi	r27, 0xCC	; 204
     1c4:	0e 94 ac 08 	call	0x1158	; 0x1158 <__umulhisi3>
     1c8:	96 95       	lsr	r25
     1ca:	87 95       	ror	r24
     1cc:	96 95       	lsr	r25
     1ce:	87 95       	ror	r24
     1d0:	96 95       	lsr	r25
     1d2:	87 95       	ror	r24
     1d4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <segment_data+0x1>
    // segment_data[2] = 11; // doesn't turn on the colon, blank
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     1d8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <colonDisplay>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	09 f4       	brne	.+2      	; 0x1e2 <segsum+0x84>
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <segsum+0x110>
     1e2:	8b e0       	ldi	r24, 0x0B	; 11
     1e4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <segment_data+0x2>
    segment_data[3] = (sum % 1000) / 100;
     1e8:	9a 01       	movw	r18, r20
     1ea:	36 95       	lsr	r19
     1ec:	27 95       	ror	r18
     1ee:	36 95       	lsr	r19
     1f0:	27 95       	ror	r18
     1f2:	36 95       	lsr	r19
     1f4:	27 95       	ror	r18
     1f6:	a5 ec       	ldi	r26, 0xC5	; 197
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	0e 94 ac 08 	call	0x1158	; 0x1158 <__umulhisi3>
     1fe:	fc 01       	movw	r30, r24
     200:	f2 95       	swap	r31
     202:	e2 95       	swap	r30
     204:	ef 70       	andi	r30, 0x0F	; 15
     206:	ef 27       	eor	r30, r31
     208:	ff 70       	andi	r31, 0x0F	; 15
     20a:	ef 27       	eor	r30, r31
     20c:	28 ee       	ldi	r18, 0xE8	; 232
     20e:	33 e0       	ldi	r19, 0x03	; 3
     210:	e2 9f       	mul	r30, r18
     212:	c0 01       	movw	r24, r0
     214:	e3 9f       	mul	r30, r19
     216:	90 0d       	add	r25, r0
     218:	f2 9f       	mul	r31, r18
     21a:	90 0d       	add	r25, r0
     21c:	11 24       	eor	r1, r1
     21e:	9a 01       	movw	r18, r20
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	36 95       	lsr	r19
     226:	27 95       	ror	r18
     228:	36 95       	lsr	r19
     22a:	27 95       	ror	r18
     22c:	ab e7       	ldi	r26, 0x7B	; 123
     22e:	b4 e1       	ldi	r27, 0x14	; 20
     230:	0e 94 ac 08 	call	0x1158	; 0x1158 <__umulhisi3>
     234:	96 95       	lsr	r25
     236:	87 95       	ror	r24
     238:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <segment_data+0x3>
    segment_data[4] = sum / 1000;
     23c:	e0 93 39 01 	sts	0x0139, r30	; 0x800139 <segment_data+0x4>
     240:	e5 e3       	ldi	r30, 0x35	; 53
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	90 e0       	ldi	r25, 0x00	; 0
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
            continue;
        if(segment_data[i] == 0)
            segment_data[i] = 11; // replace it with a blank
     248:	3b e0       	ldi	r19, 0x0B	; 11
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	91 05       	cpc	r25, r1
     24e:	31 f0       	breq	.+12     	; 0x25c <segsum+0xfe>
            continue;
        if(segment_data[i] == 0)
     250:	24 81       	ldd	r18, Z+4	; 0x04
     252:	21 11       	cpse	r18, r1
     254:	0b c0       	rjmp	.+22     	; 0x26c <segsum+0x10e>
            segment_data[i] = 11; // replace it with a blank
     256:	34 83       	std	Z+4, r19	; 0x04
    segment_data[3] = (sum % 1000) / 100;
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	41 f0       	breq	.+16     	; 0x26c <segsum+0x10e>
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	31 97       	sbiw	r30, 0x01	; 1
        if(i == 2)
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	91 05       	cpc	r25, r1
     264:	d9 f3       	breq	.-10     	; 0x25c <segsum+0xfe>
            continue;
        if(segment_data[i] == 0)
     266:	24 81       	ldd	r18, Z+4	; 0x04
     268:	22 23       	and	r18, r18
     26a:	a9 f3       	breq	.-22     	; 0x256 <segsum+0xf8>
     26c:	08 95       	ret
    int i;//, leading_zero;

    segment_data[0] = sum % 10;
    segment_data[1] = (sum % 100) / 10;
    // segment_data[2] = 11; // doesn't turn on the colon, blank
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	b9 cf       	rjmp	.-142    	; 0x1e4 <segsum+0x86>

00000272 <segclock>:
//takes two 8-bit binary values(hours and minutes) and places the appropriate 
//equivalent 4 digit.
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
     272:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <minutes>
     276:	8d ec       	ldi	r24, 0xCD	; 205
     278:	98 9f       	mul	r25, r24
     27a:	81 2d       	mov	r24, r1
     27c:	11 24       	eor	r1, r1
     27e:	86 95       	lsr	r24
     280:	86 95       	lsr	r24
     282:	86 95       	lsr	r24
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	82 9f       	mul	r24, r18
     288:	90 19       	sub	r25, r0
     28a:	11 24       	eor	r1, r1
     28c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <segment_data>
    segment_data[1] = minutes / 10;
     290:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <segment_data+0x1>
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     294:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <colonDisplay>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	a9 f0       	breq	.+42     	; 0x2c6 <segclock+0x54>
     29c:	8b e0       	ldi	r24, 0x0B	; 11
     29e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <segment_data+0x2>
    segment_data[3] = hours % 10;
     2a2:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <hours>
     2a6:	8d ec       	ldi	r24, 0xCD	; 205
     2a8:	98 9f       	mul	r25, r24
     2aa:	81 2d       	mov	r24, r1
     2ac:	11 24       	eor	r1, r1
     2ae:	86 95       	lsr	r24
     2b0:	86 95       	lsr	r24
     2b2:	86 95       	lsr	r24
     2b4:	2a e0       	ldi	r18, 0x0A	; 10
     2b6:	82 9f       	mul	r24, r18
     2b8:	90 19       	sub	r25, r0
     2ba:	11 24       	eor	r1, r1
     2bc:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <segment_data+0x3>
    segment_data[4] = hours / 10;
     2c0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <segment_data+0x4>
     2c4:	08 95       	ret
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    segment_data[1] = minutes / 10;
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     2c6:	8a e0       	ldi	r24, 0x0A	; 10
     2c8:	ea cf       	rjmp	.-44     	; 0x29e <segclock+0x2c>

000002ca <setDigit>:
// The cases set the value on PORTA to the right segments and PORTB
// to decoder.
/***************************************************************/

void setDigit()
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
    DDRA = 0xFF; // setting PORT A as an output
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	8a bb       	out	0x1a, r24	; 26
     2d2:	a1 e2       	ldi	r26, 0x21	; 33
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	c5 e3       	ldi	r28, 0x35	; 53
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
     2da:	8d 91       	ld	r24, X+
     2dc:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
     2de:	e9 91       	ld	r30, Y+
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e7 5d       	subi	r30, 0xD7	; 215
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	80 81       	ld	r24, Z
     2e8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ea:	8f ec       	ldi	r24, 0xCF	; 207
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <setDigit+0x24>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <setDigit+0x2a>
     2f4:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	a6 32       	cpi	r26, 0x26	; 38
     2fa:	b9 07       	cpc	r27, r25
     2fc:	71 f7       	brne	.-36     	; 0x2da <setDigit+0x10>
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
        _delay_ms(0.5);
    }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
     304:	87 b3       	in	r24, 0x17	; 23
     306:	87 60       	ori	r24, 0x07	; 7
     308:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
     30a:	8d b1       	in	r24, 0x0d	; 13
     30c:	80 65       	ori	r24, 0x50	; 80
     30e:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
     310:	70 9a       	sbi	0x0e, 0	; 14
     312:	08 95       	ret

00000314 <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
     314:	80 b7       	in	r24, 0x30	; 48
     316:	88 60       	ori	r24, 0x08	; 8
     318:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
     31a:	87 b7       	in	r24, 0x37	; 55
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
     320:	83 b7       	in	r24, 0x33	; 51
     322:	81 60       	ori	r24, 0x01	; 1
     324:	83 bf       	out	0x33, r24	; 51
     326:	08 95       	ret

00000328 <encoderRead>:
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
     328:	61 11       	cpse	r22, r1
     32a:	24 c0       	rjmp	.+72     	; 0x374 <encoderRead+0x4c>
     32c:	a1 e0       	ldi	r26, 0x01	; 1
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e0 e0       	ldi	r30, 0x00	; 0
     332:	f0 e0       	ldi	r31, 0x00	; 0
    b = (knob == 0) ? 2 : 8; // where the position of b is
     334:	22 e0       	ldi	r18, 0x02	; 2
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
     336:	91 e0       	ldi	r25, 0x01	; 1
    b = (knob == 0) ? 2 : 8; // where the position of b is

    a_index = (knob == 0) ? 0 : 2;
    b_index = (knob == 0) ? 1 : 3;
    
    new_A = (data & a) ? 1 : 0; // most LSB
     338:	98 23       	and	r25, r24
     33a:	31 e0       	ldi	r19, 0x01	; 1
     33c:	09 f4       	brne	.+2      	; 0x340 <encoderRead+0x18>
     33e:	30 e0       	ldi	r19, 0x00	; 0
    new_B = (data & b) ? 1 : 0; // 2nd LSB
     340:	82 23       	and	r24, r18
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	09 f4       	brne	.+2      	; 0x348 <encoderRead+0x20>
     346:	20 e0       	ldi	r18, 0x00	; 0


    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
     348:	e0 50       	subi	r30, 0x00	; 0
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	40 81       	ld	r20, Z
     34e:	a0 50       	subi	r26, 0x00	; 0
     350:	bf 4f       	sbci	r27, 0xFF	; 255
     352:	34 17       	cp	r19, r20
     354:	19 f1       	breq	.+70     	; 0x39c <encoderRead+0x74>
        if((new_A == 0) && (new_B == 0)){
     356:	91 11       	cpse	r25, r1
     358:	14 c0       	rjmp	.+40     	; 0x382 <encoderRead+0x5a>
     35a:	88 23       	and	r24, r24
     35c:	a1 f0       	breq	.+40     	; 0x386 <encoderRead+0x5e>
            else{
                count--;
            }
        }
        else if ((new_A == 0) && (new_B == 1)){
            if (old_state[a_index] == 0){
     35e:	41 11       	cpse	r20, r1
     360:	14 c0       	rjmp	.+40     	; 0x38a <encoderRead+0x62>
    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[a_index] == 1){
                count++;
     362:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count.1816>
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count.1816>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     36c:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
     36e:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
     370:	2c 93       	st	X, r18
     372:	08 95       	ret
     374:	a3 e0       	ldi	r26, 0x03	; 3
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e2 e0       	ldi	r30, 0x02	; 2
     37a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
    b = (knob == 0) ? 2 : 8; // where the position of b is
     37c:	28 e0       	ldi	r18, 0x08	; 8
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
     37e:	94 e0       	ldi	r25, 0x04	; 4
     380:	db cf       	rjmp	.-74     	; 0x338 <encoderRead+0x10>
            }
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
     382:	81 11       	cpse	r24, r1
     384:	10 c0       	rjmp	.+32     	; 0x3a6 <encoderRead+0x7e>

    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[a_index] == 1){
     386:	41 30       	cpi	r20, 0x01	; 1
     388:	61 f3       	breq	.-40     	; 0x362 <encoderRead+0x3a>
                count++;
            }
            else{
                count--;
     38a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count.1816>
     38e:	81 50       	subi	r24, 0x01	; 1
     390:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count.1816>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     394:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
     396:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
     398:	2c 93       	st	X, r18
     39a:	08 95       	ret
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
     39c:	5c 91       	ld	r21, X
     39e:	25 13       	cpse	r18, r21
     3a0:	da cf       	rjmp	.-76     	; 0x356 <encoderRead+0x2e>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
        old_state[b_index] = new_B;

    } // if changed occured
    // if return value is still -1 then nothing happen
    return (return_val); // return coder state
}
     3a4:	08 95       	ret
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[a_index] == 0){ // one direction 
     3a6:	41 11       	cpse	r20, r1
     3a8:	0b c0       	rjmp	.+22     	; 0x3c0 <encoderRead+0x98>
                if (count == 3){
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <count.1816>
     3b0:	93 30       	cpi	r25, 0x03	; 3
     3b2:	41 f0       	breq	.+16     	; 0x3c4 <encoderRead+0x9c>
     3b4:	81 95       	neg	r24
                if (count == -3){
                    return_val = 1;
   
                }
            }
            count = 0; // count is always reset in detent position
     3b6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count.1816>
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
     3ba:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
     3bc:	2c 93       	st	X, r18
     3be:	08 95       	ret
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <encoderRead+0x8e>
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[a_index] == 0){ // one direction 
                if (count == 3){
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	f6 cf       	rjmp	.-20     	; 0x3b4 <encoderRead+0x8c>

000003c8 <__vector_16>:
// and when the overflow flag for timer counter 0 it set.
// This fucntions checks the push buttons to see which buttons were pressed
// then set it in its correct mode.
// Afterwards checks the encoder to see where it is.
/******************************************************************************/
ISR(TIMER0_OVF_vect){
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	0b b6       	in	r0, 0x3b	; 59
     3d4:	0f 92       	push	r0
     3d6:	2f 93       	push	r18
     3d8:	3f 93       	push	r19
     3da:	4f 93       	push	r20
     3dc:	5f 93       	push	r21
     3de:	6f 93       	push	r22
     3e0:	7f 93       	push	r23
     3e2:	8f 93       	push	r24
     3e4:	9f 93       	push	r25
     3e6:	af 93       	push	r26
     3e8:	bf 93       	push	r27
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	ef 93       	push	r30
     3f0:	ff 93       	push	r31
    static uint8_t count = 0, seconds;
    //insert loop demake lay for debounce

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;
     3f2:	88 b3       	in	r24, 0x18	; 24
     3f4:	80 67       	ori	r24, 0x70	; 112
     3f6:	88 bb       	out	0x18, r24	; 24
     3f8:	4c e0       	ldi	r20, 0x0C	; 12
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <state.1773+0x2>
     400:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <state.1773+0x3>
     404:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state.1773+0x4>
     408:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <state.1773+0x5>
    for (i = 0; i < 12; i++)
    { // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
        PORTA = 0xFF; // set port A as pull ups
     40c:	cf ef       	ldi	r28, 0xFF	; 255
        

        // checking what button is being pressed
        if (chk_buttons(1)) // set the increment mode on 
        {
            incDec2 ^= 1; // flip the bits for the flag
     40e:	b1 e0       	ldi	r27, 0x01	; 1

        }
        if (chk_buttons(2)) // set the decrement mode on
        {
            incDec4 ^= 1; // flip the bits for the flag
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
     410:	d2 e0       	ldi	r29, 0x02	; 2

    for (i = 0; i < 12; i++)
    { // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
     412:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF; // set port A as pull ups
     414:	cb bb       	out	0x1b, r28	; 27
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
     416:	a9 b3       	in	r26, 0x19	; 25
     418:	22 0f       	add	r18, r18
     41a:	33 1f       	adc	r19, r19
     41c:	30 6e       	ori	r19, 0xE0	; 224
     41e:	a1 fb       	bst	r26, 1
     420:	66 27       	eor	r22, r22
     422:	60 f9       	bld	r22, 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	26 2b       	or	r18, r22
     428:	37 2b       	or	r19, r23
     42a:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <state.1773+0x3>
     42e:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <state.1773+0x2>

    if (state[button] == 0xF000)
     432:	21 15       	cp	r18, r1
     434:	a0 ef       	ldi	r26, 0xF0	; 240
     436:	3a 07       	cpc	r19, r26
     438:	51 f4       	brne	.+20     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
        

        // checking what button is being pressed
        if (chk_buttons(1)) // set the increment mode on 
        {
            incDec2 ^= 1; // flip the bits for the flag
     43a:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <incDec2>
     43e:	ab 27       	eor	r26, r27
     440:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <incDec2>
            barGraphDisplay ^= 1 << 0; // show up on the first led
     444:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <barGraphDisplay>
     448:	ab 27       	eor	r26, r27
     44a:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <barGraphDisplay>
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
     44e:	a9 b3       	in	r26, 0x19	; 25
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	90 6e       	ori	r25, 0xE0	; 224
     456:	a2 fb       	bst	r26, 2
     458:	ee 27       	eor	r30, r30
     45a:	e0 f9       	bld	r30, 0
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	8e 2b       	or	r24, r30
     460:	9f 2b       	or	r25, r31
     462:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state.1773+0x5>
     466:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state.1773+0x4>

    if (state[button] == 0xF000)
     46a:	81 15       	cp	r24, r1
     46c:	a0 ef       	ldi	r26, 0xF0	; 240
     46e:	9a 07       	cpc	r25, r26
     470:	51 f4       	brne	.+20     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
            barGraphDisplay ^= 1 << 0; // show up on the first led

        }
        if (chk_buttons(2)) // set the decrement mode on
        {
            incDec4 ^= 1; // flip the bits for the flag
     472:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <incDec4>
     476:	ab 27       	eor	r26, r27
     478:	a0 93 1d 01 	sts	0x011D, r26	; 0x80011d <incDec4>
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
     47c:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <barGraphDisplay>
     480:	ad 27       	eor	r26, r29
     482:	a0 93 1f 01 	sts	0x011F, r26	; 0x80011f <barGraphDisplay>
     486:	41 50       	subi	r20, 0x01	; 1
     488:	51 09       	sbc	r21, r1

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;

    for (i = 0; i < 12; i++)
     48a:	19 f6       	brne	.-122    	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
            incDec4 ^= 1; // flip the bits for the flag
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
        }
        
    }
    PORTB &= ~(TRI_BUFFER); // turn off the tri state buffer 
     48c:	88 b3       	in	r24, 0x18	; 24
     48e:	8f 78       	andi	r24, 0x8F	; 143
     490:	88 bb       	out	0x18, r24	; 24

    // reading each knob
    uint8_t enc1 = encoderRead(data, 0);
     492:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <data>
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	8c 2f       	mov	r24, r28
     49a:	0e 94 94 01 	call	0x328	; 0x328 <encoderRead>
     49e:	d8 2f       	mov	r29, r24
    uint8_t enc2 = encoderRead(data, 1);
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	8c 2f       	mov	r24, r28
     4a4:	0e 94 94 01 	call	0x328	; 0x328 <encoderRead>

    // each case of what the knob or buttons will be
    if (incDec2 == 1 && incDec4 == 1){
     4a8:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <incDec2>
     4ac:	91 30       	cpi	r25, 0x01	; 1
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	87 c0       	rjmp	.+270    	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
        current_num = current_num;

    }
    else if (incDec2 == 0 && incDec4 == 0){
     4b2:	91 11       	cpse	r25, r1
     4b4:	39 c0       	rjmp	.+114    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     4b6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <incDec4>
     4ba:	91 11       	cpse	r25, r1
     4bc:	37 c0       	rjmp	.+110    	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
        if(enc1 == 0 || enc2 == 0)
     4be:	d1 11       	cpse	r29, r1
     4c0:	9f c0       	rjmp	.+318    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
            current_num -= 1;
     4c2:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
     4c6:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	31 09       	sbc	r19, r1
     4ce:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
     4d2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
        if (enc1 == 1 || enc2 == 1)
     4d6:	d1 30       	cpi	r29, 0x01	; 1
     4d8:	11 f0       	breq	.+4      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	51 f5       	brne	.+84     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
            current_num += 1;
     4de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     4e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
     4ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
        if (enc1 == 1 || enc2 == 1)
            current_num += 4;
    }

    // add a counter to determine one second 
    count++;
     4f0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1802>
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1802>
    if ((count % 128) == 0){
     4fa:	8f 77       	andi	r24, 0x7F	; 127
     4fc:	09 f1       	breq	.+66     	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
                    hours = 0;
            }
        }
    }
    
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	bf 91       	pop	r27
     508:	af 91       	pop	r26
     50a:	9f 91       	pop	r25
     50c:	8f 91       	pop	r24
     50e:	7f 91       	pop	r23
     510:	6f 91       	pop	r22
     512:	5f 91       	pop	r21
     514:	4f 91       	pop	r20
     516:	3f 91       	pop	r19
     518:	2f 91       	pop	r18
     51a:	0f 90       	pop	r0
     51c:	0b be       	out	0x3b, r0	; 59
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti
     528:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <incDec4>
        if(enc1 == 0 || enc2 == 0)
            current_num -= 2;
        if (enc1 == 1 || enc2 == 1)
            current_num += 2;
    }
    else if (incDec4 == 1){
     52c:	91 30       	cpi	r25, 0x01	; 1
     52e:	09 f4       	brne	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     530:	6d c0       	rjmp	.+218    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
        if (enc1 == 1 || enc2 == 1)
            current_num += 4;
    }

    // add a counter to determine one second 
    count++;
     532:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1802>
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1802>
    if ((count % 128) == 0){
     53c:	8f 77       	andi	r24, 0x7F	; 127
     53e:	f9 f6       	brne	.-66     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
        // 1 second has past
        colonDisplay ^= 0x1; // blinking
     540:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <colonDisplay>
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	89 27       	eor	r24, r25
     548:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <colonDisplay>
        seconds++;
     54c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds.1803>
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds.1803>
        if ((seconds % 60) == 0){
     556:	99 e8       	ldi	r25, 0x89	; 137
     558:	89 9f       	mul	r24, r25
     55a:	21 2d       	mov	r18, r1
     55c:	11 24       	eor	r1, r1
     55e:	22 95       	swap	r18
     560:	26 95       	lsr	r18
     562:	27 70       	andi	r18, 0x07	; 7
     564:	3c e3       	ldi	r19, 0x3C	; 60
     566:	23 9f       	mul	r18, r19
     568:	80 19       	sub	r24, r0
     56a:	11 24       	eor	r1, r1
     56c:	81 11       	cpse	r24, r1
     56e:	c7 cf       	rjmp	.-114    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
            minutes++;
     570:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <minutes>
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <minutes>
            seconds = 0;
     57a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <seconds.1803>
            if ((minutes % 60) == 0){
     57e:	89 9f       	mul	r24, r25
     580:	91 2d       	mov	r25, r1
     582:	11 24       	eor	r1, r1
     584:	92 95       	swap	r25
     586:	96 95       	lsr	r25
     588:	97 70       	andi	r25, 0x07	; 7
     58a:	93 9f       	mul	r25, r19
     58c:	80 19       	sub	r24, r0
     58e:	11 24       	eor	r1, r1
     590:	81 11       	cpse	r24, r1
     592:	b5 cf       	rjmp	.-150    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
                hours++;
     594:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <hours>
     598:	8f 5f       	subi	r24, 0xFF	; 255
     59a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <hours>
                minutes = 0;
     59e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <minutes>
                if (hours % 24 == 0)
     5a2:	9b ea       	ldi	r25, 0xAB	; 171
     5a4:	89 9f       	mul	r24, r25
     5a6:	91 2d       	mov	r25, r1
     5a8:	11 24       	eor	r1, r1
     5aa:	92 95       	swap	r25
     5ac:	9f 70       	andi	r25, 0x0F	; 15
     5ae:	28 e1       	ldi	r18, 0x18	; 24
     5b0:	92 9f       	mul	r25, r18
     5b2:	80 19       	sub	r24, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	81 11       	cpse	r24, r1
     5b8:	a2 cf       	rjmp	.-188    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
                    hours = 0;
     5ba:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <hours>
            }
        }
    }
    
}
     5be:	9f cf       	rjmp	.-194    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
    // reading each knob
    uint8_t enc1 = encoderRead(data, 0);
    uint8_t enc2 = encoderRead(data, 1);

    // each case of what the knob or buttons will be
    if (incDec2 == 1 && incDec4 == 1){
     5c0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <incDec4>
     5c4:	91 30       	cpi	r25, 0x01	; 1
     5c6:	09 f4       	brne	.+2      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
     5c8:	b4 cf       	rjmp	.-152    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
            current_num -= 1;
        if (enc1 == 1 || enc2 == 1)
            current_num += 1;
    }
    else if (incDec2 == 1){
        if(enc1 == 0 || enc2 == 0)
     5ca:	d1 11       	cpse	r29, r1
     5cc:	1c c0       	rjmp	.+56     	; 0x606 <__LOCK_REGION_LENGTH__+0x206>
            current_num -= 2;
     5ce:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
     5d2:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
     5d6:	22 50       	subi	r18, 0x02	; 2
     5d8:	31 09       	sbc	r19, r1
     5da:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
     5de:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
        if (enc1 == 1 || enc2 == 1)
     5e2:	d1 30       	cpi	r29, 0x01	; 1
     5e4:	19 f0       	breq	.+6      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5e6:	81 30       	cpi	r24, 0x01	; 1
     5e8:	09 f0       	breq	.+2      	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5ea:	a3 cf       	rjmp	.-186    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
            current_num += 2;
     5ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     5f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
     5f4:	02 96       	adiw	r24, 0x02	; 2
     5f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
     5fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     5fe:	99 cf       	rjmp	.-206    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
    if (incDec2 == 1 && incDec4 == 1){
        current_num = current_num;

    }
    else if (incDec2 == 0 && incDec4 == 0){
        if(enc1 == 0 || enc2 == 0)
     600:	81 11       	cpse	r24, r1
     602:	69 cf       	rjmp	.-302    	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     604:	5e cf       	rjmp	.-324    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
            current_num -= 1;
        if (enc1 == 1 || enc2 == 1)
            current_num += 1;
    }
    else if (incDec2 == 1){
        if(enc1 == 0 || enc2 == 0)
     606:	81 11       	cpse	r24, r1
     608:	ec cf       	rjmp	.-40     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     60a:	e1 cf       	rjmp	.-62     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
            current_num -= 2;
        if (enc1 == 1 || enc2 == 1)
            current_num += 2;
    }
    else if (incDec4 == 1){
        if (enc1 == 0 || enc2 == 0)
     60c:	dd 23       	and	r29, r29
     60e:	89 f0       	breq	.+34     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
     610:	88 23       	and	r24, r24
     612:	79 f0       	breq	.+30     	; 0x632 <__LOCK_REGION_LENGTH__+0x232>
            current_num -= 4;
        if (enc1 == 1 || enc2 == 1)
     614:	d1 30       	cpi	r29, 0x01	; 1
     616:	19 f0       	breq	.+6      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	09 f0       	breq	.+2      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
     61c:	8a cf       	rjmp	.-236    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
            current_num += 4;
     61e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     622:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
     626:	04 96       	adiw	r24, 0x04	; 4
     628:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
     62c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
     630:	80 cf       	rjmp	.-256    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
        if (enc1 == 1 || enc2 == 1)
            current_num += 2;
    }
    else if (incDec4 == 1){
        if (enc1 == 0 || enc2 == 0)
            current_num -= 4;
     632:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
     636:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
     63a:	24 50       	subi	r18, 0x04	; 4
     63c:	31 09       	sbc	r19, r1
     63e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
     642:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
     646:	e6 cf       	rjmp	.-52     	; 0x614 <__LOCK_REGION_LENGTH__+0x214>

00000648 <barGraph>:
//                                  barGraph
// Set the mode on the bar graph. 
/******************************************************************************/
void barGraph(){
    
    SPDR = barGraphDisplay;
     648:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <barGraphDisplay>
     64c:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
     64e:	77 9b       	sbis	0x0e, 7	; 14
     650:	fe cf       	rjmp	.-4      	; 0x64e <barGraph+0x6>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
     652:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
     654:	82 b3       	in	r24, 0x12	; 18
     656:	12 ba       	out	0x12, r1	; 18
     658:	08 95       	ret

0000065a <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	81 11       	cpse	r24, r1
     65e:	01 c0       	rjmp	.+2      	; 0x662 <send_lcd+0x8>
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     664:	77 9b       	sbis	0x0e, 7	; 14
     666:	fe cf       	rjmp	.-4      	; 0x664 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     668:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     66e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     672:	88 60       	ori	r24, 0x08	; 8
     674:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     678:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     67c:	87 7f       	andi	r24, 0xF7	; 247
     67e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     682:	08 95       	ret

00000684 <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     684:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <i.2094>
     688:	82 0f       	add	r24, r18
     68a:	91 1d       	adc	r25, r1
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     694:	77 9b       	sbis	0x0e, 7	; 14
     696:	fe cf       	rjmp	.-4      	; 0x694 <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     698:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     69a:	77 9b       	sbis	0x0e, 7	; 14
     69c:	fe cf       	rjmp	.-4      	; 0x69a <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     69e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6a2:	88 60       	ori	r24, 0x08	; 8
     6a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ac:	87 7f       	andi	r24, 0xF7	; 247
     6ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
     6b2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <i.2094>
     6b6:	8f 5f       	subi	r24, 0xFF	; 255
     6b8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     6bc:	80 31       	cpi	r24, 0x10	; 16
     6be:	d9 f0       	breq	.+54     	; 0x6f6 <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     6c0:	80 32       	cpi	r24, 0x20	; 32
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <refresh_lcd+0x42>
     6c4:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c6:	85 ed       	ldi	r24, 0xD5	; 213
     6c8:	8a 95       	dec	r24
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <refresh_lcd+0x44>
     6cc:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6ce:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6d0:	77 9b       	sbis	0x0e, 7	; 14
     6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     6d4:	80 e8       	ldi	r24, 0x80	; 128
     6d6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6d8:	77 9b       	sbis	0x0e, 7	; 14
     6da:	fe cf       	rjmp	.-4      	; 0x6d8 <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e0:	88 60       	ori	r24, 0x08	; 8
     6e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ea:	87 7f       	andi	r24, 0xF7	; 247
     6ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     6f0:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <i.2094>
     6f4:	08 95       	ret
     6f6:	f5 ed       	ldi	r31, 0xD5	; 213
     6f8:	fa 95       	dec	r31
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <refresh_lcd+0x74>
     6fc:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6fe:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     700:	77 9b       	sbis	0x0e, 7	; 14
     702:	fe cf       	rjmp	.-4      	; 0x700 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
     704:	80 ec       	ldi	r24, 0xC0	; 192
     706:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     708:	77 9b       	sbis	0x0e, 7	; 14
     70a:	fe cf       	rjmp	.-4      	; 0x708 <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     70c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     710:	88 60       	ori	r24, 0x08	; 8
     712:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     716:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71a:	87 7f       	andi	r24, 0xF7	; 247
     71c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     720:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <i.2094>
     724:	cd cf       	rjmp	.-102    	; 0x6c0 <refresh_lcd+0x3c>

00000726 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     726:	66 0f       	add	r22, r22
     728:	66 0f       	add	r22, r22
     72a:	66 0f       	add	r22, r22
     72c:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     72e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     730:	77 9b       	sbis	0x0e, 7	; 14
     732:	fe cf       	rjmp	.-4      	; 0x730 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     734:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     736:	77 9b       	sbis	0x0e, 7	; 14
     738:	fe cf       	rjmp	.-4      	; 0x736 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     73a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     73e:	28 60       	ori	r18, 0x08	; 8
     740:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     744:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     748:	27 7f       	andi	r18, 0xF7	; 247
     74a:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74e:	25 ed       	ldi	r18, 0xD5	; 213
     750:	2a 95       	dec	r18
     752:	f1 f7       	brne	.-4      	; 0x750 <set_custom_character+0x2a>
     754:	00 00       	nop
     756:	fc 01       	movw	r30, r24
     758:	9c 01       	movw	r18, r24
     75a:	28 5f       	subi	r18, 0xF8	; 248
     75c:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     75e:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     760:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     762:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     764:	77 9b       	sbis	0x0e, 7	; 14
     766:	fe cf       	rjmp	.-4      	; 0x764 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     768:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     76a:	77 9b       	sbis	0x0e, 7	; 14
     76c:	fe cf       	rjmp	.-4      	; 0x76a <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     76e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     772:	88 60       	ori	r24, 0x08	; 8
     774:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     778:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     77c:	87 7f       	andi	r24, 0xF7	; 247
     77e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     782:	85 ed       	ldi	r24, 0xD5	; 213
     784:	8a 95       	dec	r24
     786:	f1 f7       	brne	.-4      	; 0x784 <set_custom_character+0x5e>
     788:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     78a:	e2 17       	cp	r30, r18
     78c:	f3 07       	cpc	r31, r19
     78e:	41 f7       	brne	.-48     	; 0x760 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     790:	08 95       	ret

00000792 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     792:	90 e4       	ldi	r25, 0x40	; 64
     794:	89 9f       	mul	r24, r25
     796:	60 0d       	add	r22, r0
     798:	11 24       	eor	r1, r1
     79a:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     79c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     79e:	77 9b       	sbis	0x0e, 7	; 14
     7a0:	fe cf       	rjmp	.-4      	; 0x79e <set_cursor+0xc>
  SPDR = byte;                        //send payload
     7a2:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7a4:	77 9b       	sbis	0x0e, 7	; 14
     7a6:	fe cf       	rjmp	.-4      	; 0x7a4 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7ac:	88 60       	ori	r24, 0x08	; 8
     7ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7b6:	87 7f       	andi	r24, 0xF7	; 247
     7b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7bc:	08 95       	ret

000007be <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     7be:	81 11       	cpse	r24, r1
     7c0:	13 c0       	rjmp	.+38     	; 0x7e8 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7c6:	77 9b       	sbis	0x0e, 7	; 14
     7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     7ca:	80 e3       	ldi	r24, 0x30	; 48
     7cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7ce:	77 9b       	sbis	0x0e, 7	; 14
     7d0:	fe cf       	rjmp	.-4      	; 0x7ce <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7d6:	88 60       	ori	r24, 0x08	; 8
     7d8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e0:	87 7f       	andi	r24, 0xF7	; 247
     7e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e6:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     7e8:	84 36       	cpi	r24, 0x64	; 100
     7ea:	b0 f4       	brcc	.+44     	; 0x818 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     7ec:	8a 30       	cpi	r24, 0x0A	; 10
     7ee:	60 f5       	brcc	.+88     	; 0x848 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7f4:	77 9b       	sbis	0x0e, 7	; 14
     7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     7f8:	9d ec       	ldi	r25, 0xCD	; 205
     7fa:	89 9f       	mul	r24, r25
     7fc:	91 2d       	mov	r25, r1
     7fe:	11 24       	eor	r1, r1
     800:	96 95       	lsr	r25
     802:	96 95       	lsr	r25
     804:	96 95       	lsr	r25
     806:	2a e0       	ldi	r18, 0x0A	; 10
     808:	92 9f       	mul	r25, r18
     80a:	80 19       	sub	r24, r0
     80c:	11 24       	eor	r1, r1
     80e:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     810:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     812:	77 9b       	sbis	0x0e, 7	; 14
     814:	fe cf       	rjmp	.-4      	; 0x812 <uint2lcd+0x54>
     816:	dd cf       	rjmp	.-70     	; 0x7d2 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     818:	99 e2       	ldi	r25, 0x29	; 41
     81a:	89 9f       	mul	r24, r25
     81c:	91 2d       	mov	r25, r1
     81e:	11 24       	eor	r1, r1
     820:	92 95       	swap	r25
     822:	9f 70       	andi	r25, 0x0F	; 15
     824:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     82a:	77 9b       	sbis	0x0e, 7	; 14
     82c:	fe cf       	rjmp	.-4      	; 0x82a <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     82e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     830:	77 9b       	sbis	0x0e, 7	; 14
     832:	fe cf       	rjmp	.-4      	; 0x830 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     834:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     838:	98 60       	ori	r25, 0x08	; 8
     83a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     83e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     842:	97 7f       	andi	r25, 0xF7	; 247
     844:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     848:	99 e2       	ldi	r25, 0x29	; 41
     84a:	89 9f       	mul	r24, r25
     84c:	91 2d       	mov	r25, r1
     84e:	11 24       	eor	r1, r1
     850:	92 95       	swap	r25
     852:	9f 70       	andi	r25, 0x0F	; 15
     854:	38 2f       	mov	r19, r24
     856:	24 e6       	ldi	r18, 0x64	; 100
     858:	92 9f       	mul	r25, r18
     85a:	30 19       	sub	r19, r0
     85c:	11 24       	eor	r1, r1
     85e:	2d ec       	ldi	r18, 0xCD	; 205
     860:	32 9f       	mul	r19, r18
     862:	91 2d       	mov	r25, r1
     864:	11 24       	eor	r1, r1
     866:	96 95       	lsr	r25
     868:	96 95       	lsr	r25
     86a:	96 95       	lsr	r25
     86c:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     86e:	21 e0       	ldi	r18, 0x01	; 1
     870:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     872:	77 9b       	sbis	0x0e, 7	; 14
     874:	fe cf       	rjmp	.-4      	; 0x872 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     876:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     878:	77 9b       	sbis	0x0e, 7	; 14
     87a:	fe cf       	rjmp	.-4      	; 0x878 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     87c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     880:	98 60       	ori	r25, 0x08	; 8
     882:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     886:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     88a:	97 7f       	andi	r25, 0xF7	; 247
     88c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     890:	af cf       	rjmp	.-162    	; 0x7f0 <uint2lcd+0x32>

00000892 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     892:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     894:	0c 94 df 03 	jmp	0x7be	; 0x7be <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     89c:	77 9b       	sbis	0x0e, 7	; 14
     89e:	fe cf       	rjmp	.-4      	; 0x89c <int2lcd+0xa>
  SPDR = byte;                        //send payload
     8a0:	9d e2       	ldi	r25, 0x2D	; 45
     8a2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8a4:	77 9b       	sbis	0x0e, 7	; 14
     8a6:	fe cf       	rjmp	.-4      	; 0x8a4 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8a8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ac:	98 60       	ori	r25, 0x08	; 8
     8ae:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b6:	97 7f       	andi	r25, 0xF7	; 247
     8b8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8bc:	95 ed       	ldi	r25, 0xD5	; 213
     8be:	9a 95       	dec	r25
     8c0:	f1 f7       	brne	.-4      	; 0x8be <int2lcd+0x2c>
     8c2:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     8c4:	81 95       	neg	r24
     8c6:	0c 94 df 03 	jmp	0x7be	; 0x7be <uint2lcd>

000008ca <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ca:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8cc:	77 9b       	sbis	0x0e, 7	; 14
     8ce:	fe cf       	rjmp	.-4      	; 0x8cc <cursor_on+0x2>
  SPDR = byte;                        //send payload
     8d0:	8e e0       	ldi	r24, 0x0E	; 14
     8d2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8d4:	77 9b       	sbis	0x0e, 7	; 14
     8d6:	fe cf       	rjmp	.-4      	; 0x8d4 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e6:	87 7f       	andi	r24, 0xF7	; 247
     8e8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ec:	08 95       	ret

000008ee <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     8f4:	8c e0       	ldi	r24, 0x0C	; 12
     8f6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f8:	77 9b       	sbis	0x0e, 7	; 14
     8fa:	fe cf       	rjmp	.-4      	; 0x8f8 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     900:	88 60       	ori	r24, 0x08	; 8
     902:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     906:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     90a:	87 7f       	andi	r24, 0xF7	; 247
     90c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     910:	08 95       	ret

00000912 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     912:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     914:	77 9b       	sbis	0x0e, 7	; 14
     916:	fe cf       	rjmp	.-4      	; 0x914 <shift_right+0x2>
  SPDR = byte;                        //send payload
     918:	8e e1       	ldi	r24, 0x1E	; 30
     91a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     91c:	77 9b       	sbis	0x0e, 7	; 14
     91e:	fe cf       	rjmp	.-4      	; 0x91c <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     920:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     924:	88 60       	ori	r24, 0x08	; 8
     926:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     92a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     92e:	87 7f       	andi	r24, 0xF7	; 247
     930:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     934:	08 95       	ret

00000936 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     936:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     938:	77 9b       	sbis	0x0e, 7	; 14
     93a:	fe cf       	rjmp	.-4      	; 0x938 <shift_left+0x2>
  SPDR = byte;                        //send payload
     93c:	88 e1       	ldi	r24, 0x18	; 24
     93e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     940:	77 9b       	sbis	0x0e, 7	; 14
     942:	fe cf       	rjmp	.-4      	; 0x940 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     944:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     948:	88 60       	ori	r24, 0x08	; 8
     94a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     94e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     952:	87 7f       	andi	r24, 0xF7	; 247
     954:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     958:	08 95       	ret

0000095a <strobe_lcd>:
     95a:	e2 e6       	ldi	r30, 0x62	; 98
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	88 60       	ori	r24, 0x08	; 8
     962:	80 83       	st	Z, r24
     964:	80 81       	ld	r24, Z
     966:	87 7f       	andi	r24, 0xF7	; 247
     968:	80 83       	st	Z, r24
     96a:	08 95       	ret

0000096c <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     96c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     96e:	77 9b       	sbis	0x0e, 7	; 14
     970:	fe cf       	rjmp	.-4      	; 0x96e <clear_display+0x2>
  SPDR = byte;                        //send payload
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     976:	77 9b       	sbis	0x0e, 7	; 14
     978:	fe cf       	rjmp	.-4      	; 0x976 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     97a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     97e:	88 60       	ori	r24, 0x08	; 8
     980:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     984:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     988:	87 7f       	andi	r24, 0xF7	; 247
     98a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     98e:	8f e1       	ldi	r24, 0x1F	; 31
     990:	9c e1       	ldi	r25, 0x1C	; 28
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <clear_display+0x26>
     996:	00 c0       	rjmp	.+0      	; 0x998 <clear_display+0x2c>
     998:	00 00       	nop
     99a:	08 95       	ret

0000099c <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     99c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     99e:	77 9b       	sbis	0x0e, 7	; 14
     9a0:	fe cf       	rjmp	.-4      	; 0x99e <cursor_home+0x2>
  SPDR = byte;                        //send payload
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9a6:	77 9b       	sbis	0x0e, 7	; 14
     9a8:	fe cf       	rjmp	.-4      	; 0x9a6 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9aa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b8:	87 7f       	andi	r24, 0xF7	; 247
     9ba:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9be:	8f e6       	ldi	r24, 0x6F	; 111
     9c0:	97 e1       	ldi	r25, 0x17	; 23
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <cursor_home+0x26>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <cursor_home+0x2c>
     9c8:	00 00       	nop
     9ca:	08 95       	ret

000009cc <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ce:	77 9b       	sbis	0x0e, 7	; 14
     9d0:	fe cf       	rjmp	.-4      	; 0x9ce <line2_col1+0x2>
  SPDR = byte;                        //send payload
     9d2:	80 ec       	ldi	r24, 0xC0	; 192
     9d4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d6:	77 9b       	sbis	0x0e, 7	; 14
     9d8:	fe cf       	rjmp	.-4      	; 0x9d6 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9de:	88 60       	ori	r24, 0x08	; 8
     9e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e8:	87 7f       	andi	r24, 0xF7	; 247
     9ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ee:	08 95       	ret

000009f0 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9f0:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9f2:	77 9b       	sbis	0x0e, 7	; 14
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     9f6:	80 e8       	ldi	r24, 0x80	; 128
     9f8:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9fa:	77 9b       	sbis	0x0e, 7	; 14
     9fc:	fe cf       	rjmp	.-4      	; 0x9fa <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a02:	88 60       	ori	r24, 0x08	; 8
     a04:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a08:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0c:	87 7f       	andi	r24, 0xF7	; 247
     a0e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a12:	08 95       	ret

00000a14 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     a14:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a16:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     a18:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a1a:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a1c:	77 9b       	sbis	0x0e, 7	; 14
     a1e:	fe cf       	rjmp	.-4      	; 0xa1c <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     a20:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a22:	77 9b       	sbis	0x0e, 7	; 14
     a24:	fe cf       	rjmp	.-4      	; 0xa22 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a2a:	88 60       	ori	r24, 0x08	; 8
     a2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a34:	87 7f       	andi	r24, 0xF7	; 247
     a36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a3a:	85 ed       	ldi	r24, 0xD5	; 213
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <fill_spaces+0x28>
     a40:	00 00       	nop
     a42:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     a44:	51 f7       	brne	.-44     	; 0xa1a <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     a46:	08 95       	ret

00000a48 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a4c:	77 9b       	sbis	0x0e, 7	; 14
     a4e:	fe cf       	rjmp	.-4      	; 0xa4c <char2lcd+0x4>
  SPDR = byte;                        //send payload
     a50:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a52:	77 9b       	sbis	0x0e, 7	; 14
     a54:	fe cf       	rjmp	.-4      	; 0xa52 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a56:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a5a:	88 60       	ori	r24, 0x08	; 8
     a5c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a60:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a64:	87 7f       	andi	r24, 0xF7	; 247
     a66:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a6a:	08 95       	ret

00000a6c <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     a6c:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a74:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     a76:	df 01       	movw	r26, r30
     a78:	a4 0f       	add	r26, r20
     a7a:	b5 1f       	adc	r27, r21
     a7c:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a7e:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a80:	77 9b       	sbis	0x0e, 7	; 14
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     a84:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a86:	77 9b       	sbis	0x0e, 7	; 14
     a88:	fe cf       	rjmp	.-4      	; 0xa86 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a8a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a8e:	98 60       	ori	r25, 0x08	; 8
     a90:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a94:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a98:	97 7f       	andi	r25, 0xF7	; 247
     a9a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a9e:	85 ed       	ldi	r24, 0xD5	; 213
     aa0:	8a 95       	dec	r24
     aa2:	f1 f7       	brne	.-4      	; 0xaa0 <string2lcd+0x34>
     aa4:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     aa6:	6f 5f       	subi	r22, 0xFF	; 255
     aa8:	46 2f       	mov	r20, r22
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	df 01       	movw	r26, r30
     aae:	0d 90       	ld	r0, X+
     ab0:	00 20       	and	r0, r0
     ab2:	e9 f7       	brne	.-6      	; 0xaae <string2lcd+0x42>
     ab4:	9d 01       	movw	r18, r26
     ab6:	2e 1b       	sub	r18, r30
     ab8:	3f 0b       	sbc	r19, r31
     aba:	22 50       	subi	r18, 0x02	; 2
     abc:	31 09       	sbc	r19, r1
     abe:	24 17       	cp	r18, r20
     ac0:	35 07       	cpc	r19, r21
     ac2:	c8 f6       	brcc	.-78     	; 0xa76 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     ac4:	08 95       	ret

00000ac6 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	99 ef       	ldi	r25, 0xF9	; 249
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	f1 f7       	brne	.-4      	; 0xaca <lcd_init+0x4>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <lcd_init+0xa>
     ad0:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     ad2:	88 e0       	ldi	r24, 0x08	; 8
     ad4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ad8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ada:	77 9b       	sbis	0x0e, 7	; 14
     adc:	fe cf       	rjmp	.-4      	; 0xada <lcd_init+0x14>
  SPDR = byte;                        //send payload
     ade:	80 e3       	ldi	r24, 0x30	; 48
     ae0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ae2:	77 9b       	sbis	0x0e, 7	; 14
     ae4:	fe cf       	rjmp	.-4      	; 0xae2 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ae6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aea:	88 60       	ori	r24, 0x08	; 8
     aec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     af4:	87 7f       	andi	r24, 0xF7	; 247
     af6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     afa:	8f e5       	ldi	r24, 0x5F	; 95
     afc:	9d e6       	ldi	r25, 0x6D	; 109
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <lcd_init+0x38>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <lcd_init+0x3e>
     b04:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b06:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b10:	77 9b       	sbis	0x0e, 7	; 14
     b12:	fe cf       	rjmp	.-4      	; 0xb10 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b14:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b18:	88 60       	ori	r24, 0x08	; 8
     b1a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b22:	87 7f       	andi	r24, 0xF7	; 247
     b24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b28:	8f e5       	ldi	r24, 0x5F	; 95
     b2a:	9d e6       	ldi	r25, 0x6D	; 109
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <lcd_init+0x66>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <lcd_init+0x6c>
     b32:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b34:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b36:	77 9b       	sbis	0x0e, 7	; 14
     b38:	fe cf       	rjmp	.-4      	; 0xb36 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     b3a:	80 e3       	ldi	r24, 0x30	; 48
     b3c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b3e:	77 9b       	sbis	0x0e, 7	; 14
     b40:	fe cf       	rjmp	.-4      	; 0xb3e <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b42:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b46:	88 60       	ori	r24, 0x08	; 8
     b48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b50:	87 7f       	andi	r24, 0xF7	; 247
     b52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b56:	8f e5       	ldi	r24, 0x5F	; 95
     b58:	9d e6       	ldi	r25, 0x6D	; 109
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <lcd_init+0x94>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <lcd_init+0x9a>
     b60:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b62:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b64:	77 9b       	sbis	0x0e, 7	; 14
     b66:	fe cf       	rjmp	.-4      	; 0xb64 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     b68:	88 e3       	ldi	r24, 0x38	; 56
     b6a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b6c:	77 9b       	sbis	0x0e, 7	; 14
     b6e:	fe cf       	rjmp	.-4      	; 0xb6c <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b70:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b7e:	87 7f       	andi	r24, 0xF7	; 247
     b80:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b84:	8f e1       	ldi	r24, 0x1F	; 31
     b86:	9e e4       	ldi	r25, 0x4E	; 78
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	f1 f7       	brne	.-4      	; 0xb88 <lcd_init+0xc2>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <lcd_init+0xc8>
     b8e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b90:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b92:	77 9b       	sbis	0x0e, 7	; 14
     b94:	fe cf       	rjmp	.-4      	; 0xb92 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     b96:	88 e0       	ldi	r24, 0x08	; 8
     b98:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b9a:	77 9b       	sbis	0x0e, 7	; 14
     b9c:	fe cf       	rjmp	.-4      	; 0xb9a <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b9e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba2:	88 60       	ori	r24, 0x08	; 8
     ba4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ba8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bb2:	8f e1       	ldi	r24, 0x1F	; 31
     bb4:	9e e4       	ldi	r25, 0x4E	; 78
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <lcd_init+0xf0>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <lcd_init+0xf6>
     bbc:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bbe:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc0:	77 9b       	sbis	0x0e, 7	; 14
     bc2:	fe cf       	rjmp	.-4      	; 0xbc0 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bc8:	77 9b       	sbis	0x0e, 7	; 14
     bca:	fe cf       	rjmp	.-4      	; 0xbc8 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bcc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd0:	88 60       	ori	r24, 0x08	; 8
     bd2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bd6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bda:	87 7f       	andi	r24, 0xF7	; 247
     bdc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be0:	8f e1       	ldi	r24, 0x1F	; 31
     be2:	9e e4       	ldi	r25, 0x4E	; 78
     be4:	01 97       	sbiw	r24, 0x01	; 1
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <lcd_init+0x11e>
     be8:	00 c0       	rjmp	.+0      	; 0xbea <lcd_init+0x124>
     bea:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bec:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bee:	77 9b       	sbis	0x0e, 7	; 14
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <lcd_init+0x128>
  SPDR = byte;                        //send payload
     bf2:	86 e0       	ldi	r24, 0x06	; 6
     bf4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bf6:	77 9b       	sbis	0x0e, 7	; 14
     bf8:	fe cf       	rjmp	.-4      	; 0xbf6 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     bfa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bfe:	88 60       	ori	r24, 0x08	; 8
     c00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c08:	87 7f       	andi	r24, 0xF7	; 247
     c0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c0e:	8f e1       	ldi	r24, 0x1F	; 31
     c10:	9e e4       	ldi	r25, 0x4E	; 78
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <lcd_init+0x14c>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <lcd_init+0x152>
     c18:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c1a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c1c:	77 9b       	sbis	0x0e, 7	; 14
     c1e:	fe cf       	rjmp	.-4      	; 0xc1c <lcd_init+0x156>
  SPDR = byte;                        //send payload
     c20:	8c e0       	ldi	r24, 0x0C	; 12
     c22:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c24:	77 9b       	sbis	0x0e, 7	; 14
     c26:	fe cf       	rjmp	.-4      	; 0xc24 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c2c:	88 60       	ori	r24, 0x08	; 8
     c2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c32:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c36:	87 7f       	andi	r24, 0xF7	; 247
     c38:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c3c:	8f e1       	ldi	r24, 0x1F	; 31
     c3e:	9e e4       	ldi	r25, 0x4E	; 78
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	f1 f7       	brne	.-4      	; 0xc40 <lcd_init+0x17a>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <lcd_init+0x180>
     c46:	00 00       	nop
     c48:	08 95       	ret

00000c4a <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     c4a:	4f 92       	push	r4
     c4c:	5f 92       	push	r5
     c4e:	6f 92       	push	r6
     c50:	7f 92       	push	r7
     c52:	8f 92       	push	r8
     c54:	9f 92       	push	r9
     c56:	af 92       	push	r10
     c58:	bf 92       	push	r11
     c5a:	cf 92       	push	r12
     c5c:	df 92       	push	r13
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	69 97       	sbiw	r28, 0x19	; 25
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	14 2f       	mov	r17, r20
     c7c:	42 2e       	mov	r4, r18
     c7e:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     c80:	00 23       	and	r16, r16
     c82:	79 f0       	breq	.+30     	; 0xca2 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	cc 24       	eor	r12, r12
     c8a:	f7 fc       	sbrc	r15, 7
     c8c:	c3 94       	inc	r12
     c8e:	dd 24       	eor	r13, r13
     c90:	ee 24       	eor	r14, r14
     c92:	ff 24       	eor	r15, r15
     c94:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     c96:	6b 01       	movw	r12, r22
     c98:	7c 01       	movw	r14, r24
     c9a:	97 fd       	sbrc	r25, 7
     c9c:	a3 c0       	rjmp	.+326    	; 0xde4 <lcd_int32+0x19a>
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     ca2:	44 20       	and	r4, r4
     ca4:	09 f4       	brne	.+2      	; 0xca8 <lcd_int32+0x5e>
     ca6:	96 c0       	rjmp	.+300    	; 0xdd4 <lcd_int32+0x18a>
     ca8:	9e 01       	movw	r18, r28
     caa:	2f 5f       	subi	r18, 0xFF	; 255
     cac:	3f 4f       	sbci	r19, 0xFF	; 255
     cae:	59 01       	movw	r10, r18
     cb0:	49 01       	movw	r8, r18
     cb2:	66 24       	eor	r6, r6
     cb4:	6a 94       	dec	r6
     cb6:	64 0c       	add	r6, r4
     cb8:	71 2c       	mov	r7, r1
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	63 1a       	sub	r6, r19
     cbe:	73 0a       	sbc	r7, r19
     cc0:	6a 0c       	add	r6, r10
     cc2:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     cc4:	2a e0       	ldi	r18, 0x0A	; 10
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	0e 94 8d 08 	call	0x111a	; 0x111a <__divmodsi4>
     cd0:	e6 2f       	mov	r30, r22
     cd2:	2a 8b       	std	Y+18, r18	; 0x12
     cd4:	3b 8b       	std	Y+19, r19	; 0x13
     cd6:	4c 8b       	std	Y+20, r20	; 0x14
     cd8:	5d 8b       	std	Y+21, r21	; 0x15
     cda:	6a 89       	ldd	r22, Y+18	; 0x12
     cdc:	7b 89       	ldd	r23, Y+19	; 0x13
     cde:	8c 89       	ldd	r24, Y+20	; 0x14
     ce0:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     ce2:	20 e3       	ldi	r18, 0x30	; 48
     ce4:	2e 0f       	add	r18, r30
     ce6:	f4 01       	movw	r30, r8
     ce8:	21 93       	st	Z+, r18
     cea:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     cec:	6e 16       	cp	r6, r30
     cee:	7f 06       	cpc	r7, r31
     cf0:	49 f7       	brne	.-46     	; 0xcc4 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     cf2:	99 24       	eor	r9, r9
     cf4:	93 94       	inc	r9
     cf6:	94 0c       	add	r9, r4
     cf8:	f5 01       	movw	r30, r10
     cfa:	e4 0d       	add	r30, r4
     cfc:	f1 1d       	adc	r31, r1
     cfe:	2e e2       	ldi	r18, 0x2E	; 46
     d00:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     d02:	2a e0       	ldi	r18, 0x0A	; 10
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	0e 94 8d 08 	call	0x111a	; 0x111a <__divmodsi4>
     d0e:	e6 2f       	mov	r30, r22
     d10:	2a 8b       	std	Y+18, r18	; 0x12
     d12:	3b 8b       	std	Y+19, r19	; 0x13
     d14:	4c 8b       	std	Y+20, r20	; 0x14
     d16:	5d 8b       	std	Y+21, r21	; 0x15
     d18:	6e 8b       	std	Y+22, r22	; 0x16
     d1a:	7f 8b       	std	Y+23, r23	; 0x17
     d1c:	88 8f       	std	Y+24, r24	; 0x18
     d1e:	99 8f       	std	Y+25, r25	; 0x19
     d20:	6a 89       	ldd	r22, Y+18	; 0x12
     d22:	7b 89       	ldd	r23, Y+19	; 0x13
     d24:	8c 89       	ldd	r24, Y+20	; 0x14
     d26:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     d28:	31 e0       	ldi	r19, 0x01	; 1
     d2a:	39 0d       	add	r19, r9
     d2c:	d5 01       	movw	r26, r10
     d2e:	a9 0d       	add	r26, r9
     d30:	b1 1d       	adc	r27, r1
     d32:	e0 5d       	subi	r30, 0xD0	; 208
     d34:	ec 93       	st	X, r30
     d36:	93 2e       	mov	r9, r19
        }while(qr.quot);
     d38:	61 15       	cp	r22, r1
     d3a:	71 05       	cpc	r23, r1
     d3c:	81 05       	cpc	r24, r1
     d3e:	91 05       	cpc	r25, r1
     d40:	01 f7       	brne	.-64     	; 0xd02 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     d42:	11 23       	and	r17, r17
     d44:	61 f0       	breq	.+24     	; 0xd5e <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     d46:	51 10       	cpse	r5, r1
     d48:	4b c0       	rjmp	.+150    	; 0xde0 <lcd_int32+0x196>
     d4a:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     d4c:	31 17       	cp	r19, r17
     d4e:	38 f4       	brcc	.+14     	; 0xd5e <lcd_int32+0x114>
     d50:	f5 01       	movw	r30, r10
     d52:	e3 0f       	add	r30, r19
     d54:	f1 1d       	adc	r31, r1
     d56:	90 83       	st	Z, r25
     d58:	3f 5f       	subi	r19, 0xFF	; 255
     d5a:	13 13       	cpse	r17, r19
     d5c:	f9 cf       	rjmp	.-14     	; 0xd50 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     d5e:	00 23       	and	r16, r16
     d60:	31 f0       	breq	.+12     	; 0xd6e <lcd_int32+0x124>
     d62:	f5 01       	movw	r30, r10
     d64:	e3 0f       	add	r30, r19
     d66:	f1 1d       	adc	r31, r1
     d68:	9d e2       	ldi	r25, 0x2D	; 45
     d6a:	90 83       	st	Z, r25
     d6c:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d6e:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     d70:	31 50       	subi	r19, 0x01	; 1
     d72:	f5 01       	movw	r30, r10
     d74:	e3 0f       	add	r30, r19
     d76:	f1 1d       	adc	r31, r1
     d78:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d7a:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d7c:	77 9b       	sbis	0x0e, 7	; 14
     d7e:	fe cf       	rjmp	.-4      	; 0xd7c <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     d80:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d82:	77 9b       	sbis	0x0e, 7	; 14
     d84:	fe cf       	rjmp	.-4      	; 0xd82 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d86:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d8a:	98 60       	ori	r25, 0x08	; 8
     d8c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d90:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d94:	97 7f       	andi	r25, 0xF7	; 247
     d96:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d9a:	85 ed       	ldi	r24, 0xD5	; 213
     d9c:	8a 95       	dec	r24
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <lcd_int32+0x152>
     da0:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     da2:	31 11       	cpse	r19, r1
     da4:	e5 cf       	rjmp	.-54     	; 0xd70 <lcd_int32+0x126>

}
     da6:	69 96       	adiw	r28, 0x19	; 25
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	cf 90       	pop	r12
     dc2:	bf 90       	pop	r11
     dc4:	af 90       	pop	r10
     dc6:	9f 90       	pop	r9
     dc8:	8f 90       	pop	r8
     dca:	7f 90       	pop	r7
     dcc:	6f 90       	pop	r6
     dce:	5f 90       	pop	r5
     dd0:	4f 90       	pop	r4
     dd2:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     dd4:	91 2c       	mov	r9, r1
     dd6:	9e 01       	movw	r18, r28
     dd8:	2f 5f       	subi	r18, 0xFF	; 255
     dda:	3f 4f       	sbci	r19, 0xFF	; 255
     ddc:	59 01       	movw	r10, r18
     dde:	91 cf       	rjmp	.-222    	; 0xd02 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     de0:	90 e3       	ldi	r25, 0x30	; 48
     de2:	b4 cf       	rjmp	.-152    	; 0xd4c <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     de4:	f0 94       	com	r15
     de6:	e0 94       	com	r14
     de8:	d0 94       	com	r13
     dea:	c0 94       	com	r12
     dec:	c1 1c       	adc	r12, r1
     dee:	d1 1c       	adc	r13, r1
     df0:	e1 1c       	adc	r14, r1
     df2:	f1 1c       	adc	r15, r1
     df4:	54 cf       	rjmp	.-344    	; 0xc9e <lcd_int32+0x54>

00000df6 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
     df6:	5f 92       	push	r5
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	61 97       	sbiw	r28, 0x11	; 17
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	5c 01       	movw	r10, r24
     e26:	96 2e       	mov	r9, r22
     e28:	54 2e       	mov	r5, r20
     e2a:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     e2c:	8b 2c       	mov	r8, r11
     e2e:	88 1c       	adc	r8, r8
     e30:	88 24       	eor	r8, r8
     e32:	88 1c       	adc	r8, r8
     e34:	78 2c       	mov	r7, r8
     e36:	9c 01       	movw	r18, r24
     e38:	97 fd       	sbrc	r25, 7
     e3a:	9d c0       	rjmp	.+314    	; 0xf76 <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
     e3c:	55 20       	and	r5, r5
     e3e:	09 f4       	brne	.+2      	; 0xe42 <lcd_int16+0x4c>
     e40:	8e c0       	rjmp	.+284    	; 0xf5e <lcd_int16+0x168>
     e42:	8e 01       	movw	r16, r28
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	78 01       	movw	r14, r16
     e4a:	cc 24       	eor	r12, r12
     e4c:	ca 94       	dec	r12
     e4e:	c5 0c       	add	r12, r5
     e50:	d1 2c       	mov	r13, r1
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	c8 1a       	sub	r12, r24
     e56:	d8 0a       	sbc	r13, r24
     e58:	c0 0e       	add	r12, r16
     e5a:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     e5c:	6a e0       	ldi	r22, 0x0A	; 10
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	c9 01       	movw	r24, r18
     e62:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__divmodhi4>
     e66:	46 2f       	mov	r20, r22
     e68:	24 2f       	mov	r18, r20
     e6a:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     e6c:	80 5d       	subi	r24, 0xD0	; 208
     e6e:	f7 01       	movw	r30, r14
     e70:	81 93       	st	Z+, r24
     e72:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     e74:	ec 15       	cp	r30, r12
     e76:	fd 05       	cpc	r31, r13
     e78:	89 f7       	brne	.-30     	; 0xe5c <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     e7a:	ff 24       	eor	r15, r15
     e7c:	f3 94       	inc	r15
     e7e:	f5 0c       	add	r15, r5
     e80:	f8 01       	movw	r30, r16
     e82:	e5 0d       	add	r30, r5
     e84:	f1 1d       	adc	r31, r1
     e86:	8e e2       	ldi	r24, 0x2E	; 46
     e88:	80 83       	st	Z, r24
     e8a:	01 c0       	rjmp	.+2      	; 0xe8e <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     e8c:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     e8e:	6a e0       	ldi	r22, 0x0A	; 10
     e90:	70 e0       	ldi	r23, 0x00	; 0
     e92:	c9 01       	movw	r24, r18
     e94:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__divmodhi4>
     e98:	46 2f       	mov	r20, r22
     e9a:	24 2f       	mov	r18, r20
     e9c:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	9f 0d       	add	r25, r15
     ea2:	f8 01       	movw	r30, r16
     ea4:	ef 0d       	add	r30, r15
     ea6:	f1 1d       	adc	r31, r1
     ea8:	80 5d       	subi	r24, 0xD0	; 208
     eaa:	80 83       	st	Z, r24
        }
        while(qr.quot);
     eac:	21 15       	cp	r18, r1
     eae:	31 05       	cpc	r19, r1
     eb0:	69 f7       	brne	.-38     	; 0xe8c <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     eb2:	61 10       	cpse	r6, r1
     eb4:	59 c0       	rjmp	.+178    	; 0xf68 <lcd_int16+0x172>
     eb6:	b7 fc       	sbrc	r11, 7
     eb8:	63 c0       	rjmp	.+198    	; 0xf80 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     eba:	99 20       	and	r9, r9
     ebc:	b1 f0       	breq	.+44     	; 0xeea <lcd_int16+0xf4>
     ebe:	68 2d       	mov	r22, r8
     ec0:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     ec2:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     ec4:	29 2f       	mov	r18, r25
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	49 2d       	mov	r20, r9
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	46 1b       	sub	r20, r22
     ece:	57 0b       	sbc	r21, r23
     ed0:	24 17       	cp	r18, r20
     ed2:	35 07       	cpc	r19, r21
     ed4:	54 f4       	brge	.+20     	; 0xeea <lcd_int16+0xf4>
     ed6:	9f 5f       	subi	r25, 0xFF	; 255
     ed8:	f8 01       	movw	r30, r16
     eda:	e2 0f       	add	r30, r18
     edc:	f3 1f       	adc	r31, r19
     ede:	80 83       	st	Z, r24
     ee0:	29 2f       	mov	r18, r25
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	24 17       	cp	r18, r20
     ee6:	35 07       	cpc	r19, r21
     ee8:	b4 f3       	brlt	.-20     	; 0xed6 <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     eea:	77 20       	and	r7, r7
     eec:	31 f0       	breq	.+12     	; 0xefa <lcd_int16+0x104>
     eee:	f8 01       	movw	r30, r16
     ef0:	e9 0f       	add	r30, r25
     ef2:	f1 1d       	adc	r31, r1
     ef4:	8d e2       	ldi	r24, 0x2D	; 45
     ef6:	80 83       	st	Z, r24
     ef8:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     efa:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     efc:	91 50       	subi	r25, 0x01	; 1
     efe:	f8 01       	movw	r30, r16
     f00:	e9 0f       	add	r30, r25
     f02:	f1 1d       	adc	r31, r1
     f04:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     f06:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f08:	77 9b       	sbis	0x0e, 7	; 14
     f0a:	fe cf       	rjmp	.-4      	; 0xf08 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     f0c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     f0e:	77 9b       	sbis	0x0e, 7	; 14
     f10:	fe cf       	rjmp	.-4      	; 0xf0e <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     f12:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f16:	88 60       	ori	r24, 0x08	; 8
     f18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f20:	87 7f       	andi	r24, 0xF7	; 247
     f22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     f26:	f5 ed       	ldi	r31, 0xD5	; 213
     f28:	fa 95       	dec	r31
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <lcd_int16+0x132>
     f2c:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     f2e:	91 11       	cpse	r25, r1
     f30:	e5 cf       	rjmp	.-54     	; 0xefc <lcd_int16+0x106>
}
     f32:	61 96       	adiw	r28, 0x11	; 17
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	7f 90       	pop	r7
     f58:	6f 90       	pop	r6
     f5a:	5f 90       	pop	r5
     f5c:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     f5e:	f1 2c       	mov	r15, r1
     f60:	8e 01       	movw	r16, r28
     f62:	0f 5f       	subi	r16, 0xFF	; 255
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	93 cf       	rjmp	.-218    	; 0xe8e <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     f68:	99 20       	and	r9, r9
     f6a:	09 f4       	brne	.+2      	; 0xf6e <lcd_int16+0x178>
     f6c:	be cf       	rjmp	.-132    	; 0xeea <lcd_int16+0xf4>
     f6e:	68 2d       	mov	r22, r8
     f70:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     f72:	80 e3       	ldi	r24, 0x30	; 48
     f74:	a7 cf       	rjmp	.-178    	; 0xec4 <lcd_int16+0xce>
     f76:	22 27       	eor	r18, r18
     f78:	33 27       	eor	r19, r19
     f7a:	28 1b       	sub	r18, r24
     f7c:	39 0b       	sbc	r19, r25
     f7e:	5e cf       	rjmp	.-324    	; 0xe3c <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     f80:	f3 94       	inc	r15
     f82:	f3 94       	inc	r15
     f84:	f8 01       	movw	r30, r16
     f86:	e9 0f       	add	r30, r25
     f88:	f1 1d       	adc	r31, r1
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     f8e:	99 20       	and	r9, r9
     f90:	59 f0       	breq	.+22     	; 0xfa8 <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     f92:	2f 2d       	mov	r18, r15
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	49 2d       	mov	r20, r9
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	24 17       	cp	r18, r20
     f9c:	35 07       	cpc	r19, r21
     f9e:	24 f4       	brge	.+8      	; 0xfa8 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     fa0:	9f 2d       	mov	r25, r15
                bSigned = 0;
     fa2:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	97 cf       	rjmp	.-210    	; 0xed6 <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     fa8:	9f 2d       	mov	r25, r15
     faa:	a7 cf       	rjmp	.-178    	; 0xefa <lcd_int16+0x104>

00000fac <main>:
// lab4 functions
void segclock();

int main()
{
    DDRB = 0xF0; //set port B bits 4-7 B as outputs
     fac:	80 ef       	ldi	r24, 0xF0	; 240
     fae:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
     fb0:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
     fb2:	81 b3       	in	r24, 0x11	; 17
     fb4:	8c 60       	ori	r24, 0x0C	; 12
     fb6:	81 bb       	out	0x11, r24	; 17

    PORTB &= ~(1 << PORTB7); 
     fb8:	c7 98       	cbi	0x18, 7	; 24
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
     fba:	80 b7       	in	r24, 0x30	; 48
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
     fc0:	87 b7       	in	r24, 0x37	; 55
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
     fc6:	83 b7       	in	r24, 0x33	; 51
     fc8:	81 60       	ori	r24, 0x01	; 1
     fca:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
     fcc:	87 b3       	in	r24, 0x17	; 23
     fce:	87 60       	ori	r24, 0x07	; 7
     fd0:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
     fd2:	8d b1       	in	r24, 0x0d	; 13
     fd4:	80 65       	ori	r24, 0x50	; 80
     fd6:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
     fd8:	70 9a       	sbi	0x0e, 0	; 14

    PORTB &= ~(1 << PORTB7); 

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
     fda:	78 94       	sei
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
     fdc:	80 ec       	ldi	r24, 0xC0	; 192
     fde:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <dec_to_7seg>
    dec_to_7seg[1] = ~(ONE);
     fe2:	89 ef       	ldi	r24, 0xF9	; 249
     fe4:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dec_to_7seg+0x1>
    dec_to_7seg[2] = ~(TWO);
     fe8:	84 ea       	ldi	r24, 0xA4	; 164
     fea:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <dec_to_7seg+0x2>
    dec_to_7seg[3] = ~(THREE);
     fee:	80 eb       	ldi	r24, 0xB0	; 176
     ff0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dec_to_7seg+0x3>
    dec_to_7seg[4] = ~(FOUR);
     ff4:	89 e9       	ldi	r24, 0x99	; 153
     ff6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <dec_to_7seg+0x4>
    dec_to_7seg[5] = ~(FIVE);
     ffa:	82 e9       	ldi	r24, 0x92	; 146
     ffc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dec_to_7seg+0x5>
    dec_to_7seg[6] = ~(SIX);
    1000:	82 e8       	ldi	r24, 0x82	; 130
    1002:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <dec_to_7seg+0x6>
    dec_to_7seg[7] = ~(SEVEN);
    1006:	88 ef       	ldi	r24, 0xF8	; 248
    1008:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dec_to_7seg+0x7>
    dec_to_7seg[8] = ~(EIGHT);
    100c:	80 e8       	ldi	r24, 0x80	; 128
    100e:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <dec_to_7seg+0x8>
    dec_to_7seg[9] = ~(NINE);
    1012:	88 e9       	ldi	r24, 0x98	; 152
    1014:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <dec_to_7seg+0x9>
    dec_to_7seg[10] = ~(COLON);
    1018:	8c ef       	ldi	r24, 0xFC	; 252
    101a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <dec_to_7seg+0xa>
    dec_to_7seg[11] = ~(BLANK);
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <dec_to_7seg+0xb>
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
    1024:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <decoder>
    decoder[1] = DIGIT3;
    1028:	80 e1       	ldi	r24, 0x10	; 16
    102a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <decoder+0x1>
    decoder[2] = DIS_COLON;
    102e:	80 e2       	ldi	r24, 0x20	; 32
    1030:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <decoder+0x2>
    decoder[3] = DIGIT2;
    1034:	80 e3       	ldi	r24, 0x30	; 48
    1036:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <decoder+0x3>
    decoder[4] = DIGIT1;
    103a:	80 e4       	ldi	r24, 0x40	; 64
    103c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <decoder+0x4>
    decoder[7] = TRI_BUFFER;
    1040:	80 e7       	ldi	r24, 0x70	; 112
    1042:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <decoder+0x7>
//takes two 8-bit binary values(hours and minutes) and places the appropriate 
//equivalent 4 digit.
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    1046:	2d ec       	ldi	r18, 0xCD	; 205
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    1048:	3f ef       	ldi	r19, 0xFF	; 255

    while (1)
    {

        // spi 
        PORTD |= 1 << PORTD3; // clock_inh = 1
    104a:	93 9a       	sbi	0x12, 3	; 18
        PORTE &= 0 << PORTE6; // load sh/ld
    104c:	83 b1       	in	r24, 0x03	; 3
    104e:	13 b8       	out	0x03, r1	; 3

        PORTE |= 1 << PORTE6; // sh/ld
    1050:	1e 9a       	sbi	0x03, 6	; 3
        PORTD &= ~(1 << PORTD3); // clock_inh
    1052:	93 98       	cbi	0x12, 3	; 18

        SPDR = 0; // writing a random value
    1054:	1f b8       	out	0x0f, r1	; 15
       
        while (bit_is_clear(SPSR,SPIF)){}
    1056:	77 9b       	sbis	0x0e, 7	; 14
    1058:	fe cf       	rjmp	.-4      	; 0x1056 <__DATA_REGION_LENGTH__+0x56>
        data = SPDR; // read data
    105a:	8f b1       	in	r24, 0x0f	; 15
    105c:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <data>
//                                  barGraph
// Set the mode on the bar graph. 
/******************************************************************************/
void barGraph(){
    
    SPDR = barGraphDisplay;
    1060:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <barGraphDisplay>
    1064:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
    1066:	77 9b       	sbis	0x0e, 7	; 14
    1068:	fe cf       	rjmp	.-4      	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
    106a:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
    106c:	82 b3       	in	r24, 0x12	; 18
    106e:	12 ba       	out	0x12, r1	; 18
//takes two 8-bit binary values(hours and minutes) and places the appropriate 
//equivalent 4 digit.
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    1070:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <minutes>
    1074:	92 9f       	mul	r25, r18
    1076:	81 2d       	mov	r24, r1
    1078:	11 24       	eor	r1, r1
    107a:	86 95       	lsr	r24
    107c:	86 95       	lsr	r24
    107e:	86 95       	lsr	r24
    1080:	4a e0       	ldi	r20, 0x0A	; 10
    1082:	84 9f       	mul	r24, r20
    1084:	90 19       	sub	r25, r0
    1086:	11 24       	eor	r1, r1
    1088:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <segment_data>
    segment_data[1] = minutes / 10;
    108c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <segment_data+0x1>
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
    1090:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <colonDisplay>
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	59 f1       	breq	.+86     	; 0x10ee <__DATA_REGION_LENGTH__+0xee>
    1098:	8b e0       	ldi	r24, 0x0B	; 11
    109a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <segment_data+0x2>
    segment_data[3] = hours % 10;
    109e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <hours>
    10a2:	92 9f       	mul	r25, r18
    10a4:	81 2d       	mov	r24, r1
    10a6:	11 24       	eor	r1, r1
    10a8:	86 95       	lsr	r24
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	4a e0       	ldi	r20, 0x0A	; 10
    10b0:	84 9f       	mul	r24, r20
    10b2:	90 19       	sub	r25, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <segment_data+0x3>
    segment_data[4] = hours / 10;
    10ba:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <segment_data+0x4>
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    10be:	3a bb       	out	0x1a, r19	; 26
    10c0:	a1 e2       	ldi	r26, 0x21	; 33
    10c2:	b1 e0       	ldi	r27, 0x01	; 1
    10c4:	c5 e3       	ldi	r28, 0x35	; 53
    10c6:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
    10c8:	8d 91       	ld	r24, X+
    10ca:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
    10cc:	e9 91       	ld	r30, Y+
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	e7 5d       	subi	r30, 0xD7	; 215
    10d2:	fe 4f       	sbci	r31, 0xFE	; 254
    10d4:	80 81       	ld	r24, Z
    10d6:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d8:	8f ec       	ldi	r24, 0xCF	; 207
    10da:	97 e0       	ldi	r25, 0x07	; 7
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <__DATA_REGION_LENGTH__+0xdc>
    10e0:	00 c0       	rjmp	.+0      	; 0x10e2 <__DATA_REGION_LENGTH__+0xe2>
    10e2:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	a6 32       	cpi	r26, 0x26	; 38
    10e8:	b9 07       	cpc	r27, r25
    10ea:	71 f7       	brne	.-36     	; 0x10c8 <__DATA_REGION_LENGTH__+0xc8>
    10ec:	ae cf       	rjmp	.-164    	; 0x104a <__DATA_REGION_LENGTH__+0x4a>
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    segment_data[1] = minutes / 10;
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
    10ee:	8a e0       	ldi	r24, 0x0A	; 10
    10f0:	d4 cf       	rjmp	.-88     	; 0x109a <__DATA_REGION_LENGTH__+0x9a>

000010f2 <__divmodhi4>:
    10f2:	97 fb       	bst	r25, 7
    10f4:	07 2e       	mov	r0, r23
    10f6:	16 f4       	brtc	.+4      	; 0x10fc <__divmodhi4+0xa>
    10f8:	00 94       	com	r0
    10fa:	07 d0       	rcall	.+14     	; 0x110a <__divmodhi4_neg1>
    10fc:	77 fd       	sbrc	r23, 7
    10fe:	09 d0       	rcall	.+18     	; 0x1112 <__divmodhi4_neg2>
    1100:	0e 94 bb 08 	call	0x1176	; 0x1176 <__udivmodhi4>
    1104:	07 fc       	sbrc	r0, 7
    1106:	05 d0       	rcall	.+10     	; 0x1112 <__divmodhi4_neg2>
    1108:	3e f4       	brtc	.+14     	; 0x1118 <__divmodhi4_exit>

0000110a <__divmodhi4_neg1>:
    110a:	90 95       	com	r25
    110c:	81 95       	neg	r24
    110e:	9f 4f       	sbci	r25, 0xFF	; 255
    1110:	08 95       	ret

00001112 <__divmodhi4_neg2>:
    1112:	70 95       	com	r23
    1114:	61 95       	neg	r22
    1116:	7f 4f       	sbci	r23, 0xFF	; 255

00001118 <__divmodhi4_exit>:
    1118:	08 95       	ret

0000111a <__divmodsi4>:
    111a:	05 2e       	mov	r0, r21
    111c:	97 fb       	bst	r25, 7
    111e:	1e f4       	brtc	.+6      	; 0x1126 <__divmodsi4+0xc>
    1120:	00 94       	com	r0
    1122:	0e 94 a4 08 	call	0x1148	; 0x1148 <__negsi2>
    1126:	57 fd       	sbrc	r21, 7
    1128:	07 d0       	rcall	.+14     	; 0x1138 <__divmodsi4_neg2>
    112a:	0e 94 cf 08 	call	0x119e	; 0x119e <__udivmodsi4>
    112e:	07 fc       	sbrc	r0, 7
    1130:	03 d0       	rcall	.+6      	; 0x1138 <__divmodsi4_neg2>
    1132:	4e f4       	brtc	.+18     	; 0x1146 <__divmodsi4_exit>
    1134:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__negsi2>

00001138 <__divmodsi4_neg2>:
    1138:	50 95       	com	r21
    113a:	40 95       	com	r20
    113c:	30 95       	com	r19
    113e:	21 95       	neg	r18
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	4f 4f       	sbci	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255

00001146 <__divmodsi4_exit>:
    1146:	08 95       	ret

00001148 <__negsi2>:
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__umulhisi3>:
    1158:	a2 9f       	mul	r26, r18
    115a:	b0 01       	movw	r22, r0
    115c:	b3 9f       	mul	r27, r19
    115e:	c0 01       	movw	r24, r0
    1160:	a3 9f       	mul	r26, r19
    1162:	70 0d       	add	r23, r0
    1164:	81 1d       	adc	r24, r1
    1166:	11 24       	eor	r1, r1
    1168:	91 1d       	adc	r25, r1
    116a:	b2 9f       	mul	r27, r18
    116c:	70 0d       	add	r23, r0
    116e:	81 1d       	adc	r24, r1
    1170:	11 24       	eor	r1, r1
    1172:	91 1d       	adc	r25, r1
    1174:	08 95       	ret

00001176 <__udivmodhi4>:
    1176:	aa 1b       	sub	r26, r26
    1178:	bb 1b       	sub	r27, r27
    117a:	51 e1       	ldi	r21, 0x11	; 17
    117c:	07 c0       	rjmp	.+14     	; 0x118c <__udivmodhi4_ep>

0000117e <__udivmodhi4_loop>:
    117e:	aa 1f       	adc	r26, r26
    1180:	bb 1f       	adc	r27, r27
    1182:	a6 17       	cp	r26, r22
    1184:	b7 07       	cpc	r27, r23
    1186:	10 f0       	brcs	.+4      	; 0x118c <__udivmodhi4_ep>
    1188:	a6 1b       	sub	r26, r22
    118a:	b7 0b       	sbc	r27, r23

0000118c <__udivmodhi4_ep>:
    118c:	88 1f       	adc	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	5a 95       	dec	r21
    1192:	a9 f7       	brne	.-22     	; 0x117e <__udivmodhi4_loop>
    1194:	80 95       	com	r24
    1196:	90 95       	com	r25
    1198:	bc 01       	movw	r22, r24
    119a:	cd 01       	movw	r24, r26
    119c:	08 95       	ret

0000119e <__udivmodsi4>:
    119e:	a1 e2       	ldi	r26, 0x21	; 33
    11a0:	1a 2e       	mov	r1, r26
    11a2:	aa 1b       	sub	r26, r26
    11a4:	bb 1b       	sub	r27, r27
    11a6:	fd 01       	movw	r30, r26
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <__udivmodsi4_ep>

000011aa <__udivmodsi4_loop>:
    11aa:	aa 1f       	adc	r26, r26
    11ac:	bb 1f       	adc	r27, r27
    11ae:	ee 1f       	adc	r30, r30
    11b0:	ff 1f       	adc	r31, r31
    11b2:	a2 17       	cp	r26, r18
    11b4:	b3 07       	cpc	r27, r19
    11b6:	e4 07       	cpc	r30, r20
    11b8:	f5 07       	cpc	r31, r21
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__udivmodsi4_ep>
    11bc:	a2 1b       	sub	r26, r18
    11be:	b3 0b       	sbc	r27, r19
    11c0:	e4 0b       	sbc	r30, r20
    11c2:	f5 0b       	sbc	r31, r21

000011c4 <__udivmodsi4_ep>:
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	1a 94       	dec	r1
    11ce:	69 f7       	brne	.-38     	; 0x11aa <__udivmodsi4_loop>
    11d0:	60 95       	com	r22
    11d2:	70 95       	com	r23
    11d4:	80 95       	com	r24
    11d6:	90 95       	com	r25
    11d8:	9b 01       	movw	r18, r22
    11da:	ac 01       	movw	r20, r24
    11dc:	bd 01       	movw	r22, r26
    11de:	cf 01       	movw	r24, r30
    11e0:	08 95       	ret

000011e2 <_exit>:
    11e2:	f8 94       	cli

000011e4 <__stop_program>:
    11e4:	ff cf       	rjmp	.-2      	; 0x11e4 <__stop_program>
