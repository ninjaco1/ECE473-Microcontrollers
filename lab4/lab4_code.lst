
lab4_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000012ec  00001380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800116  00800116  00001396  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001396  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020c6  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d44  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fea  00000000  00000000  00004256  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00005240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000692  00000000  00000000  000055cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b72  00000000  00000000  00005c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000077d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ee       	ldi	r30, 0xEC	; 236
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 38       	cpi	r26, 0x80	; 128
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 55 08 	call	0x10aa	; 0x10aa <main>
      c6:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_dec_to_7seg>:
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
      ce:	ef e3       	ldi	r30, 0x3F	; 63
      d0:	f1 e0       	ldi	r31, 0x01	; 1
      d2:	80 ec       	ldi	r24, 0xC0	; 192
      d4:	80 83       	st	Z, r24
    dec_to_7seg[1] = ~(ONE);
      d6:	89 ef       	ldi	r24, 0xF9	; 249
      d8:	81 83       	std	Z+1, r24	; 0x01
    dec_to_7seg[2] = ~(TWO);
      da:	84 ea       	ldi	r24, 0xA4	; 164
      dc:	82 83       	std	Z+2, r24	; 0x02
    dec_to_7seg[3] = ~(THREE);
      de:	80 eb       	ldi	r24, 0xB0	; 176
      e0:	83 83       	std	Z+3, r24	; 0x03
    dec_to_7seg[4] = ~(FOUR);
      e2:	89 e9       	ldi	r24, 0x99	; 153
      e4:	84 83       	std	Z+4, r24	; 0x04
    dec_to_7seg[5] = ~(FIVE);
      e6:	82 e9       	ldi	r24, 0x92	; 146
      e8:	85 83       	std	Z+5, r24	; 0x05
    dec_to_7seg[6] = ~(SIX);
      ea:	82 e8       	ldi	r24, 0x82	; 130
      ec:	86 83       	std	Z+6, r24	; 0x06
    dec_to_7seg[7] = ~(SEVEN);
      ee:	88 ef       	ldi	r24, 0xF8	; 248
      f0:	87 83       	std	Z+7, r24	; 0x07
    dec_to_7seg[8] = ~(EIGHT);
      f2:	80 e8       	ldi	r24, 0x80	; 128
      f4:	80 87       	std	Z+8, r24	; 0x08
    dec_to_7seg[9] = ~(NINE);
      f6:	88 e9       	ldi	r24, 0x98	; 152
      f8:	81 87       	std	Z+9, r24	; 0x09
    dec_to_7seg[10] = ~(COLON);
      fa:	8c ef       	ldi	r24, 0xFC	; 252
      fc:	82 87       	std	Z+10, r24	; 0x0a
    dec_to_7seg[11] = ~(BLANK);
      fe:	8f ef       	ldi	r24, 0xFF	; 255
     100:	83 87       	std	Z+11, r24	; 0x0b
     102:	08 95       	ret

00000104 <set_decoder>:
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
     104:	e7 e3       	ldi	r30, 0x37	; 55
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	10 82       	st	Z, r1
    decoder[1] = DIGIT3;
     10a:	80 e1       	ldi	r24, 0x10	; 16
     10c:	81 83       	std	Z+1, r24	; 0x01
    decoder[2] = DIS_COLON;
     10e:	80 e2       	ldi	r24, 0x20	; 32
     110:	82 83       	std	Z+2, r24	; 0x02
    decoder[3] = DIGIT2;
     112:	80 e3       	ldi	r24, 0x30	; 48
     114:	83 83       	std	Z+3, r24	; 0x03
    decoder[4] = DIGIT1;
     116:	80 e4       	ldi	r24, 0x40	; 64
     118:	84 83       	std	Z+4, r24	; 0x04
    decoder[7] = TRI_BUFFER;
     11a:	80 e7       	ldi	r24, 0x70	; 112
     11c:	87 83       	std	Z+7, r24	; 0x07
     11e:	08 95       	ret

00000120 <chk_buttons>:
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
int8_t chk_buttons(int button)
{
     120:	ac 01       	movw	r20, r24
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
     122:	99 b3       	in	r25, 0x19	; 25
     124:	fa 01       	movw	r30, r20
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	e5 5e       	subi	r30, 0xE5	; 229
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	20 81       	ld	r18, Z
     130:	31 81       	ldd	r19, Z+1	; 0x01
     132:	22 0f       	add	r18, r18
     134:	33 1f       	adc	r19, r19
     136:	30 6e       	ori	r19, 0xE0	; 224
     138:	89 2f       	mov	r24, r25
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	02 c0       	rjmp	.+4      	; 0x142 <chk_buttons+0x22>
     13e:	95 95       	asr	r25
     140:	87 95       	ror	r24
     142:	4a 95       	dec	r20
     144:	e2 f7       	brpl	.-8      	; 0x13e <chk_buttons+0x1e>
     146:	81 70       	andi	r24, 0x01	; 1
     148:	99 27       	eor	r25, r25
     14a:	28 2b       	or	r18, r24
     14c:	39 2b       	or	r19, r25
     14e:	31 83       	std	Z+1, r19	; 0x01
     150:	20 83       	st	Z, r18
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	21 15       	cp	r18, r1
     156:	30 4f       	sbci	r19, 0xF0	; 240
     158:	09 f0       	breq	.+2      	; 0x15c <chk_buttons+0x3c>
     15a:	80 e0       	ldi	r24, 0x00	; 0

    if (state[button] == 0xF000)
        return 1;

    return 0;
}
     15c:	08 95       	ret

0000015e <segsum>:
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum)
{
     15e:	ac 01       	movw	r20, r24
    //break up decimal sum into 4 digit-segments
    //blank out leading zero digits
    //now move data to right place for misplaced colon position
    int i;//, leading_zero;

    segment_data[0] = sum % 10;
     160:	9c 01       	movw	r18, r24
     162:	ad ec       	ldi	r26, 0xCD	; 205
     164:	bc ec       	ldi	r27, 0xCC	; 204
     166:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
     16a:	96 95       	lsr	r25
     16c:	87 95       	ror	r24
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	96 95       	lsr	r25
     174:	87 95       	ror	r24
     176:	9c 01       	movw	r18, r24
     178:	22 0f       	add	r18, r18
     17a:	33 1f       	adc	r19, r19
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	88 0f       	add	r24, r24
     186:	99 1f       	adc	r25, r25
     188:	82 0f       	add	r24, r18
     18a:	93 1f       	adc	r25, r19
     18c:	9a 01       	movw	r18, r20
     18e:	28 1b       	sub	r18, r24
     190:	39 0b       	sbc	r19, r25
     192:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <segment_data>
    segment_data[1] = (sum % 100) / 10;
     196:	9a 01       	movw	r18, r20
     198:	36 95       	lsr	r19
     19a:	27 95       	ror	r18
     19c:	36 95       	lsr	r19
     19e:	27 95       	ror	r18
     1a0:	ab e7       	ldi	r26, 0x7B	; 123
     1a2:	b4 e1       	ldi	r27, 0x14	; 20
     1a4:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
     1a8:	96 95       	lsr	r25
     1aa:	87 95       	ror	r24
     1ac:	64 e6       	ldi	r22, 0x64	; 100
     1ae:	68 9f       	mul	r22, r24
     1b0:	90 01       	movw	r18, r0
     1b2:	69 9f       	mul	r22, r25
     1b4:	30 0d       	add	r19, r0
     1b6:	11 24       	eor	r1, r1
     1b8:	ca 01       	movw	r24, r20
     1ba:	82 1b       	sub	r24, r18
     1bc:	93 0b       	sbc	r25, r19
     1be:	9c 01       	movw	r18, r24
     1c0:	ad ec       	ldi	r26, 0xCD	; 205
     1c2:	bc ec       	ldi	r27, 0xCC	; 204
     1c4:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
     1c8:	96 95       	lsr	r25
     1ca:	87 95       	ror	r24
     1cc:	96 95       	lsr	r25
     1ce:	87 95       	ror	r24
     1d0:	96 95       	lsr	r25
     1d2:	87 95       	ror	r24
     1d4:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <segment_data+0x1>
    // segment_data[2] = 11; // doesn't turn on the colon, blank
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     1d8:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <colonDisplay>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	09 f4       	brne	.+2      	; 0x1e2 <segsum+0x84>
     1e0:	46 c0       	rjmp	.+140    	; 0x26e <segsum+0x110>
     1e2:	8b e0       	ldi	r24, 0x0B	; 11
     1e4:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <segment_data+0x2>
    segment_data[3] = (sum % 1000) / 100;
     1e8:	9a 01       	movw	r18, r20
     1ea:	36 95       	lsr	r19
     1ec:	27 95       	ror	r18
     1ee:	36 95       	lsr	r19
     1f0:	27 95       	ror	r18
     1f2:	36 95       	lsr	r19
     1f4:	27 95       	ror	r18
     1f6:	a5 ec       	ldi	r26, 0xC5	; 197
     1f8:	b0 e2       	ldi	r27, 0x20	; 32
     1fa:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
     1fe:	fc 01       	movw	r30, r24
     200:	f2 95       	swap	r31
     202:	e2 95       	swap	r30
     204:	ef 70       	andi	r30, 0x0F	; 15
     206:	ef 27       	eor	r30, r31
     208:	ff 70       	andi	r31, 0x0F	; 15
     20a:	ef 27       	eor	r30, r31
     20c:	28 ee       	ldi	r18, 0xE8	; 232
     20e:	33 e0       	ldi	r19, 0x03	; 3
     210:	e2 9f       	mul	r30, r18
     212:	c0 01       	movw	r24, r0
     214:	e3 9f       	mul	r30, r19
     216:	90 0d       	add	r25, r0
     218:	f2 9f       	mul	r31, r18
     21a:	90 0d       	add	r25, r0
     21c:	11 24       	eor	r1, r1
     21e:	9a 01       	movw	r18, r20
     220:	28 1b       	sub	r18, r24
     222:	39 0b       	sbc	r19, r25
     224:	36 95       	lsr	r19
     226:	27 95       	ror	r18
     228:	36 95       	lsr	r19
     22a:	27 95       	ror	r18
     22c:	ab e7       	ldi	r26, 0x7B	; 123
     22e:	b4 e1       	ldi	r27, 0x14	; 20
     230:	0e 94 2f 09 	call	0x125e	; 0x125e <__umulhisi3>
     234:	96 95       	lsr	r25
     236:	87 95       	ror	r24
     238:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <segment_data+0x3>
    segment_data[4] = sum / 1000;
     23c:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <segment_data+0x4>
     240:	eb e4       	ldi	r30, 0x4B	; 75
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	90 e0       	ldi	r25, 0x00	; 0
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
            continue;
        if(segment_data[i] == 0)
            segment_data[i] = 11; // replace it with a blank
     248:	3b e0       	ldi	r19, 0x0B	; 11
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	91 05       	cpc	r25, r1
     24e:	31 f0       	breq	.+12     	; 0x25c <segsum+0xfe>
            continue;
        if(segment_data[i] == 0)
     250:	24 81       	ldd	r18, Z+4	; 0x04
     252:	21 11       	cpse	r18, r1
     254:	0b c0       	rjmp	.+22     	; 0x26c <segsum+0x10e>
            segment_data[i] = 11; // replace it with a blank
     256:	34 83       	std	Z+4, r19	; 0x04
    segment_data[3] = (sum % 1000) / 100;
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	41 f0       	breq	.+16     	; 0x26c <segsum+0x10e>
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	31 97       	sbiw	r30, 0x01	; 1
        if(i == 2)
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	91 05       	cpc	r25, r1
     264:	d9 f3       	breq	.-10     	; 0x25c <segsum+0xfe>
            continue;
        if(segment_data[i] == 0)
     266:	24 81       	ldd	r18, Z+4	; 0x04
     268:	22 23       	and	r18, r18
     26a:	a9 f3       	breq	.-22     	; 0x256 <segsum+0xf8>
     26c:	08 95       	ret
    int i;//, leading_zero;

    segment_data[0] = sum % 10;
    segment_data[1] = (sum % 100) / 10;
    // segment_data[2] = 11; // doesn't turn on the colon, blank
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	b9 cf       	rjmp	.-142    	; 0x1e4 <segsum+0x86>

00000272 <segclock>:
//takes two 8-bit binary values(hours and minutes) and places the appropriate 
//equivalent 4 digit.
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
     272:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <minutes>
     276:	8d ec       	ldi	r24, 0xCD	; 205
     278:	98 9f       	mul	r25, r24
     27a:	81 2d       	mov	r24, r1
     27c:	11 24       	eor	r1, r1
     27e:	86 95       	lsr	r24
     280:	86 95       	lsr	r24
     282:	86 95       	lsr	r24
     284:	2a e0       	ldi	r18, 0x0A	; 10
     286:	82 9f       	mul	r24, r18
     288:	90 19       	sub	r25, r0
     28a:	11 24       	eor	r1, r1
     28c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <segment_data>
    segment_data[1] = minutes / 10;
     290:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <segment_data+0x1>
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     294:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <colonDisplay>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	a9 f0       	breq	.+42     	; 0x2c6 <segclock+0x54>
     29c:	8b e0       	ldi	r24, 0x0B	; 11
     29e:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <segment_data+0x2>
    segment_data[3] = hours % 10;
     2a2:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <hours>
     2a6:	8d ec       	ldi	r24, 0xCD	; 205
     2a8:	98 9f       	mul	r25, r24
     2aa:	81 2d       	mov	r24, r1
     2ac:	11 24       	eor	r1, r1
     2ae:	86 95       	lsr	r24
     2b0:	86 95       	lsr	r24
     2b2:	86 95       	lsr	r24
     2b4:	2a e0       	ldi	r18, 0x0A	; 10
     2b6:	82 9f       	mul	r24, r18
     2b8:	90 19       	sub	r25, r0
     2ba:	11 24       	eor	r1, r1
     2bc:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <segment_data+0x3>
    segment_data[4] = hours / 10;
     2c0:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <segment_data+0x4>
     2c4:	08 95       	ret
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    segment_data[1] = minutes / 10;
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
     2c6:	8a e0       	ldi	r24, 0x0A	; 10
     2c8:	ea cf       	rjmp	.-44     	; 0x29e <segclock+0x2c>

000002ca <setDigit>:
// The cases set the value on PORTA to the right segments and PORTB
// to decoder.
/***************************************************************/

void setDigit()
{
     2ca:	cf 93       	push	r28
     2cc:	df 93       	push	r29
    DDRA = 0xFF; // setting PORT A as an output
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	8a bb       	out	0x1a, r24	; 26
     2d2:	a7 e3       	ldi	r26, 0x37	; 55
     2d4:	b1 e0       	ldi	r27, 0x01	; 1
     2d6:	cb e4       	ldi	r28, 0x4B	; 75
     2d8:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
     2da:	8d 91       	ld	r24, X+
     2dc:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
     2de:	e9 91       	ld	r30, Y+
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	e1 5c       	subi	r30, 0xC1	; 193
     2e4:	fe 4f       	sbci	r31, 0xFE	; 254
     2e6:	80 81       	ld	r24, Z
     2e8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ea:	8f ec       	ldi	r24, 0xCF	; 207
     2ec:	97 e0       	ldi	r25, 0x07	; 7
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	f1 f7       	brne	.-4      	; 0x2ee <setDigit+0x24>
     2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <setDigit+0x2a>
     2f4:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	ac 33       	cpi	r26, 0x3C	; 60
     2fa:	b9 07       	cpc	r27, r25
     2fc:	71 f7       	brne	.-36     	; 0x2da <setDigit+0x10>
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
        _delay_ms(0.5);
    }
}
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
     304:	87 b3       	in	r24, 0x17	; 23
     306:	87 60       	ori	r24, 0x07	; 7
     308:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
     30a:	8d b1       	in	r24, 0x0d	; 13
     30c:	80 65       	ori	r24, 0x50	; 80
     30e:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
     310:	70 9a       	sbi	0x0e, 0	; 14
     312:	08 95       	ret

00000314 <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
     314:	80 b7       	in	r24, 0x30	; 48
     316:	88 60       	ori	r24, 0x08	; 8
     318:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
     31a:	87 b7       	in	r24, 0x37	; 55
     31c:	81 60       	ori	r24, 0x01	; 1
     31e:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
     320:	83 b7       	in	r24, 0x33	; 51
     322:	81 60       	ori	r24, 0x01	; 1
     324:	83 bf       	out	0x33, r24	; 51
     326:	08 95       	ret

00000328 <encoderRead>:
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
     328:	61 11       	cpse	r22, r1
     32a:	24 c0       	rjmp	.+72     	; 0x374 <encoderRead+0x4c>
     32c:	a1 e0       	ldi	r26, 0x01	; 1
     32e:	b0 e0       	ldi	r27, 0x00	; 0
     330:	e0 e0       	ldi	r30, 0x00	; 0
     332:	f0 e0       	ldi	r31, 0x00	; 0
    b = (knob == 0) ? 2 : 8; // where the position of b is
     334:	22 e0       	ldi	r18, 0x02	; 2
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
     336:	91 e0       	ldi	r25, 0x01	; 1
    b = (knob == 0) ? 2 : 8; // where the position of b is

    a_index = (knob == 0) ? 0 : 2;
    b_index = (knob == 0) ? 1 : 3;
    
    new_A = (data & a) ? 1 : 0; // most LSB
     338:	98 23       	and	r25, r24
     33a:	31 e0       	ldi	r19, 0x01	; 1
     33c:	09 f4       	brne	.+2      	; 0x340 <encoderRead+0x18>
     33e:	30 e0       	ldi	r19, 0x00	; 0
    new_B = (data & b) ? 1 : 0; // 2nd LSB
     340:	82 23       	and	r24, r18
     342:	21 e0       	ldi	r18, 0x01	; 1
     344:	09 f4       	brne	.+2      	; 0x348 <encoderRead+0x20>
     346:	20 e0       	ldi	r18, 0x00	; 0


    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
     348:	e0 50       	subi	r30, 0x00	; 0
     34a:	ff 4f       	sbci	r31, 0xFF	; 255
     34c:	40 81       	ld	r20, Z
     34e:	a0 50       	subi	r26, 0x00	; 0
     350:	bf 4f       	sbci	r27, 0xFF	; 255
     352:	34 17       	cp	r19, r20
     354:	19 f1       	breq	.+70     	; 0x39c <encoderRead+0x74>
        if((new_A == 0) && (new_B == 0)){
     356:	91 11       	cpse	r25, r1
     358:	14 c0       	rjmp	.+40     	; 0x382 <encoderRead+0x5a>
     35a:	88 23       	and	r24, r24
     35c:	a1 f0       	breq	.+40     	; 0x386 <encoderRead+0x5e>
            else{
                count--;
            }
        }
        else if ((new_A == 0) && (new_B == 1)){
            if (old_state[a_index] == 0){
     35e:	41 11       	cpse	r20, r1
     360:	14 c0       	rjmp	.+40     	; 0x38a <encoderRead+0x62>
    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[a_index] == 1){
                count++;
     362:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count.1886>
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count.1886>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     36c:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
     36e:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
     370:	2c 93       	st	X, r18
     372:	08 95       	ret
     374:	a3 e0       	ldi	r26, 0x03	; 3
     376:	b0 e0       	ldi	r27, 0x00	; 0
     378:	e2 e0       	ldi	r30, 0x02	; 2
     37a:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
    b = (knob == 0) ? 2 : 8; // where the position of b is
     37c:	28 e0       	ldi	r18, 0x08	; 8
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
     37e:	94 e0       	ldi	r25, 0x04	; 4
     380:	db cf       	rjmp	.-74     	; 0x338 <encoderRead+0x10>
            }
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
     382:	81 11       	cpse	r24, r1
     384:	10 c0       	rjmp	.+32     	; 0x3a6 <encoderRead+0x7e>

    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[a_index] == 1){
     386:	41 30       	cpi	r20, 0x01	; 1
     388:	61 f3       	breq	.-40     	; 0x362 <encoderRead+0x3a>
                count++;
            }
            else{
                count--;
     38a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count.1886>
     38e:	81 50       	subi	r24, 0x01	; 1
     390:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count.1886>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     394:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
     396:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
     398:	2c 93       	st	X, r18
     39a:	08 95       	ret
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
     39c:	5c 91       	ld	r21, X
     39e:	25 13       	cpse	r18, r21
     3a0:	da cf       	rjmp	.-76     	; 0x356 <encoderRead+0x2e>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     3a2:	8f ef       	ldi	r24, 0xFF	; 255
        old_state[b_index] = new_B;

    } // if changed occured
    // if return value is still -1 then nothing happen
    return (return_val); // return coder state
}
     3a4:	08 95       	ret
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[a_index] == 0){ // one direction 
     3a6:	41 11       	cpse	r20, r1
     3a8:	0b c0       	rjmp	.+22     	; 0x3c0 <encoderRead+0x98>
                if (count == 3){
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <count.1886>
     3b0:	93 30       	cpi	r25, 0x03	; 3
     3b2:	41 f0       	breq	.+16     	; 0x3c4 <encoderRead+0x9c>
     3b4:	81 95       	neg	r24
                if (count == -3){
                    return_val = 1;
   
                }
            }
            count = 0; // count is always reset in detent position
     3b6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count.1886>
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
     3ba:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
     3bc:	2c 93       	st	X, r18
     3be:	08 95       	ret
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <encoderRead+0x8e>
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[a_index] == 0){ // one direction 
                if (count == 3){
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	f6 cf       	rjmp	.-20     	; 0x3b4 <encoderRead+0x8c>

000003c8 <barGraph>:
//                                  barGraph
// Set the mode on the bar graph. 
/******************************************************************************/
void barGraph(){
    
    SPDR = barGraphDisplay;
     3c8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <barGraphDisplay>
     3cc:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
     3ce:	77 9b       	sbis	0x0e, 7	; 14
     3d0:	fe cf       	rjmp	.-4      	; 0x3ce <barGraph+0x6>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
     3d2:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
     3d4:	82 b3       	in	r24, 0x12	; 18
     3d6:	12 ba       	out	0x12, r1	; 18
     3d8:	08 95       	ret

000003da <alarmDisplay>:
//                                 alarmDisplay
// Display "ALARM" on the display if the alarm flag is on.
// Otherwise clear the screen. 
/******************************************************************************/

void alarmDisplay(){
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	60 97       	sbiw	r28, 0x10	; 16
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
    char lcd_string_array[16] = "     ALARM      ";
     3ee:	80 e1       	ldi	r24, 0x10	; 16
     3f0:	e4 e0       	ldi	r30, 0x04	; 4
     3f2:	f1 e0       	ldi	r31, 0x01	; 1
     3f4:	de 01       	movw	r26, r28
     3f6:	11 96       	adiw	r26, 0x01	; 1
     3f8:	01 90       	ld	r0, Z+
     3fa:	0d 92       	st	X+, r0
     3fc:	8a 95       	dec	r24
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <alarmDisplay+0x1e>
    if (alarmFlag == 0x1){
     400:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <alarmFlag>
     404:	81 30       	cpi	r24, 0x01	; 1
     406:	49 f0       	breq	.+18     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
        clear_display(); // clear the display 
        string2lcd(lcd_string_array);
    }
    

}
     408:	60 96       	adiw	r28, 0x10	; 16
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret
/******************************************************************************/

void alarmDisplay(){
    char lcd_string_array[16] = "     ALARM      ";
    if (alarmFlag == 0x1){
        clear_display(); // clear the display 
     41a:	0e 94 35 05 	call	0xa6a	; 0xa6a <clear_display>
        string2lcd(lcd_string_array);
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 b5 05 	call	0xb6a	; 0xb6a <string2lcd>
    }
    

}
     426:	f0 cf       	rjmp	.-32     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

00000428 <buttonPress>:
//                                 buttonPress
// Different cases for each button pressed
/******************************************************************************/
void buttonPress(uint8_t button){

    switch (button){
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	e1 f1       	breq	.+120    	; 0x4a4 <buttonPress+0x7c>
     42c:	98 f4       	brcc	.+38     	; 0x454 <buttonPress+0x2c>
     42e:	88 23       	and	r24, r24
     430:	81 f1       	breq	.+96     	; 0x492 <buttonPress+0x6a>
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	01 f5       	brne	.+64     	; 0x476 <buttonPress+0x4e>
            return;
        }
        case 1:
        {
            // 10 seconds
            timerFlag = 1;
     436:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timerFlag>
            timer = 10;
     43a:	8a e0       	ldi	r24, 0x0A	; 10
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <timer+0x1>
     442:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <timer>
            barGraphDisplay ^= 1 << 1;
     446:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <barGraphDisplay>
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	89 27       	eor	r24, r25
     44e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <barGraphDisplay>
            return;
     452:	08 95       	ret
//                                 buttonPress
// Different cases for each button pressed
/******************************************************************************/
void buttonPress(uint8_t button){

    switch (button){
     454:	86 30       	cpi	r24, 0x06	; 6
     456:	81 f0       	breq	.+32     	; 0x478 <buttonPress+0x50>
     458:	87 30       	cpi	r24, 0x07	; 7
     45a:	61 f4       	brne	.+24     	; 0x474 <buttonPress+0x4c>
            return;
        }
        case 7:
        {
            // change hours
            changeHourFlag ^= 1;
     45c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <changeHourFlag>
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	89 27       	eor	r24, r25
     464:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <changeHourFlag>
            barGraphDisplay ^= 1 << 7;
     468:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <barGraphDisplay>
     46c:	80 58       	subi	r24, 0x80	; 128
     46e:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <barGraphDisplay>
     472:	08 95       	ret
     474:	08 95       	ret
     476:	08 95       	ret
            return;
        }
        case 6:
        {
            // change minutes
            changeMinuteFlag ^= 1;
     478:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <changeMinuteFlag>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	89 27       	eor	r24, r25
     480:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <changeMinuteFlag>
            barGraphDisplay ^= 1 << 6;
     484:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <barGraphDisplay>
     488:	80 e4       	ldi	r24, 0x40	; 64
     48a:	89 27       	eor	r24, r25
     48c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <barGraphDisplay>
            return;
     490:	08 95       	ret

    switch (button){
        case 0:
        {
            // snooze, turn off LCD display
            alarmFlag = 0;
     492:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <alarmFlag>
            barGraphDisplay &= ~(1 << 1); // turn off the timer modes
            barGraphDisplay &= ~(1 << 2); // turn off the timer modes
     496:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <barGraphDisplay>
     49a:	89 7f       	andi	r24, 0xF9	; 249
     49c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <barGraphDisplay>
            clear_display();
     4a0:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <clear_display>
            return;
        }
        case 2:
        {
            // 10 minutes
            timerFlag = 1;
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <timerFlag>
            timer = 10 * 60;
     4aa:	88 e5       	ldi	r24, 0x58	; 88
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <timer+0x1>
     4b2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <timer>
            barGraphDisplay ^= 1 << 2;
     4b6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <barGraphDisplay>
     4ba:	84 e0       	ldi	r24, 0x04	; 4
     4bc:	89 27       	eor	r24, r25
     4be:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <barGraphDisplay>
            return;
     4c2:	08 95       	ret

000004c4 <__vector_16>:
// and when the overflow flag for timer counter 0 it set.
// This fucntions checks the push buttons to see which buttons were pressed
// then set it in its correct mode.
// Afterwards checks the encoder to see where it is.
/******************************************************************************/
ISR(TIMER0_OVF_vect){
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	0b b6       	in	r0, 0x3b	; 59
     4d0:	0f 92       	push	r0
     4d2:	df 92       	push	r13
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	2f 93       	push	r18
     4de:	3f 93       	push	r19
     4e0:	4f 93       	push	r20
     4e2:	5f 93       	push	r21
     4e4:	6f 93       	push	r22
     4e6:	7f 93       	push	r23
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	ef 93       	push	r30
     4f6:	ff 93       	push	r31
    static uint8_t count = 0, seconds;
    //insert loop demake lay for debounce

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;
     4f8:	88 b3       	in	r24, 0x18	; 24
     4fa:	80 67       	ori	r24, 0x70	; 112
     4fc:	88 bb       	out	0x18, r24	; 24
     4fe:	0c e0       	ldi	r16, 0x0C	; 12
     500:	10 e0       	ldi	r17, 0x00	; 0

    for (i = 0; i < 12; i++){ // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
        PORTA = 0xFF; // set port A as pull ups
     502:	dd 24       	eor	r13, r13
     504:	da 94       	dec	r13
    PORTB |= TRI_BUFFER;

    for (i = 0; i < 12; i++){ // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
     506:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF; // set port A as pull ups
     508:	db ba       	out	0x1b, r13	; 27
     50a:	9b e1       	ldi	r25, 0x1B	; 27
     50c:	e9 2e       	mov	r14, r25
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	f9 2e       	mov	r15, r25
        
        // checking what button is being pressed
        for (j = 0; j < 8; j++){
     512:	c0 e0       	ldi	r28, 0x00	; 0
     514:	d0 e0       	ldi	r29, 0x00	; 0
     516:	04 c0       	rjmp	.+8      	; 0x520 <__vector_16+0x5c>
     518:	21 96       	adiw	r28, 0x01	; 1
     51a:	c8 30       	cpi	r28, 0x08	; 8
     51c:	d1 05       	cpc	r29, r1
     51e:	09 f1       	breq	.+66     	; 0x562 <__vector_16+0x9e>
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
     520:	99 b3       	in	r25, 0x19	; 25
     522:	f7 01       	movw	r30, r14
     524:	20 81       	ld	r18, Z
     526:	31 81       	ldd	r19, Z+1	; 0x01
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	30 6e       	ori	r19, 0xE0	; 224
     52e:	89 2f       	mov	r24, r25
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0c 2e       	mov	r0, r28
     534:	02 c0       	rjmp	.+4      	; 0x53a <__vector_16+0x76>
     536:	95 95       	asr	r25
     538:	87 95       	ror	r24
     53a:	0a 94       	dec	r0
     53c:	e2 f7       	brpl	.-8      	; 0x536 <__vector_16+0x72>
     53e:	81 70       	andi	r24, 0x01	; 1
     540:	99 27       	eor	r25, r25
     542:	82 2b       	or	r24, r18
     544:	93 2b       	or	r25, r19
     546:	f7 01       	movw	r30, r14
     548:	81 93       	st	Z+, r24
     54a:	91 93       	st	Z+, r25
     54c:	7f 01       	movw	r14, r30

    if (state[button] == 0xF000)
     54e:	81 15       	cp	r24, r1
     550:	90 4f       	sbci	r25, 0xF0	; 240
     552:	11 f7       	brne	.-60     	; 0x518 <__vector_16+0x54>
        PORTA = 0xFF; // set port A as pull ups
        
        // checking what button is being pressed
        for (j = 0; j < 8; j++){
            if (chk_buttons(j))
                buttonPress(j);
     554:	8c 2f       	mov	r24, r28
     556:	0e 94 14 02 	call	0x428	; 0x428 <buttonPress>
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
        PORTA = 0xFF; // set port A as pull ups
        
        // checking what button is being pressed
        for (j = 0; j < 8; j++){
     55a:	21 96       	adiw	r28, 0x01	; 1
     55c:	c8 30       	cpi	r28, 0x08	; 8
     55e:	d1 05       	cpc	r29, r1
     560:	f9 f6       	brne	.-66     	; 0x520 <__vector_16+0x5c>
     562:	01 50       	subi	r16, 0x01	; 1
     564:	11 09       	sbc	r17, r1

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;

    for (i = 0; i < 12; i++){ // for the debounce
     566:	79 f6       	brne	.-98     	; 0x506 <__vector_16+0x42>
                buttonPress(j);
        }
            
        
    }
    PORTB &= ~(TRI_BUFFER); // turn off the tri state buffer 
     568:	88 b3       	in	r24, 0x18	; 24
     56a:	8f 78       	andi	r24, 0x8F	; 143
     56c:	88 bb       	out	0x18, r24	; 24

    // reading each knob
    uint8_t enc1 = encoderRead(data, 0);
     56e:	c0 91 34 01 	lds	r28, 0x0134	; 0x800134 <data>
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	8c 2f       	mov	r24, r28
     576:	0e 94 94 01 	call	0x328	; 0x328 <encoderRead>
     57a:	d8 2f       	mov	r29, r24
    uint8_t enc2 = encoderRead(data, 1);
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	8c 2f       	mov	r24, r28
     580:	0e 94 94 01 	call	0x328	; 0x328 <encoderRead>

    // each case of what the knob or buttons will be
    if(enc1 == 0 || enc2 == 0){
     584:	dd 23       	and	r29, r29
     586:	11 f0       	breq	.+4      	; 0x58c <__vector_16+0xc8>
     588:	81 11       	cpse	r24, r1
     58a:	76 c0       	rjmp	.+236    	; 0x678 <__vector_16+0x1b4>
        // ccw 
        //current_num -= 1;
        if (changeMinuteFlag == 1 && changeHourFlag == 0){
     58c:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <changeMinuteFlag>
     590:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <changeHourFlag>
     594:	91 30       	cpi	r25, 0x01	; 1
     596:	09 f4       	brne	.+2      	; 0x59a <__vector_16+0xd6>
     598:	90 c0       	rjmp	.+288    	; 0x6ba <__vector_16+0x1f6>
            minutes--;
            if (minutes == 255) // since its unsign 255 = -1
                minutes = 59;

        }
        if (changeHourFlag ==1 && changeMinuteFlag == 0){
     59a:	21 30       	cpi	r18, 0x01	; 1
     59c:	09 f4       	brne	.+2      	; 0x5a0 <__vector_16+0xdc>
     59e:	af c0       	rjmp	.+350    	; 0x6fe <__vector_16+0x23a>
                hours = 23;
        }

    }
        
    if (enc1 == 1 || enc2 == 1){
     5a0:	d1 30       	cpi	r29, 0x01	; 1
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <__vector_16+0xe2>
     5a4:	72 c0       	rjmp	.+228    	; 0x68a <__vector_16+0x1c6>
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	09 f4       	brne	.+2      	; 0x5ac <__vector_16+0xe8>
     5aa:	69 c0       	rjmp	.+210    	; 0x67e <__vector_16+0x1ba>

    }


    // add a counter to determine one second 
    count++;
     5ac:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <count.1869>
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <count.1869>
    if ((count % 128) == 0){
     5b6:	8f 77       	andi	r24, 0x7F	; 127
     5b8:	09 f0       	breq	.+2      	; 0x5bc <__vector_16+0xf8>
     5ba:	44 c0       	rjmp	.+136    	; 0x644 <__vector_16+0x180>
        // 1 second has past

        // timer
        if (timerFlag == 0x1){
     5bc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <timerFlag>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <__vector_16+0x102>
     5c4:	ab c0       	rjmp	.+342    	; 0x71c <__vector_16+0x258>
            }
        }


        // clock
        colonDisplay ^= 0x1; // blinking
     5c6:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <colonDisplay>
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	89 27       	eor	r24, r25
     5ce:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <colonDisplay>
        seconds++;
     5d2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <seconds.1870>
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <seconds.1870>
        
        if ((seconds % 60) == 0){
     5dc:	99 e8       	ldi	r25, 0x89	; 137
     5de:	89 9f       	mul	r24, r25
     5e0:	21 2d       	mov	r18, r1
     5e2:	11 24       	eor	r1, r1
     5e4:	22 95       	swap	r18
     5e6:	26 95       	lsr	r18
     5e8:	27 70       	andi	r18, 0x07	; 7
     5ea:	3c e3       	ldi	r19, 0x3C	; 60
     5ec:	23 9f       	mul	r18, r19
     5ee:	80 19       	sub	r24, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	81 11       	cpse	r24, r1
     5f4:	27 c0       	rjmp	.+78     	; 0x644 <__vector_16+0x180>
            minutes++;
     5f6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <minutes>
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <minutes>
            seconds = 0;
     600:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <seconds.1870>
            if ((minutes % 60) == 0){
     604:	89 9f       	mul	r24, r25
     606:	91 2d       	mov	r25, r1
     608:	11 24       	eor	r1, r1
     60a:	92 95       	swap	r25
     60c:	96 95       	lsr	r25
     60e:	97 70       	andi	r25, 0x07	; 7
     610:	93 9f       	mul	r25, r19
     612:	80 19       	sub	r24, r0
     614:	11 24       	eor	r1, r1
     616:	81 11       	cpse	r24, r1
     618:	15 c0       	rjmp	.+42     	; 0x644 <__vector_16+0x180>
                hours++;
     61a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <hours>
     61e:	8f 5f       	subi	r24, 0xFF	; 255
     620:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <hours>
                minutes = 0;
     624:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <minutes>
                if (hours % 24 == 0)
     628:	9b ea       	ldi	r25, 0xAB	; 171
     62a:	89 9f       	mul	r24, r25
     62c:	91 2d       	mov	r25, r1
     62e:	11 24       	eor	r1, r1
     630:	92 95       	swap	r25
     632:	9f 70       	andi	r25, 0x0F	; 15
     634:	f8 e1       	ldi	r31, 0x18	; 24
     636:	9f 9f       	mul	r25, r31
     638:	80 19       	sub	r24, r0
     63a:	11 24       	eor	r1, r1
     63c:	81 11       	cpse	r24, r1
     63e:	02 c0       	rjmp	.+4      	; 0x644 <__vector_16+0x180>
                    hours = 0;
     640:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <hours>
            }
        }
    }
    
}
     644:	ff 91       	pop	r31
     646:	ef 91       	pop	r30
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	bf 91       	pop	r27
     64e:	af 91       	pop	r26
     650:	9f 91       	pop	r25
     652:	8f 91       	pop	r24
     654:	7f 91       	pop	r23
     656:	6f 91       	pop	r22
     658:	5f 91       	pop	r21
     65a:	4f 91       	pop	r20
     65c:	3f 91       	pop	r19
     65e:	2f 91       	pop	r18
     660:	1f 91       	pop	r17
     662:	0f 91       	pop	r16
     664:	ff 90       	pop	r15
     666:	ef 90       	pop	r14
     668:	df 90       	pop	r13
     66a:	0f 90       	pop	r0
     66c:	0b be       	out	0x3b, r0	; 59
     66e:	0f 90       	pop	r0
     670:	0f be       	out	0x3f, r0	; 63
     672:	0f 90       	pop	r0
     674:	1f 90       	pop	r1
     676:	18 95       	reti
                hours = 23;
        }

    }
        
    if (enc1 == 1 || enc2 == 1){
     678:	d1 30       	cpi	r29, 0x01	; 1
     67a:	09 f0       	breq	.+2      	; 0x67e <__vector_16+0x1ba>
     67c:	94 cf       	rjmp	.-216    	; 0x5a6 <__vector_16+0xe2>
        // cw 
        // current_num += 1;
        if (changeMinuteFlag == 1 && changeHourFlag == 0){
     67e:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <changeMinuteFlag>
     682:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <changeHourFlag>
     686:	91 30       	cpi	r25, 0x01	; 1
     688:	21 f1       	breq	.+72     	; 0x6d2 <__vector_16+0x20e>
            minutes++;
            if (minutes % 60 == 0)
                minutes = 0;
            
        }
        else if (changeHourFlag ==1 && changeMinuteFlag == 0){
     68a:	21 30       	cpi	r18, 0x01	; 1
     68c:	09 f0       	breq	.+2      	; 0x690 <__vector_16+0x1cc>
     68e:	8e cf       	rjmp	.-228    	; 0x5ac <__vector_16+0xe8>
     690:	91 11       	cpse	r25, r1
     692:	8c cf       	rjmp	.-232    	; 0x5ac <__vector_16+0xe8>
            hours++;
     694:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <hours>
     698:	8f 5f       	subi	r24, 0xFF	; 255
            if (hours % 24 == 0)
     69a:	9b ea       	ldi	r25, 0xAB	; 171
     69c:	89 9f       	mul	r24, r25
     69e:	91 2d       	mov	r25, r1
     6a0:	11 24       	eor	r1, r1
     6a2:	92 95       	swap	r25
     6a4:	9f 70       	andi	r25, 0x0F	; 15
     6a6:	e8 2f       	mov	r30, r24
     6a8:	48 e1       	ldi	r20, 0x18	; 24
     6aa:	94 9f       	mul	r25, r20
     6ac:	e0 19       	sub	r30, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	e1 11       	cpse	r30, r1
     6b2:	46 c0       	rjmp	.+140    	; 0x740 <__vector_16+0x27c>
                hours = 0;
     6b4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <hours>
     6b8:	79 cf       	rjmp	.-270    	; 0x5ac <__vector_16+0xe8>

    // each case of what the knob or buttons will be
    if(enc1 == 0 || enc2 == 0){
        // ccw 
        //current_num -= 1;
        if (changeMinuteFlag == 1 && changeHourFlag == 0){
     6ba:	21 11       	cpse	r18, r1
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <__vector_16+0x208>
            // change minutes
            minutes--;
     6be:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <minutes>
     6c2:	91 50       	subi	r25, 0x01	; 1
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <__vector_16+0x204>
     6c6:	42 c0       	rjmp	.+132    	; 0x74c <__vector_16+0x288>
            if (minutes == 255) // since its unsign 255 = -1
                minutes = 59;
     6c8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <minutes>
                hours = 23;
        }

    }
        
    if (enc1 == 1 || enc2 == 1){
     6cc:	d1 30       	cpi	r29, 0x01	; 1
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <__vector_16+0x20e>
     6d0:	6a cf       	rjmp	.-300    	; 0x5a6 <__vector_16+0xe2>
        // cw 
        // current_num += 1;
        if (changeMinuteFlag == 1 && changeHourFlag == 0){
     6d2:	21 11       	cpse	r18, r1
     6d4:	6b cf       	rjmp	.-298    	; 0x5ac <__vector_16+0xe8>
            // change minutes
            minutes++;
     6d6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <minutes>
     6da:	8f 5f       	subi	r24, 0xFF	; 255
            if (minutes % 60 == 0)
     6dc:	99 e8       	ldi	r25, 0x89	; 137
     6de:	89 9f       	mul	r24, r25
     6e0:	91 2d       	mov	r25, r1
     6e2:	11 24       	eor	r1, r1
     6e4:	92 95       	swap	r25
     6e6:	96 95       	lsr	r25
     6e8:	97 70       	andi	r25, 0x07	; 7
     6ea:	38 2f       	mov	r19, r24
     6ec:	2c e3       	ldi	r18, 0x3C	; 60
     6ee:	92 9f       	mul	r25, r18
     6f0:	30 19       	sub	r19, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	31 11       	cpse	r19, r1
     6f6:	27 c0       	rjmp	.+78     	; 0x746 <__vector_16+0x282>
                minutes = 0;
     6f8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <minutes>
     6fc:	57 cf       	rjmp	.-338    	; 0x5ac <__vector_16+0xe8>
            minutes--;
            if (minutes == 255) // since its unsign 255 = -1
                minutes = 59;

        }
        if (changeHourFlag ==1 && changeMinuteFlag == 0){
     6fe:	91 11       	cpse	r25, r1
     700:	4f cf       	rjmp	.-354    	; 0x5a0 <__vector_16+0xdc>
            hours--;
     702:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <hours>
     706:	91 50       	subi	r25, 0x01	; 1
     708:	18 f1       	brcs	.+70     	; 0x750 <__vector_16+0x28c>
     70a:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <hours>
                hours = 23;
        }

    }
        
    if (enc1 == 1 || enc2 == 1){
     70e:	d1 30       	cpi	r29, 0x01	; 1
     710:	09 f4       	brne	.+2      	; 0x714 <__vector_16+0x250>
     712:	c0 cf       	rjmp	.-128    	; 0x694 <__vector_16+0x1d0>
     714:	81 30       	cpi	r24, 0x01	; 1
     716:	09 f0       	breq	.+2      	; 0x71a <__vector_16+0x256>
     718:	49 cf       	rjmp	.-366    	; 0x5ac <__vector_16+0xe8>
     71a:	bc cf       	rjmp	.-136    	; 0x694 <__vector_16+0x1d0>
        // 1 second has past

        // timer
        if (timerFlag == 0x1){
            // timer on
            timer--;
     71c:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <timer>
     720:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <timer+0x1>
     724:	21 50       	subi	r18, 0x01	; 1
     726:	31 09       	sbc	r19, r1
     728:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <timer+0x1>
     72c:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <timer>
            if (timer == 0){
     730:	23 2b       	or	r18, r19
     732:	09 f0       	breq	.+2      	; 0x736 <__vector_16+0x272>
     734:	48 cf       	rjmp	.-368    	; 0x5c6 <__vector_16+0x102>
                // timer goes off display alarm 
                alarmFlag = 1; // display alarm
     736:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <alarmFlag>
                timerFlag = 0; // turn off timer
     73a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <timerFlag>
     73e:	43 cf       	rjmp	.-378    	; 0x5c6 <__vector_16+0x102>
            if (minutes % 60 == 0)
                minutes = 0;
            
        }
        else if (changeHourFlag ==1 && changeMinuteFlag == 0){
            hours++;
     740:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <hours>
     744:	33 cf       	rjmp	.-410    	; 0x5ac <__vector_16+0xe8>
    if (enc1 == 1 || enc2 == 1){
        // cw 
        // current_num += 1;
        if (changeMinuteFlag == 1 && changeHourFlag == 0){
            // change minutes
            minutes++;
     746:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <minutes>
     74a:	30 cf       	rjmp	.-416    	; 0x5ac <__vector_16+0xe8>
        //current_num -= 1;
        if (changeMinuteFlag == 1 && changeHourFlag == 0){
            // change minutes
            minutes--;
            if (minutes == 255) // since its unsign 255 = -1
                minutes = 59;
     74c:	9b e3       	ldi	r25, 0x3B	; 59
     74e:	bc cf       	rjmp	.-136    	; 0x6c8 <__vector_16+0x204>

        }
        if (changeHourFlag ==1 && changeMinuteFlag == 0){
            hours--;
            if (hours == 255)
                hours = 23;
     750:	97 e1       	ldi	r25, 0x17	; 23
     752:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <hours>
     756:	db cf       	rjmp	.-74     	; 0x70e <__vector_16+0x24a>

00000758 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	81 11       	cpse	r24, r1
     75c:	01 c0       	rjmp	.+2      	; 0x760 <send_lcd+0x8>
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     762:	77 9b       	sbis	0x0e, 7	; 14
     764:	fe cf       	rjmp	.-4      	; 0x762 <send_lcd+0xa>
  SPDR = byte;                        //send payload
     766:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     768:	77 9b       	sbis	0x0e, 7	; 14
     76a:	fe cf       	rjmp	.-4      	; 0x768 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     76c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     770:	88 60       	ori	r24, 0x08	; 8
     772:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     776:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     77a:	87 7f       	andi	r24, 0xF7	; 247
     77c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     780:	08 95       	ret

00000782 <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     782:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <i.2094>
     786:	82 0f       	add	r24, r18
     788:	91 1d       	adc	r25, r1
     78a:	fc 01       	movw	r30, r24
     78c:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     792:	77 9b       	sbis	0x0e, 7	; 14
     794:	fe cf       	rjmp	.-4      	; 0x792 <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     796:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     798:	77 9b       	sbis	0x0e, 7	; 14
     79a:	fe cf       	rjmp	.-4      	; 0x798 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     79c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a0:	88 60       	ori	r24, 0x08	; 8
     7a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7aa:	87 7f       	andi	r24, 0xF7	; 247
     7ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
     7b0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <i.2094>
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <i.2094>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     7ba:	80 31       	cpi	r24, 0x10	; 16
     7bc:	d9 f0       	breq	.+54     	; 0x7f4 <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     7be:	80 32       	cpi	r24, 0x20	; 32
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <refresh_lcd+0x42>
     7c2:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c4:	85 ed       	ldi	r24, 0xD5	; 213
     7c6:	8a 95       	dec	r24
     7c8:	f1 f7       	brne	.-4      	; 0x7c6 <refresh_lcd+0x44>
     7ca:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7cc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7ce:	77 9b       	sbis	0x0e, 7	; 14
     7d0:	fe cf       	rjmp	.-4      	; 0x7ce <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     7d2:	80 e8       	ldi	r24, 0x80	; 128
     7d4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7d6:	77 9b       	sbis	0x0e, 7	; 14
     7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     7da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7de:	88 60       	ori	r24, 0x08	; 8
     7e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     7e8:	87 7f       	andi	r24, 0xF7	; 247
     7ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     7ee:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <i.2094>
     7f2:	08 95       	ret
     7f4:	f5 ed       	ldi	r31, 0xD5	; 213
     7f6:	fa 95       	dec	r31
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <refresh_lcd+0x74>
     7fa:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     7fc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     7fe:	77 9b       	sbis	0x0e, 7	; 14
     800:	fe cf       	rjmp	.-4      	; 0x7fe <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
     802:	80 ec       	ldi	r24, 0xC0	; 192
     804:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     806:	77 9b       	sbis	0x0e, 7	; 14
     808:	fe cf       	rjmp	.-4      	; 0x806 <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     80a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     80e:	88 60       	ori	r24, 0x08	; 8
     810:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     814:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     818:	87 7f       	andi	r24, 0xF7	; 247
     81a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     81e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <i.2094>
     822:	cd cf       	rjmp	.-102    	; 0x7be <refresh_lcd+0x3c>

00000824 <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     824:	66 0f       	add	r22, r22
     826:	66 0f       	add	r22, r22
     828:	66 0f       	add	r22, r22
     82a:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     82c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     82e:	77 9b       	sbis	0x0e, 7	; 14
     830:	fe cf       	rjmp	.-4      	; 0x82e <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     832:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     834:	77 9b       	sbis	0x0e, 7	; 14
     836:	fe cf       	rjmp	.-4      	; 0x834 <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     838:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     83c:	28 60       	ori	r18, 0x08	; 8
     83e:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     842:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     846:	27 7f       	andi	r18, 0xF7	; 247
     848:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     84c:	25 ed       	ldi	r18, 0xD5	; 213
     84e:	2a 95       	dec	r18
     850:	f1 f7       	brne	.-4      	; 0x84e <set_custom_character+0x2a>
     852:	00 00       	nop
     854:	fc 01       	movw	r30, r24
     856:	9c 01       	movw	r18, r24
     858:	28 5f       	subi	r18, 0xF8	; 248
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     85c:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     85e:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     860:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     862:	77 9b       	sbis	0x0e, 7	; 14
     864:	fe cf       	rjmp	.-4      	; 0x862 <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     866:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     868:	77 9b       	sbis	0x0e, 7	; 14
     86a:	fe cf       	rjmp	.-4      	; 0x868 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     86c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     870:	88 60       	ori	r24, 0x08	; 8
     872:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     876:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     87a:	87 7f       	andi	r24, 0xF7	; 247
     87c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     880:	85 ed       	ldi	r24, 0xD5	; 213
     882:	8a 95       	dec	r24
     884:	f1 f7       	brne	.-4      	; 0x882 <set_custom_character+0x5e>
     886:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     888:	e2 17       	cp	r30, r18
     88a:	f3 07       	cpc	r31, r19
     88c:	41 f7       	brne	.-48     	; 0x85e <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     88e:	08 95       	ret

00000890 <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     890:	90 e4       	ldi	r25, 0x40	; 64
     892:	89 9f       	mul	r24, r25
     894:	60 0d       	add	r22, r0
     896:	11 24       	eor	r1, r1
     898:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     89a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     89c:	77 9b       	sbis	0x0e, 7	; 14
     89e:	fe cf       	rjmp	.-4      	; 0x89c <set_cursor+0xc>
  SPDR = byte;                        //send payload
     8a0:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8a2:	77 9b       	sbis	0x0e, 7	; 14
     8a4:	fe cf       	rjmp	.-4      	; 0x8a2 <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8aa:	88 60       	ori	r24, 0x08	; 8
     8ac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8b4:	87 7f       	andi	r24, 0xF7	; 247
     8b6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8ba:	08 95       	ret

000008bc <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     8bc:	81 11       	cpse	r24, r1
     8be:	13 c0       	rjmp	.+38     	; 0x8e6 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8c4:	77 9b       	sbis	0x0e, 7	; 14
     8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     8c8:	80 e3       	ldi	r24, 0x30	; 48
     8ca:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8cc:	77 9b       	sbis	0x0e, 7	; 14
     8ce:	fe cf       	rjmp	.-4      	; 0x8cc <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d4:	88 60       	ori	r24, 0x08	; 8
     8d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8da:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8de:	87 7f       	andi	r24, 0xF7	; 247
     8e0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8e4:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     8e6:	84 36       	cpi	r24, 0x64	; 100
     8e8:	b0 f4       	brcc	.+44     	; 0x916 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     8ea:	8a 30       	cpi	r24, 0x0A	; 10
     8ec:	60 f5       	brcc	.+88     	; 0x946 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8f2:	77 9b       	sbis	0x0e, 7	; 14
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     8f6:	9d ec       	ldi	r25, 0xCD	; 205
     8f8:	89 9f       	mul	r24, r25
     8fa:	91 2d       	mov	r25, r1
     8fc:	11 24       	eor	r1, r1
     8fe:	96 95       	lsr	r25
     900:	96 95       	lsr	r25
     902:	96 95       	lsr	r25
     904:	2a e0       	ldi	r18, 0x0A	; 10
     906:	92 9f       	mul	r25, r18
     908:	80 19       	sub	r24, r0
     90a:	11 24       	eor	r1, r1
     90c:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     90e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     910:	77 9b       	sbis	0x0e, 7	; 14
     912:	fe cf       	rjmp	.-4      	; 0x910 <uint2lcd+0x54>
     914:	dd cf       	rjmp	.-70     	; 0x8d0 <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     916:	99 e2       	ldi	r25, 0x29	; 41
     918:	89 9f       	mul	r24, r25
     91a:	91 2d       	mov	r25, r1
     91c:	11 24       	eor	r1, r1
     91e:	92 95       	swap	r25
     920:	9f 70       	andi	r25, 0x0F	; 15
     922:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     924:	21 e0       	ldi	r18, 0x01	; 1
     926:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     928:	77 9b       	sbis	0x0e, 7	; 14
     92a:	fe cf       	rjmp	.-4      	; 0x928 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     92c:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     92e:	77 9b       	sbis	0x0e, 7	; 14
     930:	fe cf       	rjmp	.-4      	; 0x92e <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     932:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     936:	98 60       	ori	r25, 0x08	; 8
     938:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     93c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     940:	97 7f       	andi	r25, 0xF7	; 247
     942:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     946:	99 e2       	ldi	r25, 0x29	; 41
     948:	89 9f       	mul	r24, r25
     94a:	91 2d       	mov	r25, r1
     94c:	11 24       	eor	r1, r1
     94e:	92 95       	swap	r25
     950:	9f 70       	andi	r25, 0x0F	; 15
     952:	38 2f       	mov	r19, r24
     954:	24 e6       	ldi	r18, 0x64	; 100
     956:	92 9f       	mul	r25, r18
     958:	30 19       	sub	r19, r0
     95a:	11 24       	eor	r1, r1
     95c:	2d ec       	ldi	r18, 0xCD	; 205
     95e:	32 9f       	mul	r19, r18
     960:	91 2d       	mov	r25, r1
     962:	11 24       	eor	r1, r1
     964:	96 95       	lsr	r25
     966:	96 95       	lsr	r25
     968:	96 95       	lsr	r25
     96a:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     970:	77 9b       	sbis	0x0e, 7	; 14
     972:	fe cf       	rjmp	.-4      	; 0x970 <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     974:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     976:	77 9b       	sbis	0x0e, 7	; 14
     978:	fe cf       	rjmp	.-4      	; 0x976 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     97a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     97e:	98 60       	ori	r25, 0x08	; 8
     980:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     984:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     988:	97 7f       	andi	r25, 0xF7	; 247
     98a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     98e:	af cf       	rjmp	.-162    	; 0x8ee <uint2lcd+0x32>

00000990 <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     990:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     992:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     99a:	77 9b       	sbis	0x0e, 7	; 14
     99c:	fe cf       	rjmp	.-4      	; 0x99a <int2lcd+0xa>
  SPDR = byte;                        //send payload
     99e:	9d e2       	ldi	r25, 0x2D	; 45
     9a0:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9a2:	77 9b       	sbis	0x0e, 7	; 14
     9a4:	fe cf       	rjmp	.-4      	; 0x9a2 <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9a6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9aa:	98 60       	ori	r25, 0x08	; 8
     9ac:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9b4:	97 7f       	andi	r25, 0xF7	; 247
     9b6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ba:	95 ed       	ldi	r25, 0xD5	; 213
     9bc:	9a 95       	dec	r25
     9be:	f1 f7       	brne	.-4      	; 0x9bc <int2lcd+0x2c>
     9c0:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     9c2:	81 95       	neg	r24
     9c4:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <uint2lcd>

000009c8 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9c8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ca:	77 9b       	sbis	0x0e, 7	; 14
     9cc:	fe cf       	rjmp	.-4      	; 0x9ca <cursor_on+0x2>
  SPDR = byte;                        //send payload
     9ce:	8e e0       	ldi	r24, 0x0E	; 14
     9d0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9d2:	77 9b       	sbis	0x0e, 7	; 14
     9d4:	fe cf       	rjmp	.-4      	; 0x9d2 <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9da:	88 60       	ori	r24, 0x08	; 8
     9dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9e4:	87 7f       	andi	r24, 0xF7	; 247
     9e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9ea:	08 95       	ret

000009ec <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     9ec:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9ee:	77 9b       	sbis	0x0e, 7	; 14
     9f0:	fe cf       	rjmp	.-4      	; 0x9ee <cursor_off+0x2>
  SPDR = byte;                        //send payload
     9f2:	8c e0       	ldi	r24, 0x0C	; 12
     9f4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     9f6:	77 9b       	sbis	0x0e, 7	; 14
     9f8:	fe cf       	rjmp	.-4      	; 0x9f6 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     9fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     9fe:	88 60       	ori	r24, 0x08	; 8
     a00:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a04:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a08:	87 7f       	andi	r24, 0xF7	; 247
     a0a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a0e:	08 95       	ret

00000a10 <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a10:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a12:	77 9b       	sbis	0x0e, 7	; 14
     a14:	fe cf       	rjmp	.-4      	; 0xa12 <shift_right+0x2>
  SPDR = byte;                        //send payload
     a16:	8e e1       	ldi	r24, 0x1E	; 30
     a18:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a1a:	77 9b       	sbis	0x0e, 7	; 14
     a1c:	fe cf       	rjmp	.-4      	; 0xa1a <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a1e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a22:	88 60       	ori	r24, 0x08	; 8
     a24:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a2c:	87 7f       	andi	r24, 0xF7	; 247
     a2e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a32:	08 95       	ret

00000a34 <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a34:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a36:	77 9b       	sbis	0x0e, 7	; 14
     a38:	fe cf       	rjmp	.-4      	; 0xa36 <shift_left+0x2>
  SPDR = byte;                        //send payload
     a3a:	88 e1       	ldi	r24, 0x18	; 24
     a3c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a3e:	77 9b       	sbis	0x0e, 7	; 14
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a42:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a46:	88 60       	ori	r24, 0x08	; 8
     a48:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a4c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a50:	87 7f       	andi	r24, 0xF7	; 247
     a52:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a56:	08 95       	ret

00000a58 <strobe_lcd>:
     a58:	e2 e6       	ldi	r30, 0x62	; 98
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	80 83       	st	Z, r24
     a62:	80 81       	ld	r24, Z
     a64:	87 7f       	andi	r24, 0xF7	; 247
     a66:	80 83       	st	Z, r24
     a68:	08 95       	ret

00000a6a <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a6a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a6c:	77 9b       	sbis	0x0e, 7	; 14
     a6e:	fe cf       	rjmp	.-4      	; 0xa6c <clear_display+0x2>
  SPDR = byte;                        //send payload
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a74:	77 9b       	sbis	0x0e, 7	; 14
     a76:	fe cf       	rjmp	.-4      	; 0xa74 <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a7c:	88 60       	ori	r24, 0x08	; 8
     a7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a86:	87 7f       	andi	r24, 0xF7	; 247
     a88:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a8c:	8f e1       	ldi	r24, 0x1F	; 31
     a8e:	9c e1       	ldi	r25, 0x1C	; 28
     a90:	01 97       	sbiw	r24, 0x01	; 1
     a92:	f1 f7       	brne	.-4      	; 0xa90 <clear_display+0x26>
     a94:	00 c0       	rjmp	.+0      	; 0xa96 <clear_display+0x2c>
     a96:	00 00       	nop
     a98:	08 95       	ret

00000a9a <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a9a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a9c:	77 9b       	sbis	0x0e, 7	; 14
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <cursor_home+0x2>
  SPDR = byte;                        //send payload
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     aa4:	77 9b       	sbis	0x0e, 7	; 14
     aa6:	fe cf       	rjmp	.-4      	; 0xaa4 <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     aa8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aac:	88 60       	ori	r24, 0x08	; 8
     aae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ab6:	87 7f       	andi	r24, 0xF7	; 247
     ab8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     abc:	8f e6       	ldi	r24, 0x6F	; 111
     abe:	97 e1       	ldi	r25, 0x17	; 23
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <cursor_home+0x26>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <cursor_home+0x2c>
     ac6:	00 00       	nop
     ac8:	08 95       	ret

00000aca <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     aca:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     acc:	77 9b       	sbis	0x0e, 7	; 14
     ace:	fe cf       	rjmp	.-4      	; 0xacc <line2_col1+0x2>
  SPDR = byte;                        //send payload
     ad0:	80 ec       	ldi	r24, 0xC0	; 192
     ad2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     ad4:	77 9b       	sbis	0x0e, 7	; 14
     ad6:	fe cf       	rjmp	.-4      	; 0xad4 <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     ad8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     adc:	88 60       	ori	r24, 0x08	; 8
     ade:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ae6:	87 7f       	andi	r24, 0xF7	; 247
     ae8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     aec:	08 95       	ret

00000aee <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     aee:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     af0:	77 9b       	sbis	0x0e, 7	; 14
     af2:	fe cf       	rjmp	.-4      	; 0xaf0 <line1_col1+0x2>
  SPDR = byte;                        //send payload
     af4:	80 e8       	ldi	r24, 0x80	; 128
     af6:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     af8:	77 9b       	sbis	0x0e, 7	; 14
     afa:	fe cf       	rjmp	.-4      	; 0xaf8 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     afc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b00:	88 60       	ori	r24, 0x08	; 8
     b02:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b06:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b0a:	87 7f       	andi	r24, 0xF7	; 247
     b0c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b10:	08 95       	ret

00000b12 <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     b12:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b14:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     b16:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b18:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b1a:	77 9b       	sbis	0x0e, 7	; 14
     b1c:	fe cf       	rjmp	.-4      	; 0xb1a <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     b1e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b20:	77 9b       	sbis	0x0e, 7	; 14
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b24:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b28:	88 60       	ori	r24, 0x08	; 8
     b2a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b2e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b32:	87 7f       	andi	r24, 0xF7	; 247
     b34:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b38:	85 ed       	ldi	r24, 0xD5	; 213
     b3a:	8a 95       	dec	r24
     b3c:	f1 f7       	brne	.-4      	; 0xb3a <fill_spaces+0x28>
     b3e:	00 00       	nop
     b40:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     b42:	51 f7       	brne	.-44     	; 0xb18 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     b44:	08 95       	ret

00000b46 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b4a:	77 9b       	sbis	0x0e, 7	; 14
     b4c:	fe cf       	rjmp	.-4      	; 0xb4a <char2lcd+0x4>
  SPDR = byte;                        //send payload
     b4e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b50:	77 9b       	sbis	0x0e, 7	; 14
     b52:	fe cf       	rjmp	.-4      	; 0xb50 <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b54:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b5e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b62:	87 7f       	andi	r24, 0xF7	; 247
     b64:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b68:	08 95       	ret

00000b6a <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     b6a:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b72:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     b74:	df 01       	movw	r26, r30
     b76:	a4 0f       	add	r26, r20
     b78:	b5 1f       	adc	r27, r21
     b7a:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     b7c:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b7e:	77 9b       	sbis	0x0e, 7	; 14
     b80:	fe cf       	rjmp	.-4      	; 0xb7e <string2lcd+0x14>
  SPDR = byte;                        //send payload
     b82:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     b84:	77 9b       	sbis	0x0e, 7	; 14
     b86:	fe cf       	rjmp	.-4      	; 0xb84 <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     b88:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b8c:	98 60       	ori	r25, 0x08	; 8
     b8e:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b92:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b96:	97 7f       	andi	r25, 0xF7	; 247
     b98:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     b9c:	85 ed       	ldi	r24, 0xD5	; 213
     b9e:	8a 95       	dec	r24
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <string2lcd+0x34>
     ba2:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     ba4:	6f 5f       	subi	r22, 0xFF	; 255
     ba6:	46 2f       	mov	r20, r22
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	df 01       	movw	r26, r30
     bac:	0d 90       	ld	r0, X+
     bae:	00 20       	and	r0, r0
     bb0:	e9 f7       	brne	.-6      	; 0xbac <string2lcd+0x42>
     bb2:	9d 01       	movw	r18, r26
     bb4:	2e 1b       	sub	r18, r30
     bb6:	3f 0b       	sbc	r19, r31
     bb8:	22 50       	subi	r18, 0x02	; 2
     bba:	31 09       	sbc	r19, r1
     bbc:	24 17       	cp	r18, r20
     bbe:	35 07       	cpc	r19, r21
     bc0:	c8 f6       	brcc	.-78     	; 0xb74 <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     bc2:	08 95       	ret

00000bc4 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc4:	8f ef       	ldi	r24, 0xFF	; 255
     bc6:	99 ef       	ldi	r25, 0xF9	; 249
     bc8:	01 97       	sbiw	r24, 0x01	; 1
     bca:	f1 f7       	brne	.-4      	; 0xbc8 <lcd_init+0x4>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <lcd_init+0xa>
     bce:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     bd0:	88 e0       	ldi	r24, 0x08	; 8
     bd2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     bd6:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     bd8:	77 9b       	sbis	0x0e, 7	; 14
     bda:	fe cf       	rjmp	.-4      	; 0xbd8 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     bdc:	80 e3       	ldi	r24, 0x30	; 48
     bde:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     be0:	77 9b       	sbis	0x0e, 7	; 14
     be2:	fe cf       	rjmp	.-4      	; 0xbe0 <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     be4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     be8:	88 60       	ori	r24, 0x08	; 8
     bea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf2:	87 7f       	andi	r24, 0xF7	; 247
     bf4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     bf8:	8f e5       	ldi	r24, 0x5F	; 95
     bfa:	9d e6       	ldi	r25, 0x6D	; 109
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <lcd_init+0x38>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <lcd_init+0x3e>
     c02:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c04:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c06:	77 9b       	sbis	0x0e, 7	; 14
     c08:	fe cf       	rjmp	.-4      	; 0xc06 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     c0a:	80 e3       	ldi	r24, 0x30	; 48
     c0c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c0e:	77 9b       	sbis	0x0e, 7	; 14
     c10:	fe cf       	rjmp	.-4      	; 0xc0e <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c12:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c16:	88 60       	ori	r24, 0x08	; 8
     c18:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c1c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c20:	87 7f       	andi	r24, 0xF7	; 247
     c22:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c26:	8f e5       	ldi	r24, 0x5F	; 95
     c28:	9d e6       	ldi	r25, 0x6D	; 109
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <lcd_init+0x66>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <lcd_init+0x6c>
     c30:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c32:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c34:	77 9b       	sbis	0x0e, 7	; 14
     c36:	fe cf       	rjmp	.-4      	; 0xc34 <lcd_init+0x70>
  SPDR = byte;                        //send payload
     c38:	80 e3       	ldi	r24, 0x30	; 48
     c3a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c3c:	77 9b       	sbis	0x0e, 7	; 14
     c3e:	fe cf       	rjmp	.-4      	; 0xc3c <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c40:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c44:	88 60       	ori	r24, 0x08	; 8
     c46:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c4a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c4e:	87 7f       	andi	r24, 0xF7	; 247
     c50:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c54:	8f e5       	ldi	r24, 0x5F	; 95
     c56:	9d e6       	ldi	r25, 0x6D	; 109
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <lcd_init+0x94>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <lcd_init+0x9a>
     c5e:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c60:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c62:	77 9b       	sbis	0x0e, 7	; 14
     c64:	fe cf       	rjmp	.-4      	; 0xc62 <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     c66:	88 e3       	ldi	r24, 0x38	; 56
     c68:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c6a:	77 9b       	sbis	0x0e, 7	; 14
     c6c:	fe cf       	rjmp	.-4      	; 0xc6a <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c6e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c72:	88 60       	ori	r24, 0x08	; 8
     c74:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c78:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c7c:	87 7f       	andi	r24, 0xF7	; 247
     c7e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     c82:	8f e1       	ldi	r24, 0x1F	; 31
     c84:	9e e4       	ldi	r25, 0x4E	; 78
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <lcd_init+0xc2>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <lcd_init+0xc8>
     c8c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     c8e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c90:	77 9b       	sbis	0x0e, 7	; 14
     c92:	fe cf       	rjmp	.-4      	; 0xc90 <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     c94:	88 e0       	ldi	r24, 0x08	; 8
     c96:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     c98:	77 9b       	sbis	0x0e, 7	; 14
     c9a:	fe cf       	rjmp	.-4      	; 0xc98 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     c9c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca0:	88 60       	ori	r24, 0x08	; 8
     ca2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     ca6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     caa:	87 7f       	andi	r24, 0xF7	; 247
     cac:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cb0:	8f e1       	ldi	r24, 0x1F	; 31
     cb2:	9e e4       	ldi	r25, 0x4E	; 78
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <lcd_init+0xf0>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <lcd_init+0xf6>
     cba:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cbc:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cbe:	77 9b       	sbis	0x0e, 7	; 14
     cc0:	fe cf       	rjmp	.-4      	; 0xcbe <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cc6:	77 9b       	sbis	0x0e, 7	; 14
     cc8:	fe cf       	rjmp	.-4      	; 0xcc6 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cd8:	87 7f       	andi	r24, 0xF7	; 247
     cda:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cde:	8f e1       	ldi	r24, 0x1F	; 31
     ce0:	9e e4       	ldi	r25, 0x4E	; 78
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <lcd_init+0x11e>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <lcd_init+0x124>
     ce8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     cea:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cec:	77 9b       	sbis	0x0e, 7	; 14
     cee:	fe cf       	rjmp	.-4      	; 0xcec <lcd_init+0x128>
  SPDR = byte;                        //send payload
     cf0:	86 e0       	ldi	r24, 0x06	; 6
     cf2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     cf4:	77 9b       	sbis	0x0e, 7	; 14
     cf6:	fe cf       	rjmp	.-4      	; 0xcf4 <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     cf8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     cfc:	88 60       	ori	r24, 0x08	; 8
     cfe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d02:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d06:	87 7f       	andi	r24, 0xF7	; 247
     d08:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d0c:	8f e1       	ldi	r24, 0x1F	; 31
     d0e:	9e e4       	ldi	r25, 0x4E	; 78
     d10:	01 97       	sbiw	r24, 0x01	; 1
     d12:	f1 f7       	brne	.-4      	; 0xd10 <lcd_init+0x14c>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <lcd_init+0x152>
     d16:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     d18:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d1a:	77 9b       	sbis	0x0e, 7	; 14
     d1c:	fe cf       	rjmp	.-4      	; 0xd1a <lcd_init+0x156>
  SPDR = byte;                        //send payload
     d1e:	8c e0       	ldi	r24, 0x0C	; 12
     d20:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     d22:	77 9b       	sbis	0x0e, 7	; 14
     d24:	fe cf       	rjmp	.-4      	; 0xd22 <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     d26:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d2a:	88 60       	ori	r24, 0x08	; 8
     d2c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d30:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d34:	87 7f       	andi	r24, 0xF7	; 247
     d36:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     d3a:	8f e1       	ldi	r24, 0x1F	; 31
     d3c:	9e e4       	ldi	r25, 0x4E	; 78
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <lcd_init+0x17a>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <lcd_init+0x180>
     d44:	00 00       	nop
     d46:	08 95       	ret

00000d48 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     d48:	4f 92       	push	r4
     d4a:	5f 92       	push	r5
     d4c:	6f 92       	push	r6
     d4e:	7f 92       	push	r7
     d50:	8f 92       	push	r8
     d52:	9f 92       	push	r9
     d54:	af 92       	push	r10
     d56:	bf 92       	push	r11
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	69 97       	sbiw	r28, 0x19	; 25
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	14 2f       	mov	r17, r20
     d7a:	42 2e       	mov	r4, r18
     d7c:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     d7e:	00 23       	and	r16, r16
     d80:	79 f0       	breq	.+30     	; 0xda0 <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     d82:	6b 01       	movw	r12, r22
     d84:	7c 01       	movw	r14, r24
     d86:	cc 24       	eor	r12, r12
     d88:	f7 fc       	sbrc	r15, 7
     d8a:	c3 94       	inc	r12
     d8c:	dd 24       	eor	r13, r13
     d8e:	ee 24       	eor	r14, r14
     d90:	ff 24       	eor	r15, r15
     d92:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     d94:	6b 01       	movw	r12, r22
     d96:	7c 01       	movw	r14, r24
     d98:	97 fd       	sbrc	r25, 7
     d9a:	a3 c0       	rjmp	.+326    	; 0xee2 <lcd_int32+0x19a>
     d9c:	c7 01       	movw	r24, r14
     d9e:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     da0:	44 20       	and	r4, r4
     da2:	09 f4       	brne	.+2      	; 0xda6 <lcd_int32+0x5e>
     da4:	96 c0       	rjmp	.+300    	; 0xed2 <lcd_int32+0x18a>
     da6:	9e 01       	movw	r18, r28
     da8:	2f 5f       	subi	r18, 0xFF	; 255
     daa:	3f 4f       	sbci	r19, 0xFF	; 255
     dac:	59 01       	movw	r10, r18
     dae:	49 01       	movw	r8, r18
     db0:	66 24       	eor	r6, r6
     db2:	6a 94       	dec	r6
     db4:	64 0c       	add	r6, r4
     db6:	71 2c       	mov	r7, r1
     db8:	3f ef       	ldi	r19, 0xFF	; 255
     dba:	63 1a       	sub	r6, r19
     dbc:	73 0a       	sbc	r7, r19
     dbe:	6a 0c       	add	r6, r10
     dc0:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     dc2:	2a e0       	ldi	r18, 0x0A	; 10
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodsi4>
     dce:	e6 2f       	mov	r30, r22
     dd0:	2a 8b       	std	Y+18, r18	; 0x12
     dd2:	3b 8b       	std	Y+19, r19	; 0x13
     dd4:	4c 8b       	std	Y+20, r20	; 0x14
     dd6:	5d 8b       	std	Y+21, r21	; 0x15
     dd8:	6a 89       	ldd	r22, Y+18	; 0x12
     dda:	7b 89       	ldd	r23, Y+19	; 0x13
     ddc:	8c 89       	ldd	r24, Y+20	; 0x14
     dde:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     de0:	20 e3       	ldi	r18, 0x30	; 48
     de2:	2e 0f       	add	r18, r30
     de4:	f4 01       	movw	r30, r8
     de6:	21 93       	st	Z+, r18
     de8:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     dea:	6e 16       	cp	r6, r30
     dec:	7f 06       	cpc	r7, r31
     dee:	49 f7       	brne	.-46     	; 0xdc2 <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     df0:	99 24       	eor	r9, r9
     df2:	93 94       	inc	r9
     df4:	94 0c       	add	r9, r4
     df6:	f5 01       	movw	r30, r10
     df8:	e4 0d       	add	r30, r4
     dfa:	f1 1d       	adc	r31, r1
     dfc:	2e e2       	ldi	r18, 0x2E	; 46
     dfe:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     e00:	2a e0       	ldi	r18, 0x0A	; 10
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 10 09 	call	0x1220	; 0x1220 <__divmodsi4>
     e0c:	e6 2f       	mov	r30, r22
     e0e:	2a 8b       	std	Y+18, r18	; 0x12
     e10:	3b 8b       	std	Y+19, r19	; 0x13
     e12:	4c 8b       	std	Y+20, r20	; 0x14
     e14:	5d 8b       	std	Y+21, r21	; 0x15
     e16:	6e 8b       	std	Y+22, r22	; 0x16
     e18:	7f 8b       	std	Y+23, r23	; 0x17
     e1a:	88 8f       	std	Y+24, r24	; 0x18
     e1c:	99 8f       	std	Y+25, r25	; 0x19
     e1e:	6a 89       	ldd	r22, Y+18	; 0x12
     e20:	7b 89       	ldd	r23, Y+19	; 0x13
     e22:	8c 89       	ldd	r24, Y+20	; 0x14
     e24:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     e26:	31 e0       	ldi	r19, 0x01	; 1
     e28:	39 0d       	add	r19, r9
     e2a:	d5 01       	movw	r26, r10
     e2c:	a9 0d       	add	r26, r9
     e2e:	b1 1d       	adc	r27, r1
     e30:	e0 5d       	subi	r30, 0xD0	; 208
     e32:	ec 93       	st	X, r30
     e34:	93 2e       	mov	r9, r19
        }while(qr.quot);
     e36:	61 15       	cp	r22, r1
     e38:	71 05       	cpc	r23, r1
     e3a:	81 05       	cpc	r24, r1
     e3c:	91 05       	cpc	r25, r1
     e3e:	01 f7       	brne	.-64     	; 0xe00 <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     e40:	11 23       	and	r17, r17
     e42:	61 f0       	breq	.+24     	; 0xe5c <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     e44:	51 10       	cpse	r5, r1
     e46:	4b c0       	rjmp	.+150    	; 0xede <lcd_int32+0x196>
     e48:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     e4a:	31 17       	cp	r19, r17
     e4c:	38 f4       	brcc	.+14     	; 0xe5c <lcd_int32+0x114>
     e4e:	f5 01       	movw	r30, r10
     e50:	e3 0f       	add	r30, r19
     e52:	f1 1d       	adc	r31, r1
     e54:	90 83       	st	Z, r25
     e56:	3f 5f       	subi	r19, 0xFF	; 255
     e58:	13 13       	cpse	r17, r19
     e5a:	f9 cf       	rjmp	.-14     	; 0xe4e <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     e5c:	00 23       	and	r16, r16
     e5e:	31 f0       	breq	.+12     	; 0xe6c <lcd_int32+0x124>
     e60:	f5 01       	movw	r30, r10
     e62:	e3 0f       	add	r30, r19
     e64:	f1 1d       	adc	r31, r1
     e66:	9d e2       	ldi	r25, 0x2D	; 45
     e68:	90 83       	st	Z, r25
     e6a:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e6c:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     e6e:	31 50       	subi	r19, 0x01	; 1
     e70:	f5 01       	movw	r30, r10
     e72:	e3 0f       	add	r30, r19
     e74:	f1 1d       	adc	r31, r1
     e76:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     e78:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e7a:	77 9b       	sbis	0x0e, 7	; 14
     e7c:	fe cf       	rjmp	.-4      	; 0xe7a <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     e7e:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     e80:	77 9b       	sbis	0x0e, 7	; 14
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     e84:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e88:	98 60       	ori	r25, 0x08	; 8
     e8a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e8e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     e92:	97 7f       	andi	r25, 0xF7	; 247
     e94:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e98:	85 ed       	ldi	r24, 0xD5	; 213
     e9a:	8a 95       	dec	r24
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <lcd_int32+0x152>
     e9e:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     ea0:	31 11       	cpse	r19, r1
     ea2:	e5 cf       	rjmp	.-54     	; 0xe6e <lcd_int32+0x126>

}
     ea4:	69 96       	adiw	r28, 0x19	; 25
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	df 90       	pop	r13
     ebe:	cf 90       	pop	r12
     ec0:	bf 90       	pop	r11
     ec2:	af 90       	pop	r10
     ec4:	9f 90       	pop	r9
     ec6:	8f 90       	pop	r8
     ec8:	7f 90       	pop	r7
     eca:	6f 90       	pop	r6
     ecc:	5f 90       	pop	r5
     ece:	4f 90       	pop	r4
     ed0:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     ed2:	91 2c       	mov	r9, r1
     ed4:	9e 01       	movw	r18, r28
     ed6:	2f 5f       	subi	r18, 0xFF	; 255
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	59 01       	movw	r10, r18
     edc:	91 cf       	rjmp	.-222    	; 0xe00 <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     ede:	90 e3       	ldi	r25, 0x30	; 48
     ee0:	b4 cf       	rjmp	.-152    	; 0xe4a <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     ee2:	f0 94       	com	r15
     ee4:	e0 94       	com	r14
     ee6:	d0 94       	com	r13
     ee8:	c0 94       	com	r12
     eea:	c1 1c       	adc	r12, r1
     eec:	d1 1c       	adc	r13, r1
     eee:	e1 1c       	adc	r14, r1
     ef0:	f1 1c       	adc	r15, r1
     ef2:	54 cf       	rjmp	.-344    	; 0xd9c <lcd_int32+0x54>

00000ef4 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
     ef4:	5f 92       	push	r5
     ef6:	6f 92       	push	r6
     ef8:	7f 92       	push	r7
     efa:	8f 92       	push	r8
     efc:	9f 92       	push	r9
     efe:	af 92       	push	r10
     f00:	bf 92       	push	r11
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
     f16:	61 97       	sbiw	r28, 0x11	; 17
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	5c 01       	movw	r10, r24
     f24:	96 2e       	mov	r9, r22
     f26:	54 2e       	mov	r5, r20
     f28:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     f2a:	8b 2c       	mov	r8, r11
     f2c:	88 1c       	adc	r8, r8
     f2e:	88 24       	eor	r8, r8
     f30:	88 1c       	adc	r8, r8
     f32:	78 2c       	mov	r7, r8
     f34:	9c 01       	movw	r18, r24
     f36:	97 fd       	sbrc	r25, 7
     f38:	9d c0       	rjmp	.+314    	; 0x1074 <__DATA_REGION_LENGTH__+0x74>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
     f3a:	55 20       	and	r5, r5
     f3c:	09 f4       	brne	.+2      	; 0xf40 <lcd_int16+0x4c>
     f3e:	8e c0       	rjmp	.+284    	; 0x105c <__DATA_REGION_LENGTH__+0x5c>
     f40:	8e 01       	movw	r16, r28
     f42:	0f 5f       	subi	r16, 0xFF	; 255
     f44:	1f 4f       	sbci	r17, 0xFF	; 255
     f46:	78 01       	movw	r14, r16
     f48:	cc 24       	eor	r12, r12
     f4a:	ca 94       	dec	r12
     f4c:	c5 0c       	add	r12, r5
     f4e:	d1 2c       	mov	r13, r1
     f50:	8f ef       	ldi	r24, 0xFF	; 255
     f52:	c8 1a       	sub	r12, r24
     f54:	d8 0a       	sbc	r13, r24
     f56:	c0 0e       	add	r12, r16
     f58:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     f5a:	6a e0       	ldi	r22, 0x0A	; 10
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	c9 01       	movw	r24, r18
     f60:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__divmodhi4>
     f64:	46 2f       	mov	r20, r22
     f66:	24 2f       	mov	r18, r20
     f68:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     f6a:	80 5d       	subi	r24, 0xD0	; 208
     f6c:	f7 01       	movw	r30, r14
     f6e:	81 93       	st	Z+, r24
     f70:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     f72:	ec 15       	cp	r30, r12
     f74:	fd 05       	cpc	r31, r13
     f76:	89 f7       	brne	.-30     	; 0xf5a <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     f78:	ff 24       	eor	r15, r15
     f7a:	f3 94       	inc	r15
     f7c:	f5 0c       	add	r15, r5
     f7e:	f8 01       	movw	r30, r16
     f80:	e5 0d       	add	r30, r5
     f82:	f1 1d       	adc	r31, r1
     f84:	8e e2       	ldi	r24, 0x2E	; 46
     f86:	80 83       	st	Z, r24
     f88:	01 c0       	rjmp	.+2      	; 0xf8c <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     f8a:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     f8c:	6a e0       	ldi	r22, 0x0A	; 10
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	c9 01       	movw	r24, r18
     f92:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__divmodhi4>
     f96:	46 2f       	mov	r20, r22
     f98:	24 2f       	mov	r18, r20
     f9a:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	9f 0d       	add	r25, r15
     fa0:	f8 01       	movw	r30, r16
     fa2:	ef 0d       	add	r30, r15
     fa4:	f1 1d       	adc	r31, r1
     fa6:	80 5d       	subi	r24, 0xD0	; 208
     fa8:	80 83       	st	Z, r24
        }
        while(qr.quot);
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	69 f7       	brne	.-38     	; 0xf8a <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     fb0:	61 10       	cpse	r6, r1
     fb2:	59 c0       	rjmp	.+178    	; 0x1066 <__DATA_REGION_LENGTH__+0x66>
     fb4:	b7 fc       	sbrc	r11, 7
     fb6:	63 c0       	rjmp	.+198    	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     fb8:	99 20       	and	r9, r9
     fba:	b1 f0       	breq	.+44     	; 0xfe8 <lcd_int16+0xf4>
     fbc:	68 2d       	mov	r22, r8
     fbe:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     fc0:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     fc2:	29 2f       	mov	r18, r25
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	49 2d       	mov	r20, r9
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	46 1b       	sub	r20, r22
     fcc:	57 0b       	sbc	r21, r23
     fce:	24 17       	cp	r18, r20
     fd0:	35 07       	cpc	r19, r21
     fd2:	54 f4       	brge	.+20     	; 0xfe8 <lcd_int16+0xf4>
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	f8 01       	movw	r30, r16
     fd8:	e2 0f       	add	r30, r18
     fda:	f3 1f       	adc	r31, r19
     fdc:	80 83       	st	Z, r24
     fde:	29 2f       	mov	r18, r25
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	24 17       	cp	r18, r20
     fe4:	35 07       	cpc	r19, r21
     fe6:	b4 f3       	brlt	.-20     	; 0xfd4 <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     fe8:	77 20       	and	r7, r7
     fea:	31 f0       	breq	.+12     	; 0xff8 <lcd_int16+0x104>
     fec:	f8 01       	movw	r30, r16
     fee:	e9 0f       	add	r30, r25
     ff0:	f1 1d       	adc	r31, r1
     ff2:	8d e2       	ldi	r24, 0x2D	; 45
     ff4:	80 83       	st	Z, r24
     ff6:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     ff8:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     ffa:	91 50       	subi	r25, 0x01	; 1
     ffc:	f8 01       	movw	r30, r16
     ffe:	e9 0f       	add	r30, r25
    1000:	f1 1d       	adc	r31, r1
    1002:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
    1004:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    1006:	77 9b       	sbis	0x0e, 7	; 14
    1008:	fe cf       	rjmp	.-4      	; 0x1006 <__DATA_REGION_LENGTH__+0x6>
  SPDR = byte;                        //send payload
    100a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
    100c:	77 9b       	sbis	0x0e, 7	; 14
    100e:	fe cf       	rjmp	.-4      	; 0x100c <__DATA_REGION_LENGTH__+0xc>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
    1010:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1014:	88 60       	ori	r24, 0x08	; 8
    1016:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    101a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    101e:	87 7f       	andi	r24, 0xF7	; 247
    1020:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
    1024:	f5 ed       	ldi	r31, 0xD5	; 213
    1026:	fa 95       	dec	r31
    1028:	f1 f7       	brne	.-4      	; 0x1026 <__DATA_REGION_LENGTH__+0x26>
    102a:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
    102c:	91 11       	cpse	r25, r1
    102e:	e5 cf       	rjmp	.-54     	; 0xffa <lcd_int16+0x106>
}
    1030:	61 96       	adiw	r28, 0x11	; 17
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	df 90       	pop	r13
    104a:	cf 90       	pop	r12
    104c:	bf 90       	pop	r11
    104e:	af 90       	pop	r10
    1050:	9f 90       	pop	r9
    1052:	8f 90       	pop	r8
    1054:	7f 90       	pop	r7
    1056:	6f 90       	pop	r6
    1058:	5f 90       	pop	r5
    105a:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
    105c:	f1 2c       	mov	r15, r1
    105e:	8e 01       	movw	r16, r28
    1060:	0f 5f       	subi	r16, 0xFF	; 255
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	93 cf       	rjmp	.-218    	; 0xf8c <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    1066:	99 20       	and	r9, r9
    1068:	09 f4       	brne	.+2      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    106a:	be cf       	rjmp	.-132    	; 0xfe8 <lcd_int16+0xf4>
    106c:	68 2d       	mov	r22, r8
    106e:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    1070:	80 e3       	ldi	r24, 0x30	; 48
    1072:	a7 cf       	rjmp	.-178    	; 0xfc2 <lcd_int16+0xce>
    1074:	22 27       	eor	r18, r18
    1076:	33 27       	eor	r19, r19
    1078:	28 1b       	sub	r18, r24
    107a:	39 0b       	sbc	r19, r25
    107c:	5e cf       	rjmp	.-324    	; 0xf3a <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    107e:	f3 94       	inc	r15
    1080:	f3 94       	inc	r15
    1082:	f8 01       	movw	r30, r16
    1084:	e9 0f       	add	r30, r25
    1086:	f1 1d       	adc	r31, r1
    1088:	8d e2       	ldi	r24, 0x2D	; 45
    108a:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
    108c:	99 20       	and	r9, r9
    108e:	59 f0       	breq	.+22     	; 0x10a6 <__DATA_REGION_LENGTH__+0xa6>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
    1090:	2f 2d       	mov	r18, r15
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	49 2d       	mov	r20, r9
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	24 17       	cp	r18, r20
    109a:	35 07       	cpc	r19, r21
    109c:	24 f4       	brge	.+8      	; 0x10a6 <__DATA_REGION_LENGTH__+0xa6>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    109e:	9f 2d       	mov	r25, r15
                bSigned = 0;
    10a0:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
    10a2:	80 e2       	ldi	r24, 0x20	; 32
    10a4:	97 cf       	rjmp	.-210    	; 0xfd4 <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
    10a6:	9f 2d       	mov	r25, r15
    10a8:	a7 cf       	rjmp	.-178    	; 0xff8 <lcd_int16+0x104>

000010aa <main>:
void alarmDisplay();
void buttonPress(uint8_t);

int main()
{
    DDRB = 0xF0; //set port B bits 4-7 B as outputs
    10aa:	80 ef       	ldi	r24, 0xF0	; 240
    10ac:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
    10ae:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
    10b0:	81 b3       	in	r24, 0x11	; 17
    10b2:	8c 60       	ori	r24, 0x0C	; 12
    10b4:	81 bb       	out	0x11, r24	; 17

    PORTB &= ~(1 << PORTB7); 
    10b6:	c7 98       	cbi	0x18, 7	; 24
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
    10b8:	80 b7       	in	r24, 0x30	; 48
    10ba:	88 60       	ori	r24, 0x08	; 8
    10bc:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
    10be:	87 b7       	in	r24, 0x37	; 55
    10c0:	81 60       	ori	r24, 0x01	; 1
    10c2:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
    10c4:	83 b7       	in	r24, 0x33	; 51
    10c6:	81 60       	ori	r24, 0x01	; 1
    10c8:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
    10ca:	87 b3       	in	r24, 0x17	; 23
    10cc:	87 60       	ori	r24, 0x07	; 7
    10ce:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
    10d0:	8d b1       	in	r24, 0x0d	; 13
    10d2:	80 65       	ori	r24, 0x50	; 80
    10d4:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
    10d6:	70 9a       	sbi	0x0e, 0	; 14

    PORTB &= ~(1 << PORTB7); 

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
    10d8:	78 94       	sei
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
    10da:	80 ec       	ldi	r24, 0xC0	; 192
    10dc:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dec_to_7seg>
    dec_to_7seg[1] = ~(ONE);
    10e0:	89 ef       	ldi	r24, 0xF9	; 249
    10e2:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <dec_to_7seg+0x1>
    dec_to_7seg[2] = ~(TWO);
    10e6:	84 ea       	ldi	r24, 0xA4	; 164
    10e8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <dec_to_7seg+0x2>
    dec_to_7seg[3] = ~(THREE);
    10ec:	80 eb       	ldi	r24, 0xB0	; 176
    10ee:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <dec_to_7seg+0x3>
    dec_to_7seg[4] = ~(FOUR);
    10f2:	89 e9       	ldi	r24, 0x99	; 153
    10f4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <dec_to_7seg+0x4>
    dec_to_7seg[5] = ~(FIVE);
    10f8:	82 e9       	ldi	r24, 0x92	; 146
    10fa:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <dec_to_7seg+0x5>
    dec_to_7seg[6] = ~(SIX);
    10fe:	82 e8       	ldi	r24, 0x82	; 130
    1100:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <dec_to_7seg+0x6>
    dec_to_7seg[7] = ~(SEVEN);
    1104:	88 ef       	ldi	r24, 0xF8	; 248
    1106:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <dec_to_7seg+0x7>
    dec_to_7seg[8] = ~(EIGHT);
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <dec_to_7seg+0x8>
    dec_to_7seg[9] = ~(NINE);
    1110:	88 e9       	ldi	r24, 0x98	; 152
    1112:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <dec_to_7seg+0x9>
    dec_to_7seg[10] = ~(COLON);
    1116:	8c ef       	ldi	r24, 0xFC	; 252
    1118:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <dec_to_7seg+0xa>
    dec_to_7seg[11] = ~(BLANK);
    111c:	8f ef       	ldi	r24, 0xFF	; 255
    111e:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <dec_to_7seg+0xb>
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
    1122:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <decoder>
    decoder[1] = DIGIT3;
    1126:	80 e1       	ldi	r24, 0x10	; 16
    1128:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <decoder+0x1>
    decoder[2] = DIS_COLON;
    112c:	80 e2       	ldi	r24, 0x20	; 32
    112e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <decoder+0x2>
    decoder[3] = DIGIT2;
    1132:	80 e3       	ldi	r24, 0x30	; 48
    1134:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <decoder+0x3>
    decoder[4] = DIGIT1;
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <decoder+0x4>
    decoder[7] = TRI_BUFFER;
    113e:	80 e7       	ldi	r24, 0x70	; 112
    1140:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <decoder+0x7>
    sei();         //enable interrupts before entering loop

    set_dec_to_7seg(); // set values for dec_to_7seg array
    set_decoder(); // set values for the decoder array

    lcd_init(); // initalize the lcd display
    1144:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <lcd_init>
//takes two 8-bit binary values(hours and minutes) and places the appropriate 
//equivalent 4 digit.
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    1148:	1d ec       	ldi	r17, 0xCD	; 205
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    114a:	0f ef       	ldi	r16, 0xFF	; 255

    while (1)
    {

        // spi 
        PORTD |= 1 << PORTD3; // clock_inh = 1
    114c:	93 9a       	sbi	0x12, 3	; 18
        PORTE &= 0 << PORTE6; // load sh/ld
    114e:	83 b1       	in	r24, 0x03	; 3
    1150:	13 b8       	out	0x03, r1	; 3

        PORTE |= 1 << PORTE6; // sh/ld
    1152:	1e 9a       	sbi	0x03, 6	; 3
        PORTD &= ~(1 << PORTD3); // clock_inh
    1154:	93 98       	cbi	0x12, 3	; 18

        SPDR = 0; // writing a random value
    1156:	1f b8       	out	0x0f, r1	; 15
       
        while (bit_is_clear(SPSR,SPIF)){}
    1158:	77 9b       	sbis	0x0e, 7	; 14
    115a:	fe cf       	rjmp	.-4      	; 0x1158 <__stack+0x59>
        data = SPDR; // read data
    115c:	8f b1       	in	r24, 0x0f	; 15
    115e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <data>
//                                  barGraph
// Set the mode on the bar graph. 
/******************************************************************************/
void barGraph(){
    
    SPDR = barGraphDisplay;
    1162:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <barGraphDisplay>
    1166:	8f b9       	out	0x0f, r24	; 15
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
    1168:	77 9b       	sbis	0x0e, 7	; 14
    116a:	fe cf       	rjmp	.-4      	; 0x1168 <__stack+0x69>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
    116c:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
    116e:	82 b3       	in	r24, 0x12	; 18
    1170:	12 ba       	out	0x12, r1	; 18
//takes two 8-bit binary values(hours and minutes) and places the appropriate 
//equivalent 4 digit.
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    1172:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <minutes>
    1176:	91 9f       	mul	r25, r17
    1178:	81 2d       	mov	r24, r1
    117a:	11 24       	eor	r1, r1
    117c:	86 95       	lsr	r24
    117e:	86 95       	lsr	r24
    1180:	86 95       	lsr	r24
    1182:	2a e0       	ldi	r18, 0x0A	; 10
    1184:	82 9f       	mul	r24, r18
    1186:	90 19       	sub	r25, r0
    1188:	11 24       	eor	r1, r1
    118a:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <segment_data>
    segment_data[1] = minutes / 10;
    118e:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <segment_data+0x1>
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
    1192:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <colonDisplay>
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	69 f1       	breq	.+90     	; 0x11f4 <__stack+0xf5>
    119a:	8b e0       	ldi	r24, 0x0B	; 11
    119c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <segment_data+0x2>
    segment_data[3] = hours % 10;
    11a0:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <hours>
    11a4:	91 9f       	mul	r25, r17
    11a6:	81 2d       	mov	r24, r1
    11a8:	11 24       	eor	r1, r1
    11aa:	86 95       	lsr	r24
    11ac:	86 95       	lsr	r24
    11ae:	86 95       	lsr	r24
    11b0:	2a e0       	ldi	r18, 0x0A	; 10
    11b2:	82 9f       	mul	r24, r18
    11b4:	90 19       	sub	r25, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <segment_data+0x3>
    segment_data[4] = hours / 10;
    11bc:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <segment_data+0x4>
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    11c0:	0a bb       	out	0x1a, r16	; 26
    11c2:	a7 e3       	ldi	r26, 0x37	; 55
    11c4:	b1 e0       	ldi	r27, 0x01	; 1
    11c6:	cb e4       	ldi	r28, 0x4B	; 75
    11c8:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
    11ca:	8d 91       	ld	r24, X+
    11cc:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
    11ce:	e9 91       	ld	r30, Y+
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	e1 5c       	subi	r30, 0xC1	; 193
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	80 81       	ld	r24, Z
    11d8:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11da:	8f ec       	ldi	r24, 0xCF	; 207
    11dc:	97 e0       	ldi	r25, 0x07	; 7
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	f1 f7       	brne	.-4      	; 0x11de <__stack+0xdf>
    11e2:	00 c0       	rjmp	.+0      	; 0x11e4 <__stack+0xe5>
    11e4:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	ac 33       	cpi	r26, 0x3C	; 60
    11ea:	b9 07       	cpc	r27, r25
    11ec:	71 f7       	brne	.-36     	; 0x11ca <__stack+0xcb>
        barGraph();
        // end of spi

        segclock();         // set each digit for the clock
        setDigit();         // setting the digit on display
        alarmDisplay();     // display "ALARM" on the LCD display
    11ee:	0e 94 ed 01 	call	0x3da	; 0x3da <alarmDisplay>
    } //while
    11f2:	ac cf       	rjmp	.-168    	; 0x114c <__stack+0x4d>
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segclock(){
    segment_data[0] = minutes % 10;
    segment_data[1] = minutes / 10;
    segment_data[2] = (colonDisplay == 1) ? 10 : 11;
    11f4:	8a e0       	ldi	r24, 0x0A	; 10
    11f6:	d2 cf       	rjmp	.-92     	; 0x119c <__stack+0x9d>

000011f8 <__divmodhi4>:
    11f8:	97 fb       	bst	r25, 7
    11fa:	07 2e       	mov	r0, r23
    11fc:	16 f4       	brtc	.+4      	; 0x1202 <__divmodhi4+0xa>
    11fe:	00 94       	com	r0
    1200:	07 d0       	rcall	.+14     	; 0x1210 <__divmodhi4_neg1>
    1202:	77 fd       	sbrc	r23, 7
    1204:	09 d0       	rcall	.+18     	; 0x1218 <__divmodhi4_neg2>
    1206:	0e 94 3e 09 	call	0x127c	; 0x127c <__udivmodhi4>
    120a:	07 fc       	sbrc	r0, 7
    120c:	05 d0       	rcall	.+10     	; 0x1218 <__divmodhi4_neg2>
    120e:	3e f4       	brtc	.+14     	; 0x121e <__divmodhi4_exit>

00001210 <__divmodhi4_neg1>:
    1210:	90 95       	com	r25
    1212:	81 95       	neg	r24
    1214:	9f 4f       	sbci	r25, 0xFF	; 255
    1216:	08 95       	ret

00001218 <__divmodhi4_neg2>:
    1218:	70 95       	com	r23
    121a:	61 95       	neg	r22
    121c:	7f 4f       	sbci	r23, 0xFF	; 255

0000121e <__divmodhi4_exit>:
    121e:	08 95       	ret

00001220 <__divmodsi4>:
    1220:	05 2e       	mov	r0, r21
    1222:	97 fb       	bst	r25, 7
    1224:	1e f4       	brtc	.+6      	; 0x122c <__divmodsi4+0xc>
    1226:	00 94       	com	r0
    1228:	0e 94 27 09 	call	0x124e	; 0x124e <__negsi2>
    122c:	57 fd       	sbrc	r21, 7
    122e:	07 d0       	rcall	.+14     	; 0x123e <__divmodsi4_neg2>
    1230:	0e 94 52 09 	call	0x12a4	; 0x12a4 <__udivmodsi4>
    1234:	07 fc       	sbrc	r0, 7
    1236:	03 d0       	rcall	.+6      	; 0x123e <__divmodsi4_neg2>
    1238:	4e f4       	brtc	.+18     	; 0x124c <__divmodsi4_exit>
    123a:	0c 94 27 09 	jmp	0x124e	; 0x124e <__negsi2>

0000123e <__divmodsi4_neg2>:
    123e:	50 95       	com	r21
    1240:	40 95       	com	r20
    1242:	30 95       	com	r19
    1244:	21 95       	neg	r18
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	4f 4f       	sbci	r20, 0xFF	; 255
    124a:	5f 4f       	sbci	r21, 0xFF	; 255

0000124c <__divmodsi4_exit>:
    124c:	08 95       	ret

0000124e <__negsi2>:
    124e:	90 95       	com	r25
    1250:	80 95       	com	r24
    1252:	70 95       	com	r23
    1254:	61 95       	neg	r22
    1256:	7f 4f       	sbci	r23, 0xFF	; 255
    1258:	8f 4f       	sbci	r24, 0xFF	; 255
    125a:	9f 4f       	sbci	r25, 0xFF	; 255
    125c:	08 95       	ret

0000125e <__umulhisi3>:
    125e:	a2 9f       	mul	r26, r18
    1260:	b0 01       	movw	r22, r0
    1262:	b3 9f       	mul	r27, r19
    1264:	c0 01       	movw	r24, r0
    1266:	a3 9f       	mul	r26, r19
    1268:	70 0d       	add	r23, r0
    126a:	81 1d       	adc	r24, r1
    126c:	11 24       	eor	r1, r1
    126e:	91 1d       	adc	r25, r1
    1270:	b2 9f       	mul	r27, r18
    1272:	70 0d       	add	r23, r0
    1274:	81 1d       	adc	r24, r1
    1276:	11 24       	eor	r1, r1
    1278:	91 1d       	adc	r25, r1
    127a:	08 95       	ret

0000127c <__udivmodhi4>:
    127c:	aa 1b       	sub	r26, r26
    127e:	bb 1b       	sub	r27, r27
    1280:	51 e1       	ldi	r21, 0x11	; 17
    1282:	07 c0       	rjmp	.+14     	; 0x1292 <__udivmodhi4_ep>

00001284 <__udivmodhi4_loop>:
    1284:	aa 1f       	adc	r26, r26
    1286:	bb 1f       	adc	r27, r27
    1288:	a6 17       	cp	r26, r22
    128a:	b7 07       	cpc	r27, r23
    128c:	10 f0       	brcs	.+4      	; 0x1292 <__udivmodhi4_ep>
    128e:	a6 1b       	sub	r26, r22
    1290:	b7 0b       	sbc	r27, r23

00001292 <__udivmodhi4_ep>:
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	5a 95       	dec	r21
    1298:	a9 f7       	brne	.-22     	; 0x1284 <__udivmodhi4_loop>
    129a:	80 95       	com	r24
    129c:	90 95       	com	r25
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	08 95       	ret

000012a4 <__udivmodsi4>:
    12a4:	a1 e2       	ldi	r26, 0x21	; 33
    12a6:	1a 2e       	mov	r1, r26
    12a8:	aa 1b       	sub	r26, r26
    12aa:	bb 1b       	sub	r27, r27
    12ac:	fd 01       	movw	r30, r26
    12ae:	0d c0       	rjmp	.+26     	; 0x12ca <__udivmodsi4_ep>

000012b0 <__udivmodsi4_loop>:
    12b0:	aa 1f       	adc	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	ee 1f       	adc	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	a2 17       	cp	r26, r18
    12ba:	b3 07       	cpc	r27, r19
    12bc:	e4 07       	cpc	r30, r20
    12be:	f5 07       	cpc	r31, r21
    12c0:	20 f0       	brcs	.+8      	; 0x12ca <__udivmodsi4_ep>
    12c2:	a2 1b       	sub	r26, r18
    12c4:	b3 0b       	sbc	r27, r19
    12c6:	e4 0b       	sbc	r30, r20
    12c8:	f5 0b       	sbc	r31, r21

000012ca <__udivmodsi4_ep>:
    12ca:	66 1f       	adc	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	1a 94       	dec	r1
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <__udivmodsi4_loop>
    12d6:	60 95       	com	r22
    12d8:	70 95       	com	r23
    12da:	80 95       	com	r24
    12dc:	90 95       	com	r25
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	bd 01       	movw	r22, r26
    12e4:	cf 01       	movw	r24, r30
    12e6:	08 95       	ret

000012e8 <_exit>:
    12e8:	f8 94       	cli

000012ea <__stop_program>:
    12ea:	ff cf       	rjmp	.-2      	; 0x12ea <__stop_program>
