%!PS-Adobe-3.0
%%Title: lab3_code.c
%%For: Anthony Nguyen
%%Creator: a2ps version 4.14
%%CreationDate: Wed Oct 27 11:46:53 2021
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(// lab3_code.c) c n
(// Antony Nguyen) N
(// 10.27.2021) N
() p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <avr/interrupt.h>) p n
() N
(//  HARDWARE SETUP:) c n
(//  PORTA is connected to the segments of the LED display. and to the pushbutton) N
(s.) N
(//  PORTA.0 corresponds to segment a, PORTA.1 corresponds to segement b, etc.) N
(//  PORTB bits 4-6 go to a,b,c inputs of the 74HC138.) N
(//  PORTB bit 7 goes to the PWM transistor base.) N
() p n
(// Bargraph board           Mega128 board ) c n
(// --------------      ----------------------    ) N
(//     reglck            PORTD bit 2 \(ss_n\)                      ) N
(//     srclk             PORTB bit 1 \(sclk\)) N
(//     sdin              PORTB bit 2 \(mosi\)) N
(//     oe_n              PORTB bit 7) N
(//     gnd2                   ground) N
(//     vdd2                     vcc) N
(//     sd_out               no connect) N
() p n
(// Encoder board            Mega128 board) c n
(// --------------      ----------------------  ) N
(//   shift_ld_n             PORTE bit 6) N
(//   clk_inh                PORTD bit 3 \(ss\)) N
(//   sck                    PORTB bit 1 \(sclk\)) N
(//   ser_in                 no connect) N
(//   ser_out                PORTB bit 3 \(miso\)) N
(//   vdd1                   vcc) N
(//   gnd1                   ground) N
() p n
(// #define F_CPU 16000000 // cpu speed in hertz) c n
(#define) K
( TRUE 1) p n
(#define) K
( FALSE 0) p n
(#define) K
( MAX_BIT_DEBOUNCE 8 ) p
(// numbers of bytes for the debounce) c n
() p n
(// segs to turn on for LED, negate everything) c n
(#define) K
( ZERO 0b00111111  ) p
(// A, B, C, D, E, F) c n
(#define) K
( ONE 0b00000110   ) p
(// B, C) c n
(#define) K
( TWO 0b01011011   ) p
(// A, B, D, E, G) c n
(#define) K
( THREE 0b01001111 ) p
(// A, B, C, D, G) c n
(#define) K
( FOUR 0b01100110  ) p
(// B, C, F, G) c n
(#define) K
( FIVE 0b01101101  ) p
(// A, C, D, F, G) c n
(#define) K
( SIX 0b01111101   ) p
(// A, C, D, E, F, G) c n
(#define) K
( SEVEN 0b00000111 ) p
(// A, B, C) c n
(#define) K
( EIGHT 0b01111111 ) p
(// A, B, C, D, E, F, G) c n
(#define) K
( NINE 0b01100111  ) p
(// A, B, C, F, G) c n
(#define) K
( BLANK 0x00) p n
(#define) K
( COLON 0b00000011 ) p
(// A, B) c n
(// Port B decoder, remember to not all the digits) N
(#define) K
( DIGIT1 0x40     ) p
(//\(\(1 << PB6\) | \(0 << PB5\) | \(0 << PB4\)\)) c n
(#define) K
( DIGIT2 0x30     ) p
(//\(\(0 << PB6\) | \(1 << PB5\) | \(0 << PB4\)\)) c n
(#define) K
( DIGIT3 0x10     ) p
(//\(\(0 << PB6\) | \(0 << PB5\) | \(1 << PB4\)\)) c n
(#define) K
( DIGIT4 0x00     ) p
(//\(\(0 << PB6\) | \(0 << PB5\) | \(0 << PB4\)\)) c n
(#define) K
( DIS_COLON 0x20  ) p
(//\(\(0 << PB6\) | \(1 << PB5\) | \(0 << PB4\)\)) c n
(#define) K
( TRI_BUFFER 0x70 ) p
(//\(\(1 << PB6\) | \(1 << PB5\) | \(1 << PB4\)\)) c n
() p n
(//holds data to be sent to the segments. logic zero turns segment on) c n
(uint8_t segment_data[5];) p n
() N
(//decimal to 7-segment LED display encodings, logic "0" turns on segment) c n
(uint8_t dec_to_7seg[12];) p n
() N
(// Decoder 3 to 8) c n
(uint8_t decoder[8];) p n
(lab3_code.c) (Page 1/7) (Oct 27, 21 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(// current number on the display) c n
(uint16_t current_num = 0;) p n
() N
(static) K
( uint8_t barGraphOutput = 0;) p n
(static) K
( uint8_t incrementFlag = -1;) p n
() N
() N
(// prototypes) c n
(int) k
(8_t chk_buttons\() p
(int) k
( button\); ) p
(// check what button is being pressed) c n
(void) k
( segsum\(uint16_t sum\);) p n
(void) k
( setDigit\(\);) p n
(void) k
( clearDecoder\(\);) p n
(void) k
( set_dec_to_7seg\(\);) p n
(void) k
( set_decoder\(\);) p n
() N
(// timers fucntions) c n
(void) k
( spi_init\() p
(void) k
(\);) p n
(void) k
( tcnt0_init\() p
(void) k
(\);) p n
(ISR\(TIMER0_OVF_vect\);) N
() N
(// encoder) c n
(void) k
( barGraph\(uint8_t\);) p n
(uint8_t encoderRead\(uint8_t data, uint8_t knob\);) N
() N
(int) k
( main\(\)) p n
({) N
(    DDRB = 0xF0; ) S
(// set port B bits 4-7 B as outputs, decoder) c n
(    DDRE = 0x40; ) p
(// set E6 to output) c n
(    DDRD = 0xB0; ) p
(// slave select pins) c n
(    ) p n
() N
(    ) S
(// current_num = 0; // the number that will be on the display) c n
(    tcnt0_init\(\);  ) p
(//initalize counter timer zero) c n
(    spi_init\(\);    ) p
(//initalize SPI port) c n
(    sei\(\);         ) p
(//enable interrupts before entering loop) c n
(    set_dec_to_7seg\(\); ) p
(// set values for dec_to_7seg array) c n
(    set_decoder\(\); ) p
(// set values for the decoder array) c n
() p n
() N
(    ) S
(while) K
( \(1\)) p n
(    {) N
() N
(        ) S
(if) K
( \(current_num > 1023\)) p n
(            current_num -= 1024;) N
() N
(        segsum\(current_num\); ) S
(// set each digit) c n
(        setDigit\(\);         ) p
(// setting the digit on display) c n
() p n
() N
(    } ) S
(//while) c n
(    ) p
(return) K
( 0;) p n
(} ) S
(//main) c n
() p n
(/******************************************************************************/) c n
(//                              set_dec_to_7seg) N
(// setting the dec_to_7seg array for which segment to turn off in order to see) N
(// the digit on the LED display. ) N
(/******************************************************************************/) N
(void) k
( set_dec_to_7seg\(\)) p n
({) N
(    dec_to_7seg[0] = ~\(ZERO\);) N
(    dec_to_7seg[1] = ~\(ONE\);) N
(    dec_to_7seg[2] = ~\(TWO\);) N
(    dec_to_7seg[3] = ~\(THREE\);) N
(    dec_to_7seg[4] = ~\(FOUR\);) N
(    dec_to_7seg[5] = ~\(FIVE\);) N
(    dec_to_7seg[6] = ~\(SIX\);) N
(    dec_to_7seg[7] = ~\(SEVEN\);) N
(lab3_code.c) (Page 2/7) (Oct 27, 21 11:46) title
border
grestore
(Printed by Anthony Nguyen) rhead
(lab3_code.c) (1/4) (Wednesday October 27, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    dec_to_7seg[8] = ~\(EIGHT\);) p n
(    dec_to_7seg[9] = ~\(NINE\);) N
(    dec_to_7seg[10] = ~\(COLON\);) N
(    dec_to_7seg[11] = ~\(BLANK\);) N
(}) N
() N
(/******************************************************************************/) c n
(//                              set_decoder) N
(// This function sets the right value for decoder so that it display the right ) N
(// digit. The index value of the decoder represents the Yx output of the decoder) N
(.) N
(/******************************************************************************/) N
(void) k
( set_decoder\(\)) p n
({) N
(    decoder[0] = DIGIT4;) N
(    decoder[1] = DIGIT3;) N
(    decoder[2] = DIS_COLON;) N
(    decoder[3] = DIGIT2;) N
(    decoder[4] = DIGIT1;) N
(    decoder[7] = TRI_BUFFER;) N
(}) N
() N
(//******************************************************************************) c n
(//                            chk_buttons) N
(//Checks the state of the button number passed to it. It shifts in ones till) N
(//the button is pushed. Function returns a 1 only once per debounced button) N
(//push so a debounce and toggle function can be implemented at the same time.) N
(//Adapted to check all buttons from Ganssel's "Guide to Debouncing") N
(//Expects active low pushbuttons on PINA port.  Debounce time is determined by) N
(//external loop delay times 12.) N
(//) N
(int) k
(8_t chk_buttons\() p
(int) k
( button\)) p n
({) N
() N
(    ) S
(static) K
( uint16_t state[MAX_BIT_DEBOUNCE]; ) p
(//holds present state) c n
() p n
(    ) S
(// bit_is_clear: test whether but but in IO register sfr is clear. This will) c n
( return non zero) N
(    ) p
(// if the but is clear, and 0 if the bit is set) c n
(    ) p
(// handling multiple inputs) c n
(    ) p
(// https://www.avrfreaks.net/sites/default/files/debouncing.pdf') c n
() p n
(    state[button] = \(state[button] << 1\) | \(!bit_is_clear\(PINA, button\)\) | 0xE00) N
(0; ) S
(// when the second button is pressed) c n
() p n
(    ) S
(// debuging to see how state debouncing works) c n
(    ) p
(// PORTB = state[button];) c n
(    ) p
(// _delay_ms\(1000\);) c n
() p n
(    ) S
(if) K
( \(state[button] == 0xF000\)) p n
(        ) S
(return) K
( 1;) p n
() N
(    ) S
(return) K
( 0;) p n
(}) N
() N
(//******************************************************************************) c n
(*****) N
(//                                   segment_sum) N
(//takes a 16-bit binary input value and places the appropriate equivalent 4 digi) N
(t) N
(//BCD segment code in the array segment_data for display.) N
(//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|) N
(void) k
( segsum\(uint16_t sum\)) p n
({) N
(    ) S
(// sum is the total count, place each digit into segment_data[5]) c n
(    ) p
(// determine how many digits there are) c n
(    ) p
(//break up decimal sum into 4 digit-segments) c n
(    ) p
(//blank out leading zero digits) c n
(    ) p
(//now move data to right place for misplaced colon position) c n
(lab3_code.c) (Page 3/7) (Oct 27, 21 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(int) k
( i;) p
(//, leading_zero;) c n
() p n
(    segment_data[0] = sum % 10;) N
(    segment_data[1] = \(sum % 100\) / 10;) N
(    segment_data[2] = 11; ) S
(// doesn't turn on the colon, blank) c n
(    segment_data[3] = \(sum % 1000\) / 100;) p n
(    segment_data[4] = sum / 1000;) N
() N
(    ) S
(// remove the leading zeros) c n
(    ) p
(// leading_zero = 1;) c n
(    ) p
(for) K
(\(i = 4; i >0; i--\){) p n
(        ) S
(if) K
(\(i == 2\)) p n
(            ) S
(continue) K
(;) p n
(        ) S
(if) K
(\(segment_data[i] == 0\)) p n
(            segment_data[i] = 11; ) S
(// replace it with a blank) c n
(        ) p n
(        ) S
(else) K n
(            ) p
(break) K
(;) p n
(        ) N
(    }) N
() N
(} ) S
(//segment_sum) c n
() p n
() N
(/***************************************************************/) c n
(//                      setDigit function) N
(// it will choose its given digit and set that number for it.) N
(// The cases set the value on PORTA to the right segments and PORTB) N
(// to decoder.) N
(/***************************************************************/) N
() p n
(void) k
( setDigit\(\)) p n
({) N
(    DDRA = 0xFF; ) S
(// setting PORT A as an output) c n
(    ) p
(int) k
( i;) p n
(    uint8_t temp_portb; ) S
(// holds old value of port b) c n
(    ) p
(for) K
( \(i = 0; i < 5; i++\)) p n
(    { ) S
(// looping through the segment data and assigning the port the right value) c n
(s.) N
(        temp_portb = PORTB & 0x0f; ) p
(// taket he 4 LSB bits ) c n
(        PORTB = decoder[i] | temp_portb; ) p
(// enable the right digit to turn on) c n
(        PORTA = dec_to_7seg[segment_data[i]]; ) p
(// turn on the right segments) c n
(        _delay_ms\(0.5\);) p n
(    }) N
(}) N
() N
() N
(/***********************************************************************/) c n
(//                            spi_init                               ) N
(//Initalizes the SPI port on the mega128. Does not do any further   ) N
(//external device specific initalizations.  Sets up SPI to be:                  ) N
(      ) N
(//master mode, clock=clk/2, cycle half phase, low polarity, MSB first) N
(//interrupts disabled, poll SPIF bit in SPSR to check xmit completion) N
(/***********************************************************************/) N
(void) k
( spi_init\() p
(void) k
(\){) p n
(    DDRB  |=   0x07; ) S
(//Turn on SS, MOSI, SCLK) c n
(    SPCR  |=   \(1 << SPE\) | \(1 << MSTR\); ) p
(//enable SPI, master mode ) c n
(    SPSR  |=   \(1 << SPI2X\); ) p
(// double speed operation) c n
(}) p
(//spi_init) c n
() p n
(/***********************************************************************/) c n
(//                              tcnt0_init                             ) N
(//Initalizes timer/counter0 \(TCNT0\). TCNT0 is running in async mode) N
(//with external 32khz crystal.  Runs in normal mode with no prescaling.) N
(//Interrupt occurs at overflow 0xFF.) N
(//) N
(void) k
( tcnt0_init\() p
(void) k
(\){) p n
(    ASSR   |=  \(1 << AS0\); ) S
(//ext osc TOSC) c n
(lab3_code.c) (Page 4/7) (Oct 27, 21 11:46) title
border
grestore
(Printed by Anthony Nguyen) rhead
(lab3_code.c) (2/4) (Wednesday October 27, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    TIMSK  |=  \(1 << TOIE0\); ) p
(//enable TCNT0 overflow interrupt) c n
(    TCCR0  |=  \(1 << CS00\); ) p
(//normal mode, no prescale) c n
(}) p n
() N
(/*************************************************************************/) c n
(//                           timer/counter0 ISR                          ) N
(//When the TCNT0 overflow interrupt occurs, the count_7ms variable is    ) N
(//incremented. Every 7680 interrupts the minutes counter is incremented.) N
(//TCNT0 interrupts come at 7.8125ms internals.) N
(// 1/32768         = 30.517578uS) N
(//\(1/32768\)*256    = 7.8125ms) N
(//\(1/32768\)*256*64 = 500mS) N
(/*************************************************************************/) N
(ISR\(TIMER0_OVF_vect\){) p n
() N
(    uint8_t serial_out;) N
(    ) S
(static) K
( uint8_t bargraph = 0x00;) p n
(        ) S
(static) K
( uint8_t light = 0x00;) p n
() N
(    ) S
(// getting the data from serial out) c n
() p n
(    PORTD |= 1 << PORTD3; ) S
(// turning on clk_inh) c n
(    PORTE &= 0 << PORTE6; ) p
(// turning SH/LD low) c n
() p n
(    _delay_ms\(1\);) N
(    PORTD &= 0 << PORTD3; ) S
(// turning off clk_inh) c n
(    PORTE |= 1 << PORTE6;) p
(// turing SH/LD high) c n
(  ) p n
(    SPDR = light;) N
(    ) S
(while) K
( \(bit_is_clear\(SPSR,SPIF\)\){}               ) p
(//wait till data sent out \(w) c n
(hile loop\)) N
(    ) p n
() N
(    bargraph = SPDR;) N
(    ) S
(if) K
( \(bargraph != 0x00\) {) p n
(        light = 0xff;) N
(    }) N
() N
(    ) N
(    ) N
(    uint8_t temp = encoderRead\(serial_out,0\);) N
(    ) S
(// uint8_t temp1 = encoderRead\(serial_out, 1\);) c n
(    ) p
(if) K
( \(temp != -1\)) p n
(        incrementFlag = temp;) N
(    ) S
(// uint8_t rotation[2] = {incrementFlag, temp1};) c n
() p n
(    barGraph\(incrementFlag\);) N
(    ) S
(// barGraph\(rotation[0]\);) c n
(    ) p
(// barGraph\(-1\);) c n
() p n
() N
(    ) S
(// check for push buttons) c n
(    uint16_t j, inc;) p n
(    ) N
(    ) S
(//enable tristate buffer for pushbutton switches) c n
(    PORTB |= TRI_BUFFER;) p n
(    ) S
(//insert loop demake lay for debounce) c n
(    ) p
(for) K
( \(j = 0; j < 12; j++\)) p n
(    { ) S
(// for the debounce) c n
(      ) p n
(        ) S
(//make PORTA an input port with pullups) c n
(        DDRA = 0x00;  ) p
(// set port A as inputs) c n
(        PORTA = 0xFF; ) p
(// set port A as pull ups) c n
(        ) p n
(        inc = 0; ) S
(// increment initalize to 0 first) c n
(        ) p n
(        ) S
(if) K
( \(chk_buttons\(1\)\){ ) p
(// S1, + or - 2) c n
(            inc = 1 << 1;) p n
(            ) S
(// check if its increment or decrement) c n
(lab3_code.c) (Page 5/7) (Oct 27, 21 11:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            current_num += inc;) p n
(            ) S
(// if \(return_val == -1\){) c n
(            ) p
(//     continue;) c n
(            ) p
(// }) c n
(            ) p
(// if \(incrementFlag == 1\)) c n
(            ) p
(//     current_num += inc;) c n
(            ) p
(// else if\(incrementFlag == 0\)) c n
(            ) p
(//     current_num -= inc;) c n
(            ) p n
(        }) N
(        ) S
(if) K
( \(chk_buttons\(2\)\){ ) p
(// S2, + or - 4) c n
(            inc = 1 << 2;) p n
(            current_num += inc;) N
(            ) S
(// if \(incrementFlag == 1\)) c n
(            ) p
(//     current_num += inc;) c n
(            ) p
(// else if \(incrementFlag == 0\)) c n
(            ) p
(//     current_num -= inc;) c n
(            ) p n
(        }) N
(    ) N
(    }) N
(    ) S
(// current_num += 1;) c n
(}) p n
() N
() N
(/*************************************************************************/) c n
(//                                  encoder) N
(/*************************************************************************/) N
(uint8_t encoderRead\(uint8_t data, uint8_t knob\){) p n
(    ) N
(        ) S
(// check for encoder) c n
(    ) p
(static) K
( uint8_t new_A = -1, old_A = -1, new_B = -1, old_B = -1, count = 0; ) p n
(    uint8_t return_val, a, b; ) N
() N
(    a = \(knob == 0\) ? 1 : 4; ) S
(// where the position of a is) c n
(    b = \(knob == 0\) ? 2 : 8; ) p
(// where the position of b is) c n
() p n
(    new_A = data & a; ) S
(// most LSB) c n
(    new_B = data & b; ) p
(// 2nd LSB) c n
() p n
() N
(    return_val = -1; ) S
(// default return value, no change) c n
() p n
(    ) S
(if) K
( \(\(new_A != old_A\) || \(new_B != old_B\)\){ ) p
(// if change occured) c n
(        ) p
(if) K
(\(\(new_A == 0\) && \(new_B == 0\)\){) p n
(            ) S
(if) K
( \(old_A == 1\){) p n
(                count++;) N
(            }) N
(            ) S
(else) K
({) p n
(                count--;) N
(            }) N
(        }) N
(        ) S
(else) K
( ) p
(if) K
( \(\(new_A == 0\) && \(new_B == 1\)\){) p n
(            ) S
(if) K
( \(old_A == 0\){) p n
(                count++;) N
(               ) N
(            }) N
(            ) S
(else) K
({) p n
(                count--;) N
(                ) N
() N
(            }) N
(        }) N
(        ) S
(else) K
( ) p
(if) K
( \(\(new_A == 1\) && \(new_B == 1\)\){ ) p
(// detent position) c n
(            ) p
(if) K
( \(old_A == 0\){ ) p
(// one direction ) c n
(                ) p
(if) K
( \(count == 3\){) p n
(                    return_val = 0;) N
(                }) N
(            ) N
(lab3_code.c) (Page 6/7) (Oct 27, 21 11:46) title
border
grestore
(Printed by Anthony Nguyen) rhead
(lab3_code.c) (3/4) (Wednesday October 27, 2021) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(            }) p n
(            ) S
(else) K
({ ) p
(// or the other direction) c n
(                ) p
(if) K
( \(count == -3\){) p n
(                    return_val = 1;) N
(                }) N
(            ) N
(            }) N
(            count = 0; ) S
(// count is always reset in detent position) c n
(        }) p n
(        ) S
(else) K
( ) p
(if) K
( \(\(new_A == 1\) && \(new_B == 0\)\){) p n
(            ) S
(if) K
( \(old_A == 1\){) p n
(                count++;) N
(           ) N
(            }) N
(            ) S
(else) K
({ ) p n
(                count--;) N
(              ) N
(            }) N
(        }) N
() N
(        old_A = new_A; ) S
(// save what are now old values) c n
(        old_B = new_B;) p n
() N
(    } ) S
(// if changed occured) c n
(    ) p
(// if return value is still -1 then nothing happen) c n
(    ) p
(return) K
( \(return_val\); ) p
(// return coder state) c n
() p n
() N
(}) N
() N
() N
() N
(/******************************************************************************/) c n
(//                             barGraph) N
(//) N
(//) N
(//) N
(/******************************************************************************/) N
(void) k
( barGraph\(uint8_t increment\){) p n
(    uint8_t display_mode; ) S
(//holds count for display ) c n
() p n
(    ) S
(// top half on for increment) c n
(    ) p
(if) K
( \(increment == 1\)) p n
(        display_mode = 0xF0;) N
(    ) S
(else) K
( ) p
(if) K
( \(increment == 0\) ) p
(// bot half on for decrement) c n
(        display_mode = 0x0F;) p n
(    ) S
(else) K n
(        display_mode = 0b10101010; ) p
(// otherwise display every other) c n
(    ) p n
() N
(    SPDR = display_mode;) N
(    ) S
(// barGraphOutput = display_mode;               //send to display ) c n
(    ) p
(while) K
( \(bit_is_clear\(SPSR,SPIF\)\){}               ) p
(//wait till data sent out \(w) c n
(hile loop\)) N
(    PORTD |= \(1 << PORTD2\);          ) p
(//HC595 output reg - rising edge...) c n
(    PORTD &= \(0 << PORTD2\);          ) p
(//and falling edge) c n
( ) p n
(}) S
(lab3_code.c) (Page 7/7) (Oct 27, 21 11:46) title
border
grestore
(Printed by Anthony Nguyen) rhead
(lab3_code.c) (4/4) (Wednesday October 27, 2021) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
