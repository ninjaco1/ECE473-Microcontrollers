
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001f2  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000286  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c0  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ee  00000000  00000000  0000155f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cf  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  00001bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 df 00 	call	0x1be	; 0x1be <main>
  ac:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
  ba:	8d b1       	in	r24, 0x0d	; 13
  bc:	80 65       	ori	r24, 0x50	; 80
  be:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
  c0:	70 9a       	sbi	0x0e, 0	; 14
  c2:	08 95       	ret

000000c4 <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
  c4:	80 b7       	in	r24, 0x30	; 48
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
  ca:	87 b7       	in	r24, 0x37	; 55
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
  d0:	83 b7       	in	r24, 0x33	; 51
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	83 bf       	out	0x33, r24	; 51
  d6:	08 95       	ret

000000d8 <barGraph>:
void barGraph(uint8_t incrementFlag){
    static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
    uint8_t display_mode; //holds count for display 

    // top half on for increment
    if (incrementFlag == 1)
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	a1 f0       	breq	.+40     	; 0x104 <barGraph+0x2c>
        display_mode = 0xF0;
    else if (incrementFlag == 0)
  dc:	88 23       	and	r24, r24
  de:	81 f0       	breq	.+32     	; 0x100 <barGraph+0x28>
        display_mode = 0x0F;
    else
        display_mode = 0b10101010;
  e0:	9a ea       	ldi	r25, 0xAA	; 170
    // bot half on for decrement

    count_7ms++;                //increment count every 7.8125 ms 
  e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <count_7ms.1759>
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <count_7ms.1759>
    if ((count_7ms % 64)==0){ //?? interrupts equals one half second 
  ec:	8f 73       	andi	r24, 0x3F	; 63
  ee:	39 f4       	brne	.+14     	; 0xfe <barGraph+0x26>
        SPDR = display_mode;               //send to display 
  f0:	9f b9       	out	0x0f, r25	; 15
        while (!(TIFR & (1 << TOV0))){}               //wait till data sent out (while loop)
  f2:	06 b6       	in	r0, 0x36	; 54
  f4:	00 fe       	sbrs	r0, 0
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <barGraph+0x1a>
        PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
  f8:	92 9a       	sbi	0x12, 2	; 18
        PORTD &= (0 << PORTD2);          //and falling edge
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	12 ba       	out	0x12, r1	; 18
  fe:	08 95       	ret

    // top half on for increment
    if (incrementFlag == 1)
        display_mode = 0xF0;
    else if (incrementFlag == 0)
        display_mode = 0x0F;
 100:	9f e0       	ldi	r25, 0x0F	; 15
 102:	ef cf       	rjmp	.-34     	; 0xe2 <barGraph+0xa>
    static uint8_t count_7ms = 0;        //holds 7ms tick count in binary
    uint8_t display_mode; //holds count for display 

    // top half on for increment
    if (incrementFlag == 1)
        display_mode = 0xF0;
 104:	90 ef       	ldi	r25, 0xF0	; 240
 106:	ed cf       	rjmp	.-38     	; 0xe2 <barGraph+0xa>

00000108 <encoderRead>:
    // if (display_count == 0x80){display_count= 1;} //back to 1st positon

}

uint8_t encoderRead(uint8_t data){
    DDRB &= 0 << 3;
 108:	97 b3       	in	r25, 0x17	; 23
 10a:	17 ba       	out	0x17, r1	; 23
    // new_A = serial_out & 0x03; // buttom 2 bits
    
    // // encoder 2, CD
    // new_B = (serial_out & 0x0C) >> 2; // the next two then right shift the bits so they match new_A

    new_A = data & 0x01; // most LSB
 10c:	98 2f       	mov	r25, r24
 10e:	91 70       	andi	r25, 0x01	; 1
    new_B = data & 0x02; // 2nd LSB
 110:	82 70       	andi	r24, 0x02	; 2

    return_val = -1; // default return value, no change



    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
 112:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <old_A.1768>
 116:	92 17       	cp	r25, r18
 118:	d9 f0       	breq	.+54     	; 0x150 <encoderRead+0x48>
        if((new_A == 0) && (new_B == 0)){
 11a:	99 23       	and	r25, r25
 11c:	79 f0       	breq	.+30     	; 0x13c <encoderRead+0x34>
                }
            
            }
            // count = 0; // count is always reset in detent position
        }
        else if ((new_A == 1) && (new_B == 0)){
 11e:	81 11       	cpse	r24, r1
 120:	07 c0       	rjmp	.+14     	; 0x130 <encoderRead+0x28>
            if (old_A == 1){
 122:	21 30       	cpi	r18, 0x01	; 1
 124:	79 f0       	breq	.+30     	; 0x144 <encoderRead+0x3c>
            if (old_A == 0){
                count++;
               
            }
            else{
                count--;
 126:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
                count--;
              
            }
        }

        old_A = new_A; // save what are now old values
 130:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <old_A.1768>
        old_B = new_B;
 134:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <old_B.1770>
    //     // _delay_ms(1000);
    // } 



 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	08 95       	ret
    return_val = -1; // default return value, no change



    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
        if((new_A == 0) && (new_B == 0)){
 13c:	81 11       	cpse	r24, r1
 13e:	f8 cf       	rjmp	.-16     	; 0x130 <encoderRead+0x28>
            if (old_A == 0){
 140:	21 11       	cpse	r18, r1
 142:	f1 cf       	rjmp	.-30     	; 0x126 <encoderRead+0x1e>
                count++;
 144:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	f0 cf       	rjmp	.-32     	; 0x130 <encoderRead+0x28>

    return_val = -1; // default return value, no change



    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
 150:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <old_B.1770>
 154:	83 13       	cpse	r24, r19
 156:	e1 cf       	rjmp	.-62     	; 0x11a <encoderRead+0x12>
 158:	ef cf       	rjmp	.-34     	; 0x138 <encoderRead+0x30>

0000015a <__vector_16>:
//TCNT0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31

    uint8_t incrementFlag = -1;
    static uint8_t serial_out;
    // getting the data from serial out

    PORTE &= 0 << PORTE6; // SH/LD held low so it doesn't read from serial in but from encoder
 180:	83 b1       	in	r24, 0x03	; 3
 182:	13 b8       	out	0x03, r1	; 3
    PORTB &= 0 << PORTB7; // gnd the oe_n 
 184:	88 b3       	in	r24, 0x18	; 24
 186:	18 ba       	out	0x18, r1	; 24


    // clk pulse, regclk, encoder, clk_inh
    PORTD |= 1 << PORTD3;
 188:	93 9a       	sbi	0x12, 3	; 18
    PORTD &= 0 << PORTD3;
 18a:	82 b3       	in	r24, 0x12	; 18
 18c:	12 ba       	out	0x12, r1	; 18
    // serial_out = read_write_spi(); // read 

    serial_out = SPDR;
 18e:	8f b1       	in	r24, 0x0f	; 15
    barGraph(encoderRead(serial_out));
 190:	0e 94 84 00 	call	0x108	; 0x108 <encoderRead>
 194:	0e 94 6c 00 	call	0xd8	; 0xd8 <barGraph>
    // while (!(TIFR & (1 << TOV0))){} 


}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	bf 91       	pop	r27
 19e:	af 91       	pop	r26
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	7f 91       	pop	r23
 1a6:	6f 91       	pop	r22
 1a8:	5f 91       	pop	r21
 1aa:	4f 91       	pop	r20
 1ac:	3f 91       	pop	r19
 1ae:	2f 91       	pop	r18
 1b0:	0f 90       	pop	r0
 1b2:	0b be       	out	0x3b, r0	; 59
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <main>:
uint8_t encoderRead(uint8_t data);


int main() {

    DDRB = 0xF0; // set port B bits 4-7 B as outputs, decoder
 1be:	80 ef       	ldi	r24, 0xF0	; 240
 1c0:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
 1c2:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
 1c4:	81 b3       	in	r24, 0x11	; 17
 1c6:	8c 60       	ori	r24, 0x0C	; 12
 1c8:	81 bb       	out	0x11, r24	; 17
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 1ca:	80 b7       	in	r24, 0x30	; 48
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 1d0:	87 b7       	in	r24, 0x37	; 55
 1d2:	81 60       	ori	r24, 0x01	; 1
 1d4:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 1d6:	83 b7       	in	r24, 0x33	; 51
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 1dc:	87 b3       	in	r24, 0x17	; 23
 1de:	87 60       	ori	r24, 0x07	; 7
 1e0:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 1e2:	8d b1       	in	r24, 0x0d	; 13
 1e4:	80 65       	ori	r24, 0x50	; 80
 1e6:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 1e8:	70 9a       	sbi	0x0e, 0	; 14
    DDRE |= 0b01000000; // set E6 to output
    DDRD |= 0b00001100; // slave select pins

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
 1ea:	78 94       	sei
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <main+0x2e>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
