
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000302  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aca  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f8  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b9  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000454  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033b  00000000  00000000  00001f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002267  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e6       	ldi	r30, 0x6C	; 108
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  c6:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
  de:	80 b7       	in	r24, 0x30	; 48
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
  e4:	87 b7       	in	r24, 0x37	; 55
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	83 bf       	out	0x33, r24	; 51
  f0:	08 95       	ret

000000f2 <barGraph>:

void barGraph(uint8_t increment){
    uint8_t display_mode; //holds count for display 

    // top half on for increment
    if (increment == 1)
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	81 f0       	breq	.+32     	; 0x116 <barGraph+0x24>
        display_mode = 0xF0;
    else if (increment == 0) // bot half on for decrement
  f6:	88 23       	and	r24, r24
  f8:	39 f0       	breq	.+14     	; 0x108 <barGraph+0x16>
        display_mode = 0x0F;
    else
        display_mode = 0b10101010; // otherwise display every other
  fa:	8a ea       	ldi	r24, 0xAA	; 170
    

   
    barGraphOutput = display_mode;               //send to display 
  fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <barGraphOutput>
    // while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 100:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 102:	82 b3       	in	r24, 0x12	; 18
 104:	12 ba       	out	0x12, r1	; 18
 106:	08 95       	ret

    // top half on for increment
    if (increment == 1)
        display_mode = 0xF0;
    else if (increment == 0) // bot half on for decrement
        display_mode = 0x0F;
 108:	8f e0       	ldi	r24, 0x0F	; 15
    else
        display_mode = 0b10101010; // otherwise display every other
    

   
    barGraphOutput = display_mode;               //send to display 
 10a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <barGraphOutput>
    // while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 10e:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 110:	82 b3       	in	r24, 0x12	; 18
 112:	12 ba       	out	0x12, r1	; 18
 114:	08 95       	ret
void barGraph(uint8_t increment){
    uint8_t display_mode; //holds count for display 

    // top half on for increment
    if (increment == 1)
        display_mode = 0xF0;
 116:	80 ef       	ldi	r24, 0xF0	; 240
    else
        display_mode = 0b10101010; // otherwise display every other
    

   
    barGraphOutput = display_mode;               //send to display 
 118:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <barGraphOutput>
    // while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 11c:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 11e:	82 b3       	in	r24, 0x12	; 18
 120:	12 ba       	out	0x12, r1	; 18
 122:	08 95       	ret

00000124 <encoderRead>:
    
        // check for encoder
    static uint8_t new_A = -1, old_A = -1, new_B = -1, old_B = -1, count = 0; 
    uint8_t return_val, a, b; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 124:	61 11       	cpse	r22, r1
 126:	19 c0       	rjmp	.+50     	; 0x15a <encoderRead+0x36>
 128:	91 e0       	ldi	r25, 0x01	; 1
    b = (knob == 0) ? 2 : 8; // where the position of b is
 12a:	22 e0       	ldi	r18, 0x02	; 2

    new_A = data & a; // most LSB
 12c:	98 23       	and	r25, r24
    new_B = data & b; // 2nd LSB
 12e:	82 23       	and	r24, r18


    return_val = -1; // default return value, no change

    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
 130:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <old_A.1773>
 134:	92 17       	cp	r25, r18
 136:	c9 f0       	breq	.+50     	; 0x16a <encoderRead+0x46>
        if((new_A == 0) && (new_B == 0)){
 138:	91 11       	cpse	r25, r1
 13a:	1d c0       	rjmp	.+58     	; 0x176 <encoderRead+0x52>
 13c:	81 11       	cpse	r24, r1
 13e:	07 c0       	rjmp	.+14     	; 0x14e <encoderRead+0x2a>
            if (old_A == 1){
 140:	21 30       	cpi	r18, 0x01	; 1
 142:	f1 f0       	breq	.+60     	; 0x180 <encoderRead+0x5c>
                count++;
            }
            else{
                count--;
 144:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
                count--;
              
            }
        }

        old_A = new_A; // save what are now old values
 14e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <old_A.1773>
        old_B = new_B;
 152:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    } // if changed occured
    // if return value is still -1 then nothing happen
    return (return_val); // return coder state


 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	08 95       	ret
    
        // check for encoder
    static uint8_t new_A = -1, old_A = -1, new_B = -1, old_B = -1, count = 0; 
    uint8_t return_val, a, b; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 15a:	94 e0       	ldi	r25, 0x04	; 4
    b = (knob == 0) ? 2 : 8; // where the position of b is
 15c:	28 e0       	ldi	r18, 0x08	; 8

    new_A = data & a; // most LSB
 15e:	98 23       	and	r25, r24
    new_B = data & b; // 2nd LSB
 160:	82 23       	and	r24, r18


    return_val = -1; // default return value, no change

    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
 162:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <old_A.1773>
 166:	92 13       	cpse	r25, r18
 168:	e7 cf       	rjmp	.-50     	; 0x138 <encoderRead+0x14>
 16a:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	83 17       	cp	r24, r19
 170:	91 f3       	breq	.-28     	; 0x156 <encoderRead+0x32>
        if((new_A == 0) && (new_B == 0)){
 172:	99 23       	and	r25, r25
 174:	19 f3       	breq	.-58     	; 0x13c <encoderRead+0x18>
                }
            
            }
            count = 0; // count is always reset in detent position
        }
        else if ((new_A == 1) && (new_B == 0)){
 176:	91 30       	cpi	r25, 0x01	; 1
 178:	51 f7       	brne	.-44     	; 0x14e <encoderRead+0x2a>


    return_val = -1; // default return value, no change

    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
        if((new_A == 0) && (new_B == 0)){
 17a:	81 11       	cpse	r24, r1
 17c:	e8 cf       	rjmp	.-48     	; 0x14e <encoderRead+0x2a>
 17e:	e0 cf       	rjmp	.-64     	; 0x140 <encoderRead+0x1c>
            if (old_A == 1){
                count++;
 180:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 184:	2f 5f       	subi	r18, 0xFF	; 255
 186:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
 18a:	e1 cf       	rjmp	.-62     	; 0x14e <encoderRead+0x2a>

0000018c <__vector_16>:
//TCNT0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	0b b6       	in	r0, 0x3b	; 59
 198:	0f 92       	push	r0
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
    // then read from spi


   
  
    SPDR = barGraphOutput;
 1b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <barGraphOutput>
 1ba:	8f b9       	out	0x0f, r24	; 15
    PORTD |= 1 << PORTD3; // turning on clk_inh
 1bc:	93 9a       	sbi	0x12, 3	; 18
    PORTE &= 0 << PORTE6; // turning SH/LD low
 1be:	83 b1       	in	r24, 0x03	; 3
 1c0:	13 b8       	out	0x03, r1	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	89 ef       	ldi	r24, 0xF9	; 249
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <__vector_16+0x3c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <__vector_16+0x46>
 1d2:	00 00       	nop

    _delay_ms(20);
    PORTD &= 0 << PORTD3; // turning off clk_inh
 1d4:	82 b3       	in	r24, 0x12	; 18
 1d6:	12 ba       	out	0x12, r1	; 18
    PORTE |= 1 << PORTE6;// turing SH/LD high
 1d8:	1e 9a       	sbi	0x03, 6	; 3

    serial_out = SPDR;
 1da:	cf b1       	in	r28, 0x0f	; 15
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 1dc:	77 9b       	sbis	0x0e, 7	; 14
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <__vector_16+0x50>
    
    uint8_t temp = encoderRead(serial_out,0);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 92 00 	call	0x124	; 0x124 <encoderRead>
 1e8:	d8 2f       	mov	r29, r24
    uint8_t temp1 = encoderRead(serial_out, 1);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	8c 2f       	mov	r24, r28
 1ee:	0e 94 92 00 	call	0x124	; 0x124 <encoderRead>

void barGraph(uint8_t increment){
    uint8_t display_mode; //holds count for display 

    // top half on for increment
    if (increment == 1)
 1f2:	d1 30       	cpi	r29, 0x01	; 1
 1f4:	f9 f0       	breq	.+62     	; 0x234 <__vector_16+0xa8>
        display_mode = 0xF0;
    else if (increment == 0) // bot half on for decrement
 1f6:	dd 23       	and	r29, r29
 1f8:	d9 f0       	breq	.+54     	; 0x230 <__vector_16+0xa4>
        display_mode = 0x0F;
    else
        display_mode = 0b10101010; // otherwise display every other
 1fa:	8a ea       	ldi	r24, 0xAA	; 170
    

   
    barGraphOutput = display_mode;               //send to display 
 1fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <barGraphOutput>
    // while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 200:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 202:	82 b3       	in	r24, 0x12	; 18
 204:	12 ba       	out	0x12, r1	; 18

    barGraph(rotation[0]);
    


}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

    // top half on for increment
    if (increment == 1)
        display_mode = 0xF0;
    else if (increment == 0) // bot half on for decrement
        display_mode = 0x0F;
 230:	8f e0       	ldi	r24, 0x0F	; 15
 232:	e4 cf       	rjmp	.-56     	; 0x1fc <__vector_16+0x70>
void barGraph(uint8_t increment){
    uint8_t display_mode; //holds count for display 

    // top half on for increment
    if (increment == 1)
        display_mode = 0xF0;
 234:	80 ef       	ldi	r24, 0xF0	; 240
 236:	e2 cf       	rjmp	.-60     	; 0x1fc <__vector_16+0x70>

00000238 <main>:
uint8_t encoderRead(uint8_t data, uint8_t knob);


int main() {

    DDRB = 0xF0; // set port B bits 4-7 B as outputs, decoder
 238:	80 ef       	ldi	r24, 0xF0	; 240
 23a:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
 23c:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
 23e:	81 b3       	in	r24, 0x11	; 17
 240:	8c 60       	ori	r24, 0x0C	; 12
 242:	81 bb       	out	0x11, r24	; 17
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 244:	80 b7       	in	r24, 0x30	; 48
 246:	88 60       	ori	r24, 0x08	; 8
 248:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 24a:	87 b7       	in	r24, 0x37	; 55
 24c:	81 60       	ori	r24, 0x01	; 1
 24e:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 250:	83 b7       	in	r24, 0x33	; 51
 252:	81 60       	ori	r24, 0x01	; 1
 254:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 256:	87 b3       	in	r24, 0x17	; 23
 258:	87 60       	ori	r24, 0x07	; 7
 25a:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 25c:	8d b1       	in	r24, 0x0d	; 13
 25e:	80 65       	ori	r24, 0x50	; 80
 260:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 262:	70 9a       	sbi	0x0e, 0	; 14
    DDRE |= 0b01000000; // set E6 to output
    DDRD |= 0b00001100; // slave select pins

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
 264:	78 94       	sei
 266:	ff cf       	rjmp	.-2      	; 0x266 <main+0x2e>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
