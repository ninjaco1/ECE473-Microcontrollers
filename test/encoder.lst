
encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000224  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f5  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c6  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000221  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  0000182c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000172  00000000  00000000  00001cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 30       	cpi	r26, 0x05	; 5
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  c6:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
  ce:	87 b3       	in	r24, 0x17	; 23
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	80 65       	ori	r24, 0x50	; 80
  d8:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
  da:	70 9a       	sbi	0x0e, 0	; 14
  dc:	08 95       	ret

000000de <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
  de:	80 b7       	in	r24, 0x30	; 48
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
  e4:	87 b7       	in	r24, 0x37	; 55
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	83 bf       	out	0x33, r24	; 51
  f0:	08 95       	ret

000000f2 <barGraph>:
        display_mode = 0x0F;
    else
        display_mode = 0b10101010; // otherwise display every other
    

    SPDR = display_mode;
  f2:	8a ea       	ldi	r24, 0xAA	; 170
  f4:	8f b9       	out	0x0f, r24	; 15
    // barGraphOutput = display_mode;               //send to display 
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
  f6:	77 9b       	sbis	0x0e, 7	; 14
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <barGraph+0x4>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
  fa:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	12 ba       	out	0x12, r1	; 18
 100:	08 95       	ret

00000102 <encoderRead>:
    
        // check for encoder
    static uint8_t new_A = -1, old_A = -1, new_B = -1, old_B = -1, count = 0; 
    uint8_t return_val, a, b; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 102:	61 11       	cpse	r22, r1
 104:	19 c0       	rjmp	.+50     	; 0x138 <encoderRead+0x36>
 106:	91 e0       	ldi	r25, 0x01	; 1
    b = (knob == 0) ? 2 : 8; // where the position of b is
 108:	22 e0       	ldi	r18, 0x02	; 2

    new_A = data & a; // most LSB
 10a:	98 23       	and	r25, r24
    new_B = data & b; // 2nd LSB
 10c:	82 23       	and	r24, r18


    return_val = -1; // default return value, no change

    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
 10e:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <old_A.1774>
 112:	92 17       	cp	r25, r18
 114:	c9 f0       	breq	.+50     	; 0x148 <encoderRead+0x46>
        if((new_A == 0) && (new_B == 0)){
 116:	91 11       	cpse	r25, r1
 118:	1d c0       	rjmp	.+58     	; 0x154 <encoderRead+0x52>
 11a:	81 11       	cpse	r24, r1
 11c:	07 c0       	rjmp	.+14     	; 0x12c <encoderRead+0x2a>
            if (old_A == 1){
 11e:	21 30       	cpi	r18, 0x01	; 1
 120:	f1 f0       	breq	.+60     	; 0x15e <encoderRead+0x5c>
                count++;
            }
            else{
                count--;
 122:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 126:	21 50       	subi	r18, 0x01	; 1
 128:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
            else{ 
                count--;
            }
        }

        old_A = new_A; // save what are now old values
 12c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <old_A.1774>
        old_B = new_B;
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    } // if changed occured
    // if return value is still -1 then nothing happen
    return (return_val); // return coder state


 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	08 95       	ret
    
        // check for encoder
    static uint8_t new_A = -1, old_A = -1, new_B = -1, old_B = -1, count = 0; 
    uint8_t return_val, a, b; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 138:	94 e0       	ldi	r25, 0x04	; 4
    b = (knob == 0) ? 2 : 8; // where the position of b is
 13a:	28 e0       	ldi	r18, 0x08	; 8

    new_A = data & a; // most LSB
 13c:	98 23       	and	r25, r24
    new_B = data & b; // 2nd LSB
 13e:	82 23       	and	r24, r18


    return_val = -1; // default return value, no change

    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
 140:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <old_A.1774>
 144:	92 13       	cpse	r25, r18
 146:	e7 cf       	rjmp	.-50     	; 0x116 <encoderRead+0x14>
 148:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	83 17       	cp	r24, r19
 14e:	91 f3       	breq	.-28     	; 0x134 <encoderRead+0x32>
        if((new_A == 0) && (new_B == 0)){
 150:	99 23       	and	r25, r25
 152:	19 f3       	breq	.-58     	; 0x11a <encoderRead+0x18>
                    return_val = 1;
                }
            }
            count = 0; // count is always reset in detent position
        }
        else if ((new_A == 1) && (new_B == 0)){
 154:	91 30       	cpi	r25, 0x01	; 1
 156:	51 f7       	brne	.-44     	; 0x12c <encoderRead+0x2a>


    return_val = -1; // default return value, no change

    if ((new_A != old_A) || (new_B != old_B)){ // if change occured
        if((new_A == 0) && (new_B == 0)){
 158:	81 11       	cpse	r24, r1
 15a:	e8 cf       	rjmp	.-48     	; 0x12c <encoderRead+0x2a>
 15c:	e0 cf       	rjmp	.-64     	; 0x11e <encoderRead+0x1c>
            if (old_A == 1){
                count++;
 15e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 162:	2f 5f       	subi	r18, 0xFF	; 255
 164:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
 168:	e1 cf       	rjmp	.-62     	; 0x12c <encoderRead+0x2a>

0000016a <__vector_16>:
//TCNT0 interrupts come at 7.8125ms internals.
// 1/32768         = 30.517578uS
//(1/32768)*256    = 7.8125ms
//(1/32768)*256*64 = 500mS
/*************************************************************************/
ISR(TIMER0_OVF_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	0b b6       	in	r0, 0x3b	; 59
 176:	0f 92       	push	r0
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
        static uint8_t bargraph = 0x00;
        static uint8_t light = 0x00;

        // getting the data from serial out

        PORTE &= ~(1 << PORTE6); // turning SH/LD low
 190:	1e 98       	cbi	0x03, 6	; 3
        PORTE |= 1 << PORTE6;// turing SH/LD high
 192:	1e 9a       	sbi	0x03, 6	; 3
        SPDR = light;
 194:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <light.1758>
 198:	8f b9       	out	0x0f, r24	; 15

        bargraph = SPDR;
 19a:	8f b1       	in	r24, 0x0f	; 15
 19c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <bargraph.1757>
        while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 1a0:	77 9b       	sbis	0x0e, 7	; 14
 1a2:	fe cf       	rjmp	.-4      	; 0x1a0 <__vector_16+0x36>
        
        PORTD |= 1 << PORTD3; // turning on clk_inh
 1a4:	93 9a       	sbi	0x12, 3	; 18
        PORTD &= ~(1 << PORTD3); // turning off clk_inh
 1a6:	93 98       	cbi	0x12, 3	; 18

        
        if (bargraph != 0x00) {
 1a8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <bargraph.1757>
 1ac:	88 23       	and	r24, r24
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <__vector_16+0x4c>
            light = 0xff;
 1b0:	9f ef       	ldi	r25, 0xFF	; 255
 1b2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <light.1758>
        }

        uint8_t temp = encoderRead(bargraph, 0);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	0e 94 81 00 	call	0x102	; 0x102 <encoderRead>
        display_mode = 0x0F;
    else
        display_mode = 0b10101010; // otherwise display every other
    

    SPDR = display_mode;
 1bc:	8a ea       	ldi	r24, 0xAA	; 170
 1be:	8f b9       	out	0x0f, r24	; 15
    // barGraphOutput = display_mode;               //send to display 
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 1c0:	77 9b       	sbis	0x0e, 7	; 14
 1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <__vector_16+0x56>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 1c4:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	12 ba       	out	0x12, r1	; 18
        barGraph();
        // trigger bargraph after write
        

    
}
 1ca:	ff 91       	pop	r31
 1cc:	ef 91       	pop	r30
 1ce:	bf 91       	pop	r27
 1d0:	af 91       	pop	r26
 1d2:	9f 91       	pop	r25
 1d4:	8f 91       	pop	r24
 1d6:	7f 91       	pop	r23
 1d8:	6f 91       	pop	r22
 1da:	5f 91       	pop	r21
 1dc:	4f 91       	pop	r20
 1de:	3f 91       	pop	r19
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0b be       	out	0x3b, r0	; 59
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <main>:
uint8_t encoderRead(uint8_t data, uint8_t knob);


int main() {

    DDRB = 0xF0; // set port B bits 4-7 B as outputs, decoder
 1f0:	80 ef       	ldi	r24, 0xF0	; 240
 1f2:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
 1f4:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
 1f6:	81 b3       	in	r24, 0x11	; 17
 1f8:	8c 60       	ori	r24, 0x0C	; 12
 1fa:	81 bb       	out	0x11, r24	; 17
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 1fc:	80 b7       	in	r24, 0x30	; 48
 1fe:	88 60       	ori	r24, 0x08	; 8
 200:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 202:	87 b7       	in	r24, 0x37	; 55
 204:	81 60       	ori	r24, 0x01	; 1
 206:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 208:	83 b7       	in	r24, 0x33	; 51
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 20e:	87 b3       	in	r24, 0x17	; 23
 210:	87 60       	ori	r24, 0x07	; 7
 212:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 214:	8d b1       	in	r24, 0x0d	; 13
 216:	80 65       	ori	r24, 0x50	; 80
 218:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 21a:	70 9a       	sbi	0x0e, 0	; 14
    DDRE |= 0b01000000; // set E6 to output
    DDRD |= 0b00001100; // slave select pins

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
 21c:	78 94       	sei
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x2e>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
