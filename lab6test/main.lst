
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000100  00800100  00001516  000015aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001516  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011c  00800200  00800200  000016aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000033a2  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001114  00000000  00000000  00004b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d2  00000000  00000000  00005c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f4  00000000  00000000  00007068  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000914  00000000  00000000  0000755c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f01  00000000  00000000  00007e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00009d71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 00 	jmp	0x12e	; 0x12e <__ctors_end>
       4:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       8:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
       c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      10:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      14:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      18:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      1c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      20:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_8>
      24:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      28:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      2c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_12>
      34:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      3c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      40:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      44:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      48:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      4c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      50:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      54:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      58:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      5c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      60:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      68:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      6c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      70:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      74:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      78:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      7c:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      84:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_33>
      88:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__bad_interrupt>
      8c:	bc 05       	cpc	r27, r12
      8e:	93 05       	cpc	r25, r3
      90:	93 05       	cpc	r25, r3
      92:	93 05       	cpc	r25, r3
      94:	93 05       	cpc	r25, r3
      96:	93 05       	cpc	r25, r3
      98:	93 05       	cpc	r25, r3
      9a:	93 05       	cpc	r25, r3
      9c:	bc 05       	cpc	r27, r12
      9e:	93 05       	cpc	r25, r3
      a0:	93 05       	cpc	r25, r3
      a2:	93 05       	cpc	r25, r3
      a4:	93 05       	cpc	r25, r3
      a6:	93 05       	cpc	r25, r3
      a8:	93 05       	cpc	r25, r3
      aa:	93 05       	cpc	r25, r3
      ac:	c6 05       	cpc	r28, r6
      ae:	93 05       	cpc	r25, r3
      b0:	93 05       	cpc	r25, r3
      b2:	93 05       	cpc	r25, r3
      b4:	93 05       	cpc	r25, r3
      b6:	93 05       	cpc	r25, r3
      b8:	93 05       	cpc	r25, r3
      ba:	93 05       	cpc	r25, r3
      bc:	93 05       	cpc	r25, r3
      be:	93 05       	cpc	r25, r3
      c0:	93 05       	cpc	r25, r3
      c2:	93 05       	cpc	r25, r3
      c4:	93 05       	cpc	r25, r3
      c6:	93 05       	cpc	r25, r3
      c8:	93 05       	cpc	r25, r3
      ca:	93 05       	cpc	r25, r3
      cc:	c6 05       	cpc	r28, r6
      ce:	93 05       	cpc	r25, r3
      d0:	93 05       	cpc	r25, r3
      d2:	93 05       	cpc	r25, r3
      d4:	93 05       	cpc	r25, r3
      d6:	93 05       	cpc	r25, r3
      d8:	93 05       	cpc	r25, r3
      da:	93 05       	cpc	r25, r3
      dc:	93 05       	cpc	r25, r3
      de:	93 05       	cpc	r25, r3
      e0:	93 05       	cpc	r25, r3
      e2:	93 05       	cpc	r25, r3
      e4:	93 05       	cpc	r25, r3
      e6:	93 05       	cpc	r25, r3
      e8:	93 05       	cpc	r25, r3
      ea:	93 05       	cpc	r25, r3
      ec:	dd 05       	cpc	r29, r13
      ee:	93 05       	cpc	r25, r3
      f0:	93 05       	cpc	r25, r3
      f2:	93 05       	cpc	r25, r3
      f4:	93 05       	cpc	r25, r3
      f6:	93 05       	cpc	r25, r3
      f8:	93 05       	cpc	r25, r3
      fa:	93 05       	cpc	r25, r3
      fc:	e1 05       	cpc	r30, r1
      fe:	93 05       	cpc	r25, r3
     100:	93 05       	cpc	r25, r3
     102:	93 05       	cpc	r25, r3
     104:	93 05       	cpc	r25, r3
     106:	93 05       	cpc	r25, r3
     108:	93 05       	cpc	r25, r3
     10a:	93 05       	cpc	r25, r3
     10c:	93 05       	cpc	r25, r3
     10e:	93 05       	cpc	r25, r3
     110:	93 05       	cpc	r25, r3
     112:	93 05       	cpc	r25, r3
     114:	93 05       	cpc	r25, r3
     116:	93 05       	cpc	r25, r3
     118:	93 05       	cpc	r25, r3
     11a:	93 05       	cpc	r25, r3
     11c:	ef 05       	cpc	r30, r15
     11e:	93 05       	cpc	r25, r3
     120:	93 05       	cpc	r25, r3
     122:	93 05       	cpc	r25, r3
     124:	93 05       	cpc	r25, r3
     126:	93 05       	cpc	r25, r3
     128:	93 05       	cpc	r25, r3
     12a:	93 05       	cpc	r25, r3
     12c:	ad 05       	cpc	r26, r13

0000012e <__ctors_end>:
     12e:	11 24       	eor	r1, r1
     130:	1f be       	out	0x3f, r1	; 63
     132:	cf ef       	ldi	r28, 0xFF	; 255
     134:	d0 e1       	ldi	r29, 0x10	; 16
     136:	de bf       	out	0x3e, r29	; 62
     138:	cd bf       	out	0x3d, r28	; 61

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b1 e0       	ldi	r27, 0x01	; 1
     140:	e6 e1       	ldi	r30, 0x16	; 22
     142:	f5 e1       	ldi	r31, 0x15	; 21
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a0 30       	cpi	r26, 0x00	; 0
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	23 e0       	ldi	r18, 0x03	; 3
     156:	a0 e0       	ldi	r26, 0x00	; 0
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ac 31       	cpi	r26, 0x1C	; 28
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 61 09 	call	0x12c2	; 0x12c2 <main>
     168:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <_exit>

0000016c <__bad_interrupt>:
     16c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000170 <__vector_12>:
extern uint8_t si4734_tune_status_buf[8];
extern volatile uint8_t STC_interrupt; //indicates tune or seek is done

int hi;
ISR(TIMER1_COMPA_vect)
{
     170:	1f 92       	push	r1
     172:	0f 92       	push	r0
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	0f 92       	push	r0
     178:	11 24       	eor	r1, r1
    //}
    //else {
    //		PORTD &= 0b11101111; //keep alarm off
    //	alarm_triggered = FALSE;
    //}
}
     17a:	0f 90       	pop	r0
     17c:	0f be       	out	0x3f, r0	; 63
     17e:	0f 90       	pop	r0
     180:	1f 90       	pop	r1
     182:	18 95       	reti

00000184 <__vector_8>:
//
// External interrupt 7 is on Port E bit 7. The interrupt is triggered on the
// rising edge of Port E bit 7.  The i/o clock must be running to detect the
// edge (not asynchronouslly triggered)
//******************************************************************************
ISR(INT7_vect) { STC_interrupt = TRUE; }
     184:	1f 92       	push	r1
     186:	0f 92       	push	r0
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	0f 92       	push	r0
     18c:	11 24       	eor	r1, r1
     18e:	8f 93       	push	r24
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <STC_interrupt>
     196:	8f 91       	pop	r24
     198:	0f 90       	pop	r0
     19a:	0f be       	out	0x3f, r0	; 63
     19c:	0f 90       	pop	r0
     19e:	1f 90       	pop	r1
     1a0:	18 95       	reti

000001a2 <send_lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	81 11       	cpse	r24, r1
     1a6:	01 c0       	rjmp	.+2      	; 0x1aa <send_lcd+0x8>
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1ac:	77 9b       	sbis	0x0e, 7	; 14
     1ae:	fe cf       	rjmp	.-4      	; 0x1ac <send_lcd+0xa>
  SPDR = byte;                        //send payload
     1b0:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1b2:	77 9b       	sbis	0x0e, 7	; 14
     1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <send_lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     1b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ba:	88 60       	ori	r24, 0x08	; 8
     1bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1c4:	87 7f       	andi	r24, 0xF7	; 247
     1c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ca:	08 95       	ret

000001cc <refresh_lcd>:
//
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
     1cc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_end>
     1d0:	82 0f       	add	r24, r18
     1d2:	91 1d       	adc	r25, r1
     1d4:	fc 01       	movw	r30, r24
     1d6:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1dc:	77 9b       	sbis	0x0e, 7	; 14
     1de:	fe cf       	rjmp	.-4      	; 0x1dc <refresh_lcd+0x10>
  SPDR = byte;                        //send payload
     1e0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     1e2:	77 9b       	sbis	0x0e, 7	; 14
     1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <refresh_lcd+0x16>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1ea:	88 60       	ori	r24, 0x08	; 8
     1ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     1f4:	87 7f       	andi	r24, 0xF7	; 247
     1f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
void refresh_lcd(char lcd_string_array[]) {

  static uint8_t i=0;           // index into string array 

 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
     1fa:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     1fe:	8f 5f       	subi	r24, 0xFF	; 255
     200:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
     204:	80 31       	cpi	r24, 0x10	; 16
     206:	d9 f0       	breq	.+54     	; 0x23e <refresh_lcd+0x72>
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     208:	80 32       	cpi	r24, 0x20	; 32
     20a:	09 f0       	breq	.+2      	; 0x20e <refresh_lcd+0x42>
     20c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20e:	85 ed       	ldi	r24, 0xD5	; 213
     210:	8a 95       	dec	r24
     212:	f1 f7       	brne	.-4      	; 0x210 <refresh_lcd+0x44>
     214:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     216:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     218:	77 9b       	sbis	0x0e, 7	; 14
     21a:	fe cf       	rjmp	.-4      	; 0x218 <refresh_lcd+0x4c>
  SPDR = byte;                        //send payload
     21c:	80 e8       	ldi	r24, 0x80	; 128
     21e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     220:	77 9b       	sbis	0x0e, 7	; 14
     222:	fe cf       	rjmp	.-4      	; 0x220 <refresh_lcd+0x54>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     224:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     228:	88 60       	ori	r24, 0x08	; 8
     22a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     22e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     232:	87 7f       	andi	r24, 0xF7	; 247
     234:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 send_lcd(CHAR_BYTE,lcd_string_array[i]);
 i++;   //increment to next character
 //delays are inserted to allow character to be written before moving
 //the cursor to the next line.
 if(i == 16){_delay_us(40); line2_col1();      } //goto line 2, 1st char 
 if(i == 32){_delay_us(40); line1_col1(); i=0; } //goto line 1, 1st char 
     238:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_end>
     23c:	08 95       	ret
     23e:	f5 ed       	ldi	r31, 0xD5	; 213
     240:	fa 95       	dec	r31
     242:	f1 f7       	brne	.-4      	; 0x240 <refresh_lcd+0x74>
     244:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     246:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     248:	77 9b       	sbis	0x0e, 7	; 14
     24a:	fe cf       	rjmp	.-4      	; 0x248 <refresh_lcd+0x7c>
  SPDR = byte;                        //send payload
     24c:	80 ec       	ldi	r24, 0xC0	; 192
     24e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     250:	77 9b       	sbis	0x0e, 7	; 14
     252:	fe cf       	rjmp	.-4      	; 0x250 <refresh_lcd+0x84>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     254:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     258:	88 60       	ori	r24, 0x08	; 8
     25a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     25e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     262:	87 7f       	andi	r24, 0xF7	; 247
     264:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     268:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_end>
     26c:	cd cf       	rjmp	.-102    	; 0x208 <refresh_lcd+0x3c>

0000026e <set_custom_character>:
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
     26e:	66 0f       	add	r22, r22
     270:	66 0f       	add	r22, r22
     272:	66 0f       	add	r22, r22
     274:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     276:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     278:	77 9b       	sbis	0x0e, 7	; 14
     27a:	fe cf       	rjmp	.-4      	; 0x278 <set_custom_character+0xa>
  SPDR = byte;                        //send payload
     27c:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     27e:	77 9b       	sbis	0x0e, 7	; 14
     280:	fe cf       	rjmp	.-4      	; 0x27e <set_custom_character+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     282:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     286:	28 60       	ori	r18, 0x08	; 8
     288:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     28c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     290:	27 7f       	andi	r18, 0xF7	; 247
     292:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     296:	25 ed       	ldi	r18, 0xD5	; 213
     298:	2a 95       	dec	r18
     29a:	f1 f7       	brne	.-4      	; 0x298 <set_custom_character+0x2a>
     29c:	00 00       	nop
     29e:	fc 01       	movw	r30, r24
     2a0:	9c 01       	movw	r18, r24
     2a2:	28 5f       	subi	r18, 0xF8	; 248
     2a4:	3f 4f       	sbci	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2a6:	91 e0       	ldi	r25, 0x01	; 1

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
     2a8:	81 91       	ld	r24, Z+
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2aa:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2ac:	77 9b       	sbis	0x0e, 7	; 14
     2ae:	fe cf       	rjmp	.-4      	; 0x2ac <set_custom_character+0x3e>
  SPDR = byte;                        //send payload
     2b0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2b2:	77 9b       	sbis	0x0e, 7	; 14
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <set_custom_character+0x44>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2b6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ba:	88 60       	ori	r24, 0x08	; 8
     2bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2c0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2c4:	87 7f       	andi	r24, 0xF7	; 247
     2c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2ca:	85 ed       	ldi	r24, 0xD5	; 213
     2cc:	8a 95       	dec	r24
     2ce:	f1 f7       	brne	.-4      	; 0x2cc <set_custom_character+0x5e>
     2d0:	00 00       	nop
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3)); _delay_us(40);  //only needs 37uS
    for(i=0; i<8; i++){
     2d2:	e2 17       	cp	r30, r18
     2d4:	f3 07       	cpc	r31, r19
     2d6:	41 f7       	brne	.-48     	; 0x2a8 <set_custom_character+0x3a>
      send_lcd(CHAR_BYTE, data[i]); _delay_us(40); //each char byte takes 37us to execute
    }
}
     2d8:	08 95       	ret

000002da <set_cursor>:
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40));
     2da:	90 e4       	ldi	r25, 0x40	; 64
     2dc:	89 9f       	mul	r24, r25
     2de:	60 0d       	add	r22, r0
     2e0:	11 24       	eor	r1, r1
     2e2:	60 5c       	subi	r22, 0xC0	; 192
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     2e4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2e6:	77 9b       	sbis	0x0e, 7	; 14
     2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <set_cursor+0xc>
  SPDR = byte;                        //send payload
     2ea:	6f b9       	out	0x0f, r22	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     2ec:	77 9b       	sbis	0x0e, 7	; 14
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <set_cursor+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     2f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2f4:	88 60       	ori	r24, 0x08	; 8
     2f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2fa:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     2fe:	87 7f       	andi	r24, 0xF7	; 247
     300:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     304:	08 95       	ret

00000306 <uint2lcd>:
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
     306:	81 11       	cpse	r24, r1
     308:	13 c0       	rjmp	.+38     	; 0x330 <uint2lcd+0x2a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     30e:	77 9b       	sbis	0x0e, 7	; 14
     310:	fe cf       	rjmp	.-4      	; 0x30e <uint2lcd+0x8>
  SPDR = byte;                        //send payload
     312:	80 e3       	ldi	r24, 0x30	; 48
     314:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     316:	77 9b       	sbis	0x0e, 7	; 14
     318:	fe cf       	rjmp	.-4      	; 0x316 <uint2lcd+0x10>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     31a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     31e:	88 60       	ori	r24, 0x08	; 8
     320:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     324:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     328:	87 7f       	andi	r24, 0xF7	; 247
     32a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     32e:	08 95       	ret
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     330:	84 36       	cpi	r24, 0x64	; 100
     332:	b0 f4       	brcc	.+44     	; 0x360 <uint2lcd+0x5a>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     334:	8a 30       	cpi	r24, 0x0A	; 10
     336:	60 f5       	brcc	.+88     	; 0x390 <uint2lcd+0x8a>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     33c:	77 9b       	sbis	0x0e, 7	; 14
     33e:	fe cf       	rjmp	.-4      	; 0x33c <uint2lcd+0x36>
void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    ); }
     340:	9d ec       	ldi	r25, 0xCD	; 205
     342:	89 9f       	mul	r24, r25
     344:	91 2d       	mov	r25, r1
     346:	11 24       	eor	r1, r1
     348:	96 95       	lsr	r25
     34a:	96 95       	lsr	r25
     34c:	96 95       	lsr	r25
     34e:	2a e0       	ldi	r18, 0x0A	; 10
     350:	92 9f       	mul	r25, r18
     352:	80 19       	sub	r24, r0
     354:	11 24       	eor	r1, r1
     356:	80 5d       	subi	r24, 0xD0	; 208
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     358:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     35a:	77 9b       	sbis	0x0e, 7	; 14
     35c:	fe cf       	rjmp	.-4      	; 0x35a <uint2lcd+0x54>
     35e:	dd cf       	rjmp	.-70     	; 0x31a <uint2lcd+0x14>
//TODO: Should be renamed uint8_2lcd(). Also, implement a uint16_2lcd() function

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
     360:	99 e2       	ldi	r25, 0x29	; 41
     362:	89 9f       	mul	r24, r25
     364:	91 2d       	mov	r25, r1
     366:	11 24       	eor	r1, r1
     368:	92 95       	swap	r25
     36a:	9f 70       	andi	r25, 0x0F	; 15
     36c:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     36e:	21 e0       	ldi	r18, 0x01	; 1
     370:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     372:	77 9b       	sbis	0x0e, 7	; 14
     374:	fe cf       	rjmp	.-4      	; 0x372 <uint2lcd+0x6c>
  SPDR = byte;                        //send payload
     376:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     378:	77 9b       	sbis	0x0e, 7	; 14
     37a:	fe cf       	rjmp	.-4      	; 0x378 <uint2lcd+0x72>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     37c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     380:	98 60       	ori	r25, 0x08	; 8
     382:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     386:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     38a:	97 7f       	andi	r25, 0xF7	; 247
     38c:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>

void uint2lcd(uint8_t number){
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                ); }
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     ); }
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10); }
     390:	99 e2       	ldi	r25, 0x29	; 41
     392:	89 9f       	mul	r24, r25
     394:	91 2d       	mov	r25, r1
     396:	11 24       	eor	r1, r1
     398:	92 95       	swap	r25
     39a:	9f 70       	andi	r25, 0x0F	; 15
     39c:	38 2f       	mov	r19, r24
     39e:	24 e6       	ldi	r18, 0x64	; 100
     3a0:	92 9f       	mul	r25, r18
     3a2:	30 19       	sub	r19, r0
     3a4:	11 24       	eor	r1, r1
     3a6:	2d ec       	ldi	r18, 0xCD	; 205
     3a8:	32 9f       	mul	r19, r18
     3aa:	91 2d       	mov	r25, r1
     3ac:	11 24       	eor	r1, r1
     3ae:	96 95       	lsr	r25
     3b0:	96 95       	lsr	r25
     3b2:	96 95       	lsr	r25
     3b4:	90 5d       	subi	r25, 0xD0	; 208
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3b6:	21 e0       	ldi	r18, 0x01	; 1
     3b8:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3ba:	77 9b       	sbis	0x0e, 7	; 14
     3bc:	fe cf       	rjmp	.-4      	; 0x3ba <uint2lcd+0xb4>
  SPDR = byte;                        //send payload
     3be:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3c0:	77 9b       	sbis	0x0e, 7	; 14
     3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <uint2lcd+0xba>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3c8:	98 60       	ori	r25, 0x08	; 8
     3ca:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3ce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3d2:	97 7f       	andi	r25, 0xF7	; 247
     3d4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3d8:	af cf       	rjmp	.-162    	; 0x338 <uint2lcd+0x32>

000003da <int2lcd>:
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     3da:	87 ff       	sbrs	r24, 7
    else          {uint2lcd(number);                                            }
     3dc:	0c 94 83 01 	jmp	0x306	; 0x306 <uint2lcd>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3e4:	77 9b       	sbis	0x0e, 7	; 14
     3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <int2lcd+0xa>
  SPDR = byte;                        //send payload
     3e8:	9d e2       	ldi	r25, 0x2D	; 45
     3ea:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     3ec:	77 9b       	sbis	0x0e, 7	; 14
     3ee:	fe cf       	rjmp	.-4      	; 0x3ec <int2lcd+0x12>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     3f0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3f4:	98 60       	ori	r25, 0x08	; 8
     3f6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3fa:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     3fe:	97 7f       	andi	r25, 0xF7	; 247
     400:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     404:	95 ed       	ldi	r25, 0xD5	; 213
     406:	9a 95       	dec	r25
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 00       	nop
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
    //if < 0, print minus sign, then take 2's complement of number and display
    if(number < 0){send_lcd(CHAR_BYTE, '-'); _delay_us(40); uint2lcd(~number+1);}  
     40c:	81 95       	neg	r24
     40e:	0c 94 83 01 	jmp	0x306	; 0x306 <uint2lcd>

00000412 <cursor_on>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     412:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     414:	77 9b       	sbis	0x0e, 7	; 14
     416:	fe cf       	rjmp	.-4      	; 0x414 <cursor_on+0x2>
  SPDR = byte;                        //send payload
     418:	8e e0       	ldi	r24, 0x0E	; 14
     41a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     41c:	77 9b       	sbis	0x0e, 7	; 14
     41e:	fe cf       	rjmp	.-4      	; 0x41c <cursor_on+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     420:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     424:	88 60       	ori	r24, 0x08	; 8
     426:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     42a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     42e:	87 7f       	andi	r24, 0xF7	; 247
     430:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     434:	08 95       	ret

00000436 <cursor_off>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     436:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     438:	77 9b       	sbis	0x0e, 7	; 14
     43a:	fe cf       	rjmp	.-4      	; 0x438 <cursor_off+0x2>
  SPDR = byte;                        //send payload
     43c:	8c e0       	ldi	r24, 0x0C	; 12
     43e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     440:	77 9b       	sbis	0x0e, 7	; 14
     442:	fe cf       	rjmp	.-4      	; 0x440 <cursor_off+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     444:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     448:	88 60       	ori	r24, 0x08	; 8
     44a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     44e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     452:	87 7f       	andi	r24, 0xF7	; 247
     454:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     458:	08 95       	ret

0000045a <shift_right>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     45a:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     45c:	77 9b       	sbis	0x0e, 7	; 14
     45e:	fe cf       	rjmp	.-4      	; 0x45c <shift_right+0x2>
  SPDR = byte;                        //send payload
     460:	8e e1       	ldi	r24, 0x1E	; 30
     462:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     464:	77 9b       	sbis	0x0e, 7	; 14
     466:	fe cf       	rjmp	.-4      	; 0x464 <shift_right+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     468:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     46c:	88 60       	ori	r24, 0x08	; 8
     46e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     472:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     476:	87 7f       	andi	r24, 0xF7	; 247
     478:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     47c:	08 95       	ret

0000047e <shift_left>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     47e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     480:	77 9b       	sbis	0x0e, 7	; 14
     482:	fe cf       	rjmp	.-4      	; 0x480 <shift_left+0x2>
  SPDR = byte;                        //send payload
     484:	88 e1       	ldi	r24, 0x18	; 24
     486:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     488:	77 9b       	sbis	0x0e, 7	; 14
     48a:	fe cf       	rjmp	.-4      	; 0x488 <shift_left+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     48c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     490:	88 60       	ori	r24, 0x08	; 8
     492:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     496:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     49a:	87 7f       	andi	r24, 0xF7	; 247
     49c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4a0:	08 95       	ret

000004a2 <strobe_lcd>:
     4a2:	e2 e6       	ldi	r30, 0x62	; 98
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	88 60       	ori	r24, 0x08	; 8
     4aa:	80 83       	st	Z, r24
     4ac:	80 81       	ld	r24, Z
     4ae:	87 7f       	andi	r24, 0xF7	; 247
     4b0:	80 83       	st	Z, r24
     4b2:	08 95       	ret

000004b4 <clear_display>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4b4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4b6:	77 9b       	sbis	0x0e, 7	; 14
     4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <clear_display+0x2>
  SPDR = byte;                        //send payload
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4be:	77 9b       	sbis	0x0e, 7	; 14
     4c0:	fe cf       	rjmp	.-4      	; 0x4be <clear_display+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4d0:	87 7f       	andi	r24, 0xF7	; 247
     4d2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4d6:	8f e1       	ldi	r24, 0x1F	; 31
     4d8:	9c e1       	ldi	r25, 0x1C	; 28
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <clear_display+0x26>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <clear_display+0x2c>
     4e0:	00 00       	nop
     4e2:	08 95       	ret

000004e4 <cursor_home>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     4e4:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4e6:	77 9b       	sbis	0x0e, 7	; 14
     4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <cursor_home+0x2>
  SPDR = byte;                        //send payload
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     4ee:	77 9b       	sbis	0x0e, 7	; 14
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <cursor_home+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     4f2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4f6:	88 60       	ori	r24, 0x08	; 8
     4f8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     4fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     500:	87 7f       	andi	r24, 0xF7	; 247
     502:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     506:	8f e6       	ldi	r24, 0x6F	; 111
     508:	97 e1       	ldi	r25, 0x17	; 23
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <cursor_home+0x26>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <cursor_home+0x2c>
     510:	00 00       	nop
     512:	08 95       	ret

00000514 <line2_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     514:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     516:	77 9b       	sbis	0x0e, 7	; 14
     518:	fe cf       	rjmp	.-4      	; 0x516 <line2_col1+0x2>
  SPDR = byte;                        //send payload
     51a:	80 ec       	ldi	r24, 0xC0	; 192
     51c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     51e:	77 9b       	sbis	0x0e, 7	; 14
     520:	fe cf       	rjmp	.-4      	; 0x51e <line2_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     522:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     526:	88 60       	ori	r24, 0x08	; 8
     528:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     52c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     530:	87 7f       	andi	r24, 0xF7	; 247
     532:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     536:	08 95       	ret

00000538 <line1_col1>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     538:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     53a:	77 9b       	sbis	0x0e, 7	; 14
     53c:	fe cf       	rjmp	.-4      	; 0x53a <line1_col1+0x2>
  SPDR = byte;                        //send payload
     53e:	80 e8       	ldi	r24, 0x80	; 128
     540:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     542:	77 9b       	sbis	0x0e, 7	; 14
     544:	fe cf       	rjmp	.-4      	; 0x542 <line1_col1+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     546:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     54a:	88 60       	ori	r24, 0x08	; 8
     54c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     550:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     554:	87 7f       	andi	r24, 0xF7	; 247
     556:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     55a:	08 95       	ret

0000055c <fill_spaces>:

//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     55c:	90 e1       	ldi	r25, 0x10	; 16
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     55e:	31 e0       	ldi	r19, 0x01	; 1
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
  SPDR = byte;                        //send payload
     560:	20 e2       	ldi	r18, 0x20	; 32
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     562:	3f b9       	out	0x0f, r19	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     564:	77 9b       	sbis	0x0e, 7	; 14
     566:	fe cf       	rjmp	.-4      	; 0x564 <fill_spaces+0x8>
  SPDR = byte;                        //send payload
     568:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     56a:	77 9b       	sbis	0x0e, 7	; 14
     56c:	fe cf       	rjmp	.-4      	; 0x56a <fill_spaces+0xe>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     56e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     572:	88 60       	ori	r24, 0x08	; 8
     574:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     578:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     582:	85 ed       	ldi	r24, 0xD5	; 213
     584:	8a 95       	dec	r24
     586:	f1 f7       	brne	.-4      	; 0x584 <fill_spaces+0x28>
     588:	00 00       	nop
     58a:	91 50       	subi	r25, 0x01	; 1
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     58c:	51 f7       	brne	.-44     	; 0x562 <fill_spaces+0x6>
		send_lcd(CHAR_BYTE, ' '); 
                _delay_us(40);  //40us wait between characters
	}
}  
     58e:	08 95       	ret

00000590 <char2lcd>:
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     594:	77 9b       	sbis	0x0e, 7	; 14
     596:	fe cf       	rjmp	.-4      	; 0x594 <char2lcd+0x4>
  SPDR = byte;                        //send payload
     598:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     59a:	77 9b       	sbis	0x0e, 7	; 14
     59c:	fe cf       	rjmp	.-4      	; 0x59a <char2lcd+0xa>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     59e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5a2:	88 60       	ori	r24, 0x08	; 8
     5a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5ac:	87 7f       	andi	r24, 0xF7	; 247
     5ae:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5b2:	08 95       	ret

000005b4 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     5b4:	fc 01       	movw	r30, r24
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5bc:	71 e0       	ldi	r23, 0x01	; 1
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     5be:	df 01       	movw	r26, r30
     5c0:	a4 0f       	add	r26, r20
     5c2:	b5 1f       	adc	r27, r21
     5c4:	8c 91       	ld	r24, X
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     5c6:	7f b9       	out	0x0f, r23	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5c8:	77 9b       	sbis	0x0e, 7	; 14
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <string2lcd+0x14>
  SPDR = byte;                        //send payload
     5cc:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     5ce:	77 9b       	sbis	0x0e, 7	; 14
     5d0:	fe cf       	rjmp	.-4      	; 0x5ce <string2lcd+0x1a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     5d2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5d6:	98 60       	ori	r25, 0x08	; 8
     5d8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5dc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e0:	97 7f       	andi	r25, 0xF7	; 247
     5e2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     5e6:	85 ed       	ldi	r24, 0xD5	; 213
     5e8:	8a 95       	dec	r24
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <string2lcd+0x34>
     5ec:	00 00       	nop
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i]);
     5ee:	6f 5f       	subi	r22, 0xFF	; 255
     5f0:	46 2f       	mov	r20, r22
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	df 01       	movw	r26, r30
     5f6:	0d 90       	ld	r0, X+
     5f8:	00 20       	and	r0, r0
     5fa:	e9 f7       	brne	.-6      	; 0x5f6 <string2lcd+0x42>
     5fc:	9d 01       	movw	r18, r26
     5fe:	2e 1b       	sub	r18, r30
     600:	3f 0b       	sbc	r19, r31
     602:	22 50       	subi	r18, 0x02	; 2
     604:	31 09       	sbc	r19, r1
     606:	24 17       	cp	r18, r20
     608:	35 07       	cpc	r19, r21
     60a:	c8 f6       	brcc	.-78     	; 0x5be <string2lcd+0xa>
  _delay_us(40);  //execution takes 37us per character
  }                  
} 
     60c:	08 95       	ret

0000060e <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	99 ef       	ldi	r25, 0xF9	; 249
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <lcd_init+0x4>
     616:	00 c0       	rjmp	.+0      	; 0x618 <lcd_init+0xa>
     618:	00 00       	nop
//
void lcd_init(void){
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! setting of DDRF should not be here, but is probably harmless.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     61a:	88 e0       	ldi	r24, 0x08	; 8
     61c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     620:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     622:	77 9b       	sbis	0x0e, 7	; 14
     624:	fe cf       	rjmp	.-4      	; 0x622 <lcd_init+0x14>
  SPDR = byte;                        //send payload
     626:	80 e3       	ldi	r24, 0x30	; 48
     628:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     62a:	77 9b       	sbis	0x0e, 7	; 14
     62c:	fe cf       	rjmp	.-4      	; 0x62a <lcd_init+0x1c>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     62e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     632:	88 60       	ori	r24, 0x08	; 8
     634:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     638:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     63c:	87 7f       	andi	r24, 0xF7	; 247
     63e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     642:	8f e5       	ldi	r24, 0x5F	; 95
     644:	9d e6       	ldi	r25, 0x6D	; 109
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <lcd_init+0x38>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <lcd_init+0x3e>
     64c:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     64e:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     650:	77 9b       	sbis	0x0e, 7	; 14
     652:	fe cf       	rjmp	.-4      	; 0x650 <lcd_init+0x42>
  SPDR = byte;                        //send payload
     654:	80 e3       	ldi	r24, 0x30	; 48
     656:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     658:	77 9b       	sbis	0x0e, 7	; 14
     65a:	fe cf       	rjmp	.-4      	; 0x658 <lcd_init+0x4a>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     65c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     660:	88 60       	ori	r24, 0x08	; 8
     662:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     666:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     66a:	87 7f       	andi	r24, 0xF7	; 247
     66c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     670:	8f e5       	ldi	r24, 0x5F	; 95
     672:	9d e6       	ldi	r25, 0x6D	; 109
     674:	01 97       	sbiw	r24, 0x01	; 1
     676:	f1 f7       	brne	.-4      	; 0x674 <lcd_init+0x66>
     678:	00 c0       	rjmp	.+0      	; 0x67a <lcd_init+0x6c>
     67a:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     67c:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     67e:	77 9b       	sbis	0x0e, 7	; 14
     680:	fe cf       	rjmp	.-4      	; 0x67e <lcd_init+0x70>
  SPDR = byte;                        //send payload
     682:	80 e3       	ldi	r24, 0x30	; 48
     684:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     686:	77 9b       	sbis	0x0e, 7	; 14
     688:	fe cf       	rjmp	.-4      	; 0x686 <lcd_init+0x78>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     68a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     68e:	88 60       	ori	r24, 0x08	; 8
     690:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     694:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     698:	87 7f       	andi	r24, 0xF7	; 247
     69a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     69e:	8f e5       	ldi	r24, 0x5F	; 95
     6a0:	9d e6       	ldi	r25, 0x6D	; 109
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <lcd_init+0x94>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <lcd_init+0x9a>
     6a8:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6aa:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6ac:	77 9b       	sbis	0x0e, 7	; 14
     6ae:	fe cf       	rjmp	.-4      	; 0x6ac <lcd_init+0x9e>
  SPDR = byte;                        //send payload
     6b0:	88 e3       	ldi	r24, 0x38	; 56
     6b2:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6b4:	77 9b       	sbis	0x0e, 7	; 14
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <lcd_init+0xa6>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6bc:	88 60       	ori	r24, 0x08	; 8
     6be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6c6:	87 7f       	andi	r24, 0xF7	; 247
     6c8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6cc:	8f e1       	ldi	r24, 0x1F	; 31
     6ce:	9e e4       	ldi	r25, 0x4E	; 78
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <lcd_init+0xc2>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <lcd_init+0xc8>
     6d6:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     6d8:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6da:	77 9b       	sbis	0x0e, 7	; 14
     6dc:	fe cf       	rjmp	.-4      	; 0x6da <lcd_init+0xcc>
  SPDR = byte;                        //send payload
     6de:	88 e0       	ldi	r24, 0x08	; 8
     6e0:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     6e2:	77 9b       	sbis	0x0e, 7	; 14
     6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <lcd_init+0xd4>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     6e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6ea:	88 60       	ori	r24, 0x08	; 8
     6ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6f4:	87 7f       	andi	r24, 0xF7	; 247
     6f6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     6fa:	8f e1       	ldi	r24, 0x1F	; 31
     6fc:	9e e4       	ldi	r25, 0x4E	; 78
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	f1 f7       	brne	.-4      	; 0x6fe <lcd_init+0xf0>
     702:	00 c0       	rjmp	.+0      	; 0x704 <lcd_init+0xf6>
     704:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     706:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     708:	77 9b       	sbis	0x0e, 7	; 14
     70a:	fe cf       	rjmp	.-4      	; 0x708 <lcd_init+0xfa>
  SPDR = byte;                        //send payload
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     710:	77 9b       	sbis	0x0e, 7	; 14
     712:	fe cf       	rjmp	.-4      	; 0x710 <lcd_init+0x102>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     714:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     718:	88 60       	ori	r24, 0x08	; 8
     71a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     71e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     722:	87 7f       	andi	r24, 0xF7	; 247
     724:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     728:	8f e1       	ldi	r24, 0x1F	; 31
     72a:	9e e4       	ldi	r25, 0x4E	; 78
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <lcd_init+0x11e>
     730:	00 c0       	rjmp	.+0      	; 0x732 <lcd_init+0x124>
     732:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     734:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     736:	77 9b       	sbis	0x0e, 7	; 14
     738:	fe cf       	rjmp	.-4      	; 0x736 <lcd_init+0x128>
  SPDR = byte;                        //send payload
     73a:	86 e0       	ldi	r24, 0x06	; 6
     73c:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     73e:	77 9b       	sbis	0x0e, 7	; 14
     740:	fe cf       	rjmp	.-4      	; 0x73e <lcd_init+0x130>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     742:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     746:	88 60       	ori	r24, 0x08	; 8
     748:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     74c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     750:	87 7f       	andi	r24, 0xF7	; 247
     752:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     756:	8f e1       	ldi	r24, 0x1F	; 31
     758:	9e e4       	ldi	r25, 0x4E	; 78
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <lcd_init+0x14c>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <lcd_init+0x152>
     760:	00 00       	nop
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     762:	1f b8       	out	0x0f, r1	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     764:	77 9b       	sbis	0x0e, 7	; 14
     766:	fe cf       	rjmp	.-4      	; 0x764 <lcd_init+0x156>
  SPDR = byte;                        //send payload
     768:	8c e0       	ldi	r24, 0x0C	; 12
     76a:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     76c:	77 9b       	sbis	0x0e, 7	; 14
     76e:	fe cf       	rjmp	.-4      	; 0x76c <lcd_init+0x15e>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     770:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     774:	88 60       	ori	r24, 0x08	; 8
     776:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     77a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     77e:	87 7f       	andi	r24, 0xF7	; 247
     780:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     784:	8f e1       	ldi	r24, 0x1F	; 31
     786:	9e e4       	ldi	r25, 0x4E	; 78
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <lcd_init+0x17a>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <lcd_init+0x180>
     78e:	00 00       	nop
     790:	08 95       	ret

00000792 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     792:	4f 92       	push	r4
     794:	5f 92       	push	r5
     796:	6f 92       	push	r6
     798:	7f 92       	push	r7
     79a:	8f 92       	push	r8
     79c:	9f 92       	push	r9
     79e:	af 92       	push	r10
     7a0:	bf 92       	push	r11
     7a2:	cf 92       	push	r12
     7a4:	df 92       	push	r13
     7a6:	ef 92       	push	r14
     7a8:	ff 92       	push	r15
     7aa:	0f 93       	push	r16
     7ac:	1f 93       	push	r17
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	69 97       	sbiw	r28, 0x19	; 25
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	14 2f       	mov	r17, r20
     7c4:	42 2e       	mov	r4, r18
     7c6:	5e 2c       	mov	r5, r14
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 

      if (bSigned){
     7c8:	00 23       	and	r16, r16
     7ca:	79 f0       	breq	.+30     	; 0x7ea <lcd_int32+0x58>
        bSigned = (qr.quot<0);
     7cc:	6b 01       	movw	r12, r22
     7ce:	7c 01       	movw	r14, r24
     7d0:	cc 24       	eor	r12, r12
     7d2:	f7 fc       	sbrc	r15, 7
     7d4:	c3 94       	inc	r12
     7d6:	dd 24       	eor	r13, r13
     7d8:	ee 24       	eor	r14, r14
     7da:	ff 24       	eor	r15, r15
     7dc:	0c 2d       	mov	r16, r12
        qr.quot = labs(qr.quot);
     7de:	6b 01       	movw	r12, r22
     7e0:	7c 01       	movw	r14, r24
     7e2:	97 fd       	sbrc	r25, 7
     7e4:	a3 c0       	rjmp	.+326    	; 0x92c <lcd_int32+0x19a>
     7e6:	c7 01       	movw	r24, r14
     7e8:	b6 01       	movw	r22, r12
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     7ea:	44 20       	and	r4, r4
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <lcd_int32+0x5e>
     7ee:	96 c0       	rjmp	.+300    	; 0x91c <lcd_int32+0x18a>
     7f0:	9e 01       	movw	r18, r28
     7f2:	2f 5f       	subi	r18, 0xFF	; 255
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	59 01       	movw	r10, r18
     7f8:	49 01       	movw	r8, r18
     7fa:	66 24       	eor	r6, r6
     7fc:	6a 94       	dec	r6
     7fe:	64 0c       	add	r6, r4
     800:	71 2c       	mov	r7, r1
     802:	3f ef       	ldi	r19, 0xFF	; 255
     804:	63 1a       	sub	r6, r19
     806:	73 0a       	sbc	r7, r19
     808:	6a 0c       	add	r6, r10
     80a:	7b 1c       	adc	r7, r11
        for (; decpos ; decpos--){
          qr = ldiv(qr.quot, 10);
     80c:	2a e0       	ldi	r18, 0x0A	; 10
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e0       	ldi	r20, 0x00	; 0
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	0e 94 c6 09 	call	0x138c	; 0x138c <__divmodsi4>
     818:	e6 2f       	mov	r30, r22
     81a:	2a 8b       	std	Y+18, r18	; 0x12
     81c:	3b 8b       	std	Y+19, r19	; 0x13
     81e:	4c 8b       	std	Y+20, r20	; 0x14
     820:	5d 8b       	std	Y+21, r21	; 0x15
     822:	6a 89       	ldd	r22, Y+18	; 0x12
     824:	7b 89       	ldd	r23, Y+19	; 0x13
     826:	8c 89       	ldd	r24, Y+20	; 0x14
     828:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     82a:	20 e3       	ldi	r18, 0x30	; 48
     82c:	2e 0f       	add	r18, r30
     82e:	f4 01       	movw	r30, r8
     830:	21 93       	st	Z+, r18
     832:	4f 01       	movw	r8, r30
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     834:	6e 16       	cp	r6, r30
     836:	7f 06       	cpc	r7, r31
     838:	49 f7       	brne	.-46     	; 0x80c <lcd_int32+0x7a>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     83a:	99 24       	eor	r9, r9
     83c:	93 94       	inc	r9
     83e:	94 0c       	add	r9, r4
     840:	f5 01       	movw	r30, r10
     842:	e4 0d       	add	r30, r4
     844:	f1 1d       	adc	r31, r1
     846:	2e e2       	ldi	r18, 0x2E	; 46
     848:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     84a:	2a e0       	ldi	r18, 0x0A	; 10
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	0e 94 c6 09 	call	0x138c	; 0x138c <__divmodsi4>
     856:	e6 2f       	mov	r30, r22
     858:	2a 8b       	std	Y+18, r18	; 0x12
     85a:	3b 8b       	std	Y+19, r19	; 0x13
     85c:	4c 8b       	std	Y+20, r20	; 0x14
     85e:	5d 8b       	std	Y+21, r21	; 0x15
     860:	6e 8b       	std	Y+22, r22	; 0x16
     862:	7f 8b       	std	Y+23, r23	; 0x17
     864:	88 8f       	std	Y+24, r24	; 0x18
     866:	99 8f       	std	Y+25, r25	; 0x19
     868:	6a 89       	ldd	r22, Y+18	; 0x12
     86a:	7b 89       	ldd	r23, Y+19	; 0x13
     86c:	8c 89       	ldd	r24, Y+20	; 0x14
     86e:	9d 89       	ldd	r25, Y+21	; 0x15
          sline[i++] = qr.rem + '0';
     870:	31 e0       	ldi	r19, 0x01	; 1
     872:	39 0d       	add	r19, r9
     874:	d5 01       	movw	r26, r10
     876:	a9 0d       	add	r26, r9
     878:	b1 1d       	adc	r27, r1
     87a:	e0 5d       	subi	r30, 0xD0	; 208
     87c:	ec 93       	st	X, r30
     87e:	93 2e       	mov	r9, r19
        }while(qr.quot);
     880:	61 15       	cp	r22, r1
     882:	71 05       	cpc	r23, r1
     884:	81 05       	cpc	r24, r1
     886:	91 05       	cpc	r25, r1
     888:	01 f7       	brne	.-64     	; 0x84a <lcd_int32+0xb8>

      // fill the whole field if a width was specified
      if (fieldwidth){
     88a:	11 23       	and	r17, r17
     88c:	61 f0       	breq	.+24     	; 0x8a6 <lcd_int32+0x114>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     88e:	51 10       	cpse	r5, r1
     890:	4b c0       	rjmp	.+150    	; 0x928 <lcd_int32+0x196>
     892:	90 e2       	ldi	r25, 0x20	; 32
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     894:	31 17       	cp	r19, r17
     896:	38 f4       	brcc	.+14     	; 0x8a6 <lcd_int32+0x114>
     898:	f5 01       	movw	r30, r10
     89a:	e3 0f       	add	r30, r19
     89c:	f1 1d       	adc	r31, r1
     89e:	90 83       	st	Z, r25
     8a0:	3f 5f       	subi	r19, 0xFF	; 255
     8a2:	13 13       	cpse	r17, r19
     8a4:	f9 cf       	rjmp	.-14     	; 0x898 <lcd_int32+0x106>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     8a6:	00 23       	and	r16, r16
     8a8:	31 f0       	breq	.+12     	; 0x8b6 <lcd_int32+0x124>
     8aa:	f5 01       	movw	r30, r10
     8ac:	e3 0f       	add	r30, r19
     8ae:	f1 1d       	adc	r31, r1
     8b0:	9d e2       	ldi	r25, 0x2D	; 45
     8b2:	90 83       	st	Z, r25
     8b4:	3f 5f       	subi	r19, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8b6:	21 e0       	ldi	r18, 0x01	; 1

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     8b8:	31 50       	subi	r19, 0x01	; 1
     8ba:	f5 01       	movw	r30, r10
     8bc:	e3 0f       	add	r30, r19
     8be:	f1 1d       	adc	r31, r1
     8c0:	90 81       	ld	r25, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     8c2:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8c4:	77 9b       	sbis	0x0e, 7	; 14
     8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <lcd_int32+0x132>
  SPDR = byte;                        //send payload
     8c8:	9f b9       	out	0x0f, r25	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     8ca:	77 9b       	sbis	0x0e, 7	; 14
     8cc:	fe cf       	rjmp	.-4      	; 0x8ca <lcd_int32+0x138>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8ce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d2:	98 60       	ori	r25, 0x08	; 8
     8d4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8d8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     8dc:	97 7f       	andi	r25, 0xF7	; 247
     8de:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e2:	85 ed       	ldi	r24, 0xD5	; 213
     8e4:	8a 95       	dec	r24
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <lcd_int32+0x152>
     8e8:	00 00       	nop

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     8ea:	31 11       	cpse	r19, r1
     8ec:	e5 cf       	rjmp	.-54     	; 0x8b8 <lcd_int32+0x126>

}
     8ee:	69 96       	adiw	r28, 0x19	; 25
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	9f 90       	pop	r9
     910:	8f 90       	pop	r8
     912:	7f 90       	pop	r7
     914:	6f 90       	pop	r6
     916:	5f 90       	pop	r5
     918:	4f 90       	pop	r4
     91a:	08 95       	ret
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     91c:	91 2c       	mov	r9, r1
     91e:	9e 01       	movw	r18, r28
     920:	2f 5f       	subi	r18, 0xFF	; 255
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	59 01       	movw	r10, r18
     926:	91 cf       	rjmp	.-222    	; 0x84a <lcd_int32+0xb8>
          sline[i++] = qr.rem + '0';
        }while(qr.quot);

      // fill the whole field if a width was specified
      if (fieldwidth){
        fillch = bZeroFill? '0': ' '; // determine the fill character
     928:	90 e3       	ldi	r25, 0x30	; 48
     92a:	b4 cf       	rjmp	.-152    	; 0x894 <lcd_int32+0x102>

      qr.quot = l; // initialize the quotient 

      if (bSigned){
        bSigned = (qr.quot<0);
        qr.quot = labs(qr.quot);
     92c:	f0 94       	com	r15
     92e:	e0 94       	com	r14
     930:	d0 94       	com	r13
     932:	c0 94       	com	r12
     934:	c1 1c       	adc	r12, r1
     936:	d1 1c       	adc	r13, r1
     938:	e1 1c       	adc	r14, r1
     93a:	f1 1c       	adc	r15, r1
     93c:	54 cf       	rjmp	.-344    	; 0x7e6 <lcd_int32+0x54>

0000093e <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
     93e:	5f 92       	push	r5
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
     960:	61 97       	sbiw	r28, 0x11	; 17
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	de bf       	out	0x3e, r29	; 62
     968:	0f be       	out	0x3f, r0	; 63
     96a:	cd bf       	out	0x3d, r28	; 61
     96c:	5c 01       	movw	r10, r24
     96e:	96 2e       	mov	r9, r22
     970:	54 2e       	mov	r5, r20
     972:	62 2e       	mov	r6, r18
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;

        if ( (bSigned=(qr.quot<0)) )
     974:	8b 2c       	mov	r8, r11
     976:	88 1c       	adc	r8, r8
     978:	88 24       	eor	r8, r8
     97a:	88 1c       	adc	r8, r8
     97c:	78 2c       	mov	r7, r8
     97e:	9c 01       	movw	r18, r24
     980:	97 fd       	sbrc	r25, 7
     982:	9d c0       	rjmp	.+314    	; 0xabe <lcd_int16+0x180>
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
     984:	55 20       	and	r5, r5
     986:	09 f4       	brne	.+2      	; 0x98a <lcd_int16+0x4c>
     988:	8e c0       	rjmp	.+284    	; 0xaa6 <lcd_int16+0x168>
     98a:	8e 01       	movw	r16, r28
     98c:	0f 5f       	subi	r16, 0xFF	; 255
     98e:	1f 4f       	sbci	r17, 0xFF	; 255
     990:	78 01       	movw	r14, r16
     992:	cc 24       	eor	r12, r12
     994:	ca 94       	dec	r12
     996:	c5 0c       	add	r12, r5
     998:	d1 2c       	mov	r13, r1
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	c8 1a       	sub	r12, r24
     99e:	d8 0a       	sbc	r13, r24
     9a0:	c0 0e       	add	r12, r16
     9a2:	d1 1e       	adc	r13, r17
          for (; decpos ; decpos--){
            qr = div(qr.quot, 10);
     9a4:	6a e0       	ldi	r22, 0x0A	; 10
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     9ae:	46 2f       	mov	r20, r22
     9b0:	24 2f       	mov	r18, r20
     9b2:	37 2f       	mov	r19, r23
            sline[i++] = qr.rem + '0';
     9b4:	80 5d       	subi	r24, 0xD0	; 208
     9b6:	f7 01       	movw	r30, r14
     9b8:	81 93       	st	Z+, r24
     9ba:	7f 01       	movw	r14, r30
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     9bc:	ec 15       	cp	r30, r12
     9be:	fd 05       	cpc	r31, r13
     9c0:	89 f7       	brne	.-30     	; 0x9a4 <lcd_int16+0x66>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     9c2:	ff 24       	eor	r15, r15
     9c4:	f3 94       	inc	r15
     9c6:	f5 0c       	add	r15, r5
     9c8:	f8 01       	movw	r30, r16
     9ca:	e5 0d       	add	r30, r5
     9cc:	f1 1d       	adc	r31, r1
     9ce:	8e e2       	ldi	r24, 0x2E	; 46
     9d0:	80 83       	st	Z, r24
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <lcd_int16+0x98>

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
                sline[i++] = qr.rem + '0';
     9d4:	f9 2e       	mov	r15, r25
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     9d6:	6a e0       	ldi	r22, 0x0A	; 10
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	c9 01       	movw	r24, r18
     9dc:	0e 94 b2 09 	call	0x1364	; 0x1364 <__divmodhi4>
     9e0:	46 2f       	mov	r20, r22
     9e2:	24 2f       	mov	r18, r20
     9e4:	37 2f       	mov	r19, r23
                sline[i++] = qr.rem + '0';
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	9f 0d       	add	r25, r15
     9ea:	f8 01       	movw	r30, r16
     9ec:	ef 0d       	add	r30, r15
     9ee:	f1 1d       	adc	r31, r1
     9f0:	80 5d       	subi	r24, 0xD0	; 208
     9f2:	80 83       	st	Z, r24
        }
        while(qr.quot);
     9f4:	21 15       	cp	r18, r1
     9f6:	31 05       	cpc	r19, r1
     9f8:	69 f7       	brne	.-38     	; 0x9d4 <lcd_int16+0x96>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     9fa:	61 10       	cpse	r6, r1
     9fc:	59 c0       	rjmp	.+178    	; 0xab0 <lcd_int16+0x172>
     9fe:	b7 fc       	sbrc	r11, 7
     a00:	63 c0       	rjmp	.+198    	; 0xac8 <lcd_int16+0x18a>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     a02:	99 20       	and	r9, r9
     a04:	b1 f0       	breq	.+44     	; 0xa32 <lcd_int16+0xf4>
     a06:	68 2d       	mov	r22, r8
     a08:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     a0a:	80 e2       	ldi	r24, 0x20	; 32
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     a0c:	29 2f       	mov	r18, r25
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	49 2d       	mov	r20, r9
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	46 1b       	sub	r20, r22
     a16:	57 0b       	sbc	r21, r23
     a18:	24 17       	cp	r18, r20
     a1a:	35 07       	cpc	r19, r21
     a1c:	54 f4       	brge	.+20     	; 0xa32 <lcd_int16+0xf4>
     a1e:	9f 5f       	subi	r25, 0xFF	; 255
     a20:	f8 01       	movw	r30, r16
     a22:	e2 0f       	add	r30, r18
     a24:	f3 1f       	adc	r31, r19
     a26:	80 83       	st	Z, r24
     a28:	29 2f       	mov	r18, r25
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	24 17       	cp	r18, r20
     a2e:	35 07       	cpc	r19, r21
     a30:	b4 f3       	brlt	.-20     	; 0xa1e <lcd_int16+0xe0>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     a32:	77 20       	and	r7, r7
     a34:	31 f0       	breq	.+12     	; 0xa42 <lcd_int16+0x104>
     a36:	f8 01       	movw	r30, r16
     a38:	e9 0f       	add	r30, r25
     a3a:	f1 1d       	adc	r31, r1
     a3c:	8d e2       	ldi	r24, 0x2D	; 45
     a3e:	80 83       	st	Z, r24
     a40:	9f 5f       	subi	r25, 0xFF	; 255
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a42:	21 e0       	ldi	r18, 0x01	; 1

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	f8 01       	movw	r30, r16
     a48:	e9 0f       	add	r30, r25
     a4a:	f1 1d       	adc	r31, r1
     a4c:	80 81       	ld	r24, Z
// Commnads that require more time have delays built in for them.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte){

#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     a4e:	2f b9       	out	0x0f, r18	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a50:	77 9b       	sbis	0x0e, 7	; 14
     a52:	fe cf       	rjmp	.-4      	; 0xa50 <lcd_int16+0x112>
  SPDR = byte;                        //send payload
     a54:	8f b9       	out	0x0f, r24	; 15
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     a56:	77 9b       	sbis	0x0e, 7	; 14
     a58:	fe cf       	rjmp	.-4      	; 0xa56 <lcd_int16+0x118>
//pulse width for a 4 Mhz clock.
//TODO: make number of nops executed dependent on F_CPU, not hardcoded
//
void strobe_lcd(void){ 
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     a5a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a5e:	88 60       	ori	r24, 0x08	; 8
     a60:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a64:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a68:	87 7f       	andi	r24, 0xF7	; 247
     a6a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
     a6e:	f5 ed       	ldi	r31, 0xD5	; 213
     a70:	fa 95       	dec	r31
     a72:	f1 f7       	brne	.-4      	; 0xa70 <lcd_int16+0x132>
     a74:	00 00       	nop

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i]); _delay_us(40);} while(i);
     a76:	91 11       	cpse	r25, r1
     a78:	e5 cf       	rjmp	.-54     	; 0xa44 <lcd_int16+0x106>
}
     a7a:	61 96       	adiw	r28, 0x11	; 17
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	7f 90       	pop	r7
     aa0:	6f 90       	pop	r6
     aa2:	5f 90       	pop	r5
     aa4:	08 95       	ret
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     aa6:	f1 2c       	mov	r15, r1
     aa8:	8e 01       	movw	r16, r28
     aaa:	0f 5f       	subi	r16, 0xFF	; 255
     aac:	1f 4f       	sbci	r17, 0xFF	; 255
     aae:	93 cf       	rjmp	.-218    	; 0x9d6 <lcd_int16+0x98>
                sline[i++] = '-';
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     ab0:	99 20       	and	r9, r9
     ab2:	09 f4       	brne	.+2      	; 0xab6 <lcd_int16+0x178>
     ab4:	be cf       	rjmp	.-132    	; 0xa32 <lcd_int16+0xf4>
     ab6:	68 2d       	mov	r22, r8
     ab8:	70 e0       	ldi	r23, 0x00	; 0
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     aba:	80 e3       	ldi	r24, 0x30	; 48
     abc:	a7 cf       	rjmp	.-178    	; 0xa0c <lcd_int16+0xce>
     abe:	22 27       	eor	r18, r18
     ac0:	33 27       	eor	r19, r19
     ac2:	28 1b       	sub	r18, r24
     ac4:	39 0b       	sbc	r19, r25
     ac6:	5e cf       	rjmp	.-324    	; 0x984 <lcd_int16+0x46>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     ac8:	f3 94       	inc	r15
     aca:	f3 94       	inc	r15
     acc:	f8 01       	movw	r30, r16
     ace:	e9 0f       	add	r30, r25
     ad0:	f1 1d       	adc	r31, r1
     ad2:	8d e2       	ldi	r24, 0x2D	; 45
     ad4:	80 83       	st	Z, r24
                bSigned = 0;
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     ad6:	99 20       	and	r9, r9
     ad8:	59 f0       	breq	.+22     	; 0xaf0 <lcd_int16+0x1b2>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     ada:	2f 2d       	mov	r18, r15
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	49 2d       	mov	r20, r9
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	24 17       	cp	r18, r20
     ae4:	35 07       	cpc	r19, r21
     ae6:	24 f4       	brge	.+8      	; 0xaf0 <lcd_int16+0x1b2>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     ae8:	9f 2d       	mov	r25, r15
                bSigned = 0;
     aea:	71 2c       	mov	r7, r1
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     aec:	80 e2       	ldi	r24, 0x20	; 32
     aee:	97 cf       	rjmp	.-210    	; 0xa1e <lcd_int16+0xe0>
        while(qr.quot);

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
        {
                sline[i++] = '-';
     af0:	9f 2d       	mov	r25, r15
     af2:	a7 cf       	rjmp	.-178    	; 0xa42 <lcd_int16+0x104>

00000af4 <lm73_temp_convert>:
//the buffer pointed to by the arguement.
//TODO:Returns what???(uint8_t)??? Probably a BUG?

//Yeah, this is for you to do! ;^)

}//lm73_temp_convert
     af4:	08 95       	ret

00000af6 <__vector_33>:

//****************************************************************************
//This is the TWI ISR. Different actions are taken depending upon the value
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	0b b6       	in	r0, 0x3b	; 59
     b02:	0f 92       	push	r0
     b04:	2f 93       	push	r18
     b06:	3f 93       	push	r19
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     b14:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b18:	8e 2f       	mov	r24, r30
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	fc 01       	movw	r30, r24
     b1e:	38 97       	sbiw	r30, 0x08	; 8
     b20:	e1 35       	cpi	r30, 0x51	; 81
     b22:	f1 05       	cpc	r31, r1
     b24:	b0 f0       	brcs	.+44     	; 0xb52 <__vector_33+0x5c>
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
      break;
    default:                            //Error occured, save TWSR 
      twi_state = TWSR;         
     b26:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
     b2a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <twi_state>
      TWCR = TWCR_RST;                  //Reset TWI, disable interupts 
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  }//switch
}//TWI_isr
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	bf 91       	pop	r27
     b3a:	af 91       	pop	r26
     b3c:	9f 91       	pop	r25
     b3e:	8f 91       	pop	r24
     b40:	3f 91       	pop	r19
     b42:	2f 91       	pop	r18
     b44:	0f 90       	pop	r0
     b46:	0b be       	out	0x3b, r0	; 59
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti
//of the TWI status register TWSR.
//****************************************************************************/
ISR(TWI_vect){
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
     b52:	ea 5b       	subi	r30, 0xBA	; 186
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__tablejump2__>
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
      break; 
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
     b5a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <twi_buf_ptr.1780>
     b5e:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_buf>
     b62:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <twi_buf+0x1>
     b66:	e8 0f       	add	r30, r24
     b68:	f1 1d       	adc	r31, r1
     b6a:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     b6e:	80 83       	st	Z, r24
      TWCR = TWCR_STOP;                 //initiate a STOP
     b70:	84 e9       	ldi	r24, 0x94	; 148
     b72:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;      
     b76:	de cf       	rjmp	.-68     	; 0xb34 <__vector_33+0x3e>
  static uint8_t twi_buf_ptr;  //index into the buffer being used 

  switch (TWSR) {
    case TW_START:          //START has been xmitted, fall thorough
    case TW_REP_START:      //Repeated START was xmitted
      TWDR = twi_bus_addr;  //load up the twi bus address
     b78:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <twi_bus_addr>
     b7c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
      twi_buf_ptr = 0;      //initalize buffer pointer 
     b80:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <twi_buf_ptr.1780>
      TWCR = TWCR_SEND;     //send SLA+RW
     b84:	85 e8       	ldi	r24, 0x85	; 133
     b86:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     b8a:	d4 cf       	rjmp	.-88     	; 0xb34 <__vector_33+0x3e>
    case TW_MT_SLA_ACK:     //SLA+W was xmitted and ACK rcvd, fall through 
    case TW_MT_DATA_ACK:                //Data byte was xmitted and ACK rcvd
      if (twi_buf_ptr < twi_msg_size){  //send data till done
     b8c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <twi_buf_ptr.1780>
     b90:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <twi_msg_size>
     b94:	89 17       	cp	r24, r25
     b96:	60 f7       	brcc	.-40     	; 0xb70 <__vector_33+0x7a>
        TWDR = twi_buf[twi_buf_ptr++];  //load next and postincrement index
     b98:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_buf>
     b9c:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <twi_buf+0x1>
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	98 0f       	add	r25, r24
     ba4:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <twi_buf_ptr.1780>
     ba8:	e8 0f       	add	r30, r24
     baa:	f1 1d       	adc	r31, r1
     bac:	80 81       	ld	r24, Z
     bae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
        TWCR = TWCR_SEND;               //send next byte 
     bb2:	85 e8       	ldi	r24, 0x85	; 133
     bb4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     bb8:	bd cf       	rjmp	.-134    	; 0xb34 <__vector_33+0x3e>
    case TW_MR_DATA_NACK: //Data byte was rcvd and NACK xmitted
      twi_buf[twi_buf_ptr] = TWDR;      //save last byte to buffer
      TWCR = TWCR_STOP;                 //initiate a STOP
      break;      
    case TW_MT_ARB_LOST:                //Arbitration lost 
      TWCR = TWCR_START;                //initiate RESTART 
     bba:	85 ea       	ldi	r24, 0xA5	; 165
     bbc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
      break;
     bc0:	b9 cf       	rjmp	.-142    	; 0xb34 <__vector_33+0x3e>
     bc2:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <twi_buf_ptr.1780>
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     bc6:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <twi_msg_size>
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	28 17       	cp	r18, r24
     bd2:	39 07       	cpc	r19, r25
     bd4:	dc f4       	brge	.+54     	; 0xc0c <__vector_33+0x116>
     bd6:	85 ec       	ldi	r24, 0xC5	; 197
     bd8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     bdc:	ab cf       	rjmp	.-170    	; 0xb34 <__vector_33+0x3e>
        TWCR = TWCR_SEND;               //send next byte 
      }
      else{TWCR = TWCR_STOP;}           //last byte sent, send STOP 
      break;
    case TW_MR_DATA_ACK:                //Data byte has been rcvd, ACK xmitted, fall through
      twi_buf[twi_buf_ptr++] = TWDR;    //fill buffer with rcvd data
     bde:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_buf>
     be2:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <twi_buf+0x1>
     be6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <twi_buf_ptr.1780>
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	28 0f       	add	r18, r24
     bee:	20 93 01 02 	sts	0x0201, r18	; 0x800201 <twi_buf_ptr.1780>
     bf2:	e8 0f       	add	r30, r24
     bf4:	f1 1d       	adc	r31, r1
     bf6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     bfa:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:                 //SLA+R xmitted and ACK rcvd
      if (twi_buf_ptr < (twi_msg_size-1)){TWCR = TWCR_RACK;}  //ACK each byte
     bfc:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <twi_msg_size>
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	28 17       	cp	r18, r24
     c08:	39 07       	cpc	r19, r25
     c0a:	2c f3       	brlt	.-54     	; 0xbd6 <__vector_33+0xe0>
      else                               {TWCR = TWCR_RNACK;} //NACK last byte 
     c0c:	85 e8       	ldi	r24, 0x85	; 133
     c0e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c12:	90 cf       	rjmp	.-224    	; 0xb34 <__vector_33+0x3e>

00000c14 <twi_busy>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c14:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
}
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	08 95       	ret

00000c1c <twi_start_wr>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c1c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a write transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_wr(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                    //wait till TWI rdy for next xfer
     c20:	90 fd       	sbrc	r25, 0
     c22:	fc cf       	rjmp	.-8      	; 0xc1c <twi_start_wr>
  twi_bus_addr = (twi_addr & ~TW_READ); //set twi bus address, mark as write 
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <twi_bus_addr>
  twi_buf = twi_data;                   //load pointer to write buffer
     c2a:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <twi_buf+0x1>
     c2e:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <twi_buf>
  twi_msg_size = byte_cnt;              //load size of xfer 
     c32:	40 93 3d 02 	sts	0x023D, r20	; 0x80023d <twi_msg_size>
  TWCR = TWCR_START;                    //initiate START
     c36:	85 ea       	ldi	r24, 0xA5	; 165
     c38:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c3c:	08 95       	ret

00000c3e <twi_start_rd>:
//Call this function to test if the TWI unit is busy transferring data. The TWI
//code uses the the interrupt enable bit (TWIE) to indicate if the TWI unit
//is busy or not.  This protocol must be maintained for correct operation.
//*****************************************************************************
uint8_t twi_busy(void){
  return (bit_is_set(TWCR,TWIE)); //if interrupt is enabled, twi is busy
     c3e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
//Initiates a read transfer. Loads global variables. Sends START. ISR handles
//the rest.
//****************************************************************************
void twi_start_rd(uint8_t twi_addr, uint8_t *twi_data, uint8_t byte_cnt){

  while(twi_busy());                   //wait till TWI rdy for next xfer
     c42:	90 fd       	sbrc	r25, 0
     c44:	fc cf       	rjmp	.-8      	; 0xc3e <twi_start_rd>
  twi_bus_addr = (twi_addr | TW_READ); //set twi bus address, mark as read  
     c46:	81 60       	ori	r24, 0x01	; 1
     c48:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <twi_bus_addr>
  twi_buf = twi_data;                  //load pointer to write buffer
     c4c:	70 93 3b 02 	sts	0x023B, r23	; 0x80023b <twi_buf+0x1>
     c50:	60 93 3a 02 	sts	0x023A, r22	; 0x80023a <twi_buf>
  twi_msg_size = byte_cnt;             //load size of xfer 
     c54:	40 93 3d 02 	sts	0x023D, r20	; 0x80023d <twi_msg_size>
  TWCR = TWCR_START;                   //initiate START
     c58:	85 ea       	ldi	r24, 0xA5	; 165
     c5a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
     c5e:	08 95       	ret

00000c60 <init_twi>:
//10K pullups are present on the board
//for alarm clock an additional 4.7K resistor is also there for pullup
//******************************************************************************

void init_twi(){
  TWDR = 0xFF;     //release SDA, default contents
     c60:	8f ef       	ldi	r24, 0xFF	; 255
     c62:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
  TWSR = 0x00;     //prescaler value = 1
     c66:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  TWBR = TWI_TWBR; //defined in twi_master.h 
     c6a:	8c e0       	ldi	r24, 0x0C	; 12
     c6c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
     c70:	08 95       	ret

00000c72 <uart_putc>:
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
     c72:	5d 9b       	sbis	0x0b, 5	; 11
     c74:	fe cf       	rjmp	.-4      	; 0xc72 <uart_putc>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
     c76:	8c b9       	out	0x0c, r24	; 12
  while (!(UCSR0A & (1 << UDRE0)))
     c78:	5d 9b       	sbis	0x0b, 5	; 11
     c7a:	fe cf       	rjmp	.-4      	; 0xc78 <uart_putc+0x6>
    ; // Wait for previous transmissions
}
     c7c:	08 95       	ret

00000c7e <uart1_putc>:
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data)
{
  while (!(UCSR1A & (1 << UDRE1)))
     c7e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     c82:	95 ff       	sbrs	r25, 5
     c84:	fc cf       	rjmp	.-8      	; 0xc7e <uart1_putc>
    ;          // Wait for previous transmissions
  UDR1 = data; // Send data byte
     c86:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  while (!(UCSR1A & (1 << UDRE1)))
     c8a:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     c8e:	85 ff       	sbrs	r24, 5
     c90:	fc cf       	rjmp	.-8      	; 0xc8a <uart1_putc+0xc>
    ; // Wait for previous transmissions
}
     c92:	08 95       	ret

00000c94 <uart_puts>:
//******************************************************************
//                        uart_puts
// Takes a string and sends each charater to be sent to USART0
//void uart_puts(unsigned char *str) {
void uart_puts(char *str)
{
     c94:	fc 01       	movw	r30, r24
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     c96:	90 81       	ld	r25, Z
     c98:	99 23       	and	r25, r25
     c9a:	49 f0       	breq	.+18     	; 0xcae <uart_puts+0x1a>
     c9c:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
     c9e:	5d 9b       	sbis	0x0b, 5	; 11
     ca0:	fe cf       	rjmp	.-4      	; 0xc9e <uart_puts+0xa>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
     ca2:	9c b9       	out	0x0c, r25	; 12
  while (!(UCSR0A & (1 << UDRE0)))
     ca4:	5d 9b       	sbis	0x0b, 5	; 11
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <uart_puts+0x10>
//void uart_puts(unsigned char *str) {
void uart_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     ca8:	91 91       	ld	r25, Z+
     caa:	91 11       	cpse	r25, r1
     cac:	f8 cf       	rjmp	.-16     	; 0xc9e <uart_puts+0xa>
     cae:	08 95       	ret

00000cb0 <uart1_puts>:
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 81       	ld	r18, Z
     cb4:	22 23       	and	r18, r18
     cb6:	71 f0       	breq	.+28     	; 0xcd4 <uart1_puts+0x24>
     cb8:	31 96       	adiw	r30, 0x01	; 1
//
// Takes a character and sends it to USART1
//
void uart1_putc(char data)
{
  while (!(UCSR1A & (1 << UDRE1)))
     cba:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     cbe:	95 ff       	sbrs	r25, 5
     cc0:	fc cf       	rjmp	.-8      	; 0xcba <uart1_puts+0xa>
    ;          // Wait for previous transmissions
  UDR1 = data; // Send data byte
     cc2:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  while (!(UCSR1A & (1 << UDRE1)))
     cc6:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     cca:	95 ff       	sbrs	r25, 5
     ccc:	fc cf       	rjmp	.-8      	; 0xcc6 <uart1_puts+0x16>
//void uart_puts(unsigned char *str) {
void uart1_puts(char *str)
{
  int i = 0;
  // Loop through string, sending each character
  while (str[i] != '\0')
     cce:	21 91       	ld	r18, Z+
     cd0:	21 11       	cpse	r18, r1
     cd2:	f3 cf       	rjmp	.-26     	; 0xcba <uart1_puts+0xa>
     cd4:	08 95       	ret

00000cd6 <uart_puts_p>:
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str)
{
  // Loop through string, sending each character
  while (pgm_read_byte(str) != 0x00)
     cd6:	9c 01       	movw	r18, r24
     cd8:	fc 01       	movw	r30, r24
     cda:	44 91       	lpm	r20, Z
     cdc:	44 23       	and	r20, r20
     cde:	69 f0       	breq	.+26     	; 0xcfa <uart_puts_p+0x24>
  {
    uart_putc(pgm_read_byte(str++));
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	f9 01       	movw	r30, r18
     ce4:	24 91       	lpm	r18, Z
//
// Takes a character and sends it to USART0
//
void uart_putc(char data)
{
  while (!(UCSR0A & (1 << UDRE0)))
     ce6:	5d 9b       	sbis	0x0b, 5	; 11
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <uart_puts_p+0x10>
    ;          // Wait for previous transmissions
  UDR0 = data; // Send data byte
     cea:	2c b9       	out	0x0c, r18	; 12
  while (!(UCSR0A & (1 << UDRE0)))
     cec:	5d 9b       	sbis	0x0b, 5	; 11
     cee:	fe cf       	rjmp	.-4      	; 0xcec <uart_puts_p+0x16>
// Takes a string in flash memory and sends each charater to USART0
//void uart_puts(unsigned char *str) {
void uart_puts_p(const char *str)
{
  // Loop through string, sending each character
  while (pgm_read_byte(str) != 0x00)
     cf0:	9c 01       	movw	r18, r24
     cf2:	fc 01       	movw	r30, r24
     cf4:	44 91       	lpm	r20, Z
     cf6:	41 11       	cpse	r20, r1
     cf8:	f3 cf       	rjmp	.-26     	; 0xce0 <uart_puts_p+0xa>
  {
    uart_putc(pgm_read_byte(str++));
  }
}
     cfa:	08 95       	ret

00000cfc <uart_init>:
//must be in place for the MAX232 chip to get data.

void uart_init()
{
 //rx and tx enable, receive interrupt enabled, 8 bit characters
  UCSR0B |= (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0); //INTERRUPTS ENABLED
     cfc:	8a b1       	in	r24, 0x0a	; 10
     cfe:	88 69       	ori	r24, 0x98	; 152
     d00:	8a b9       	out	0x0a, r24	; 10
                                                         //  UCSR1B |= (1<<RXEN0) | (1<<TXEN0);               //INTERRUPS DISABLED

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     d02:	e5 e9       	ldi	r30, 0x95	; 149
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	86 60       	ori	r24, 0x06	; 6
     d0a:	80 83       	st	Z, r24
  UBRR0H = (BAUDVALUE >> 8); //load upper byte of the baud rate into UBRR
     d0c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
  UBRR0L = BAUDVALUE;        //load lower byte of the baud rate into UBRR
     d10:	87 e6       	ldi	r24, 0x67	; 103
     d12:	89 b9       	out	0x09, r24	; 9
     d14:	08 95       	ret

00000d16 <uart1_init>:

void uart1_init()
{
  //rx and tx enable, receive interrupt enabled, 8 bit characters
  //UCSR1B |= (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1); //INTERRUPTS ENABLED
  UCSR1B |= (1 << RXEN1) | (1 << TXEN1); //INTERRUPS DISABLED
     d16:	ea e9       	ldi	r30, 0x9A	; 154
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	88 61       	ori	r24, 0x18	; 24
     d1e:	80 83       	st	Z, r24

  //async operation, no parity,  one stop bit, 8-bit characters
  UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     d20:	ed e9       	ldi	r30, 0x9D	; 157
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	86 60       	ori	r24, 0x06	; 6
     d28:	80 83       	st	Z, r24
  UBRR1H = (BAUDVALUE_1 >> 8); //load upper byte of the baud rate into UBRR
     d2a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  UBRR1L = BAUDVALUE_1;        //load lower byte of the baud rate into UBRR
     d2e:	87 e6       	ldi	r24, 0x67	; 103
     d30:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     d34:	08 95       	ret

00000d36 <uart_getc>:
//
char uart_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR0A & (1 << RXC0)))
     d36:	80 e8       	ldi	r24, 0x80	; 128
     d38:	9e e3       	ldi	r25, 0x3E	; 62
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <uart_getc+0xa>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
  {
    timer++;
    if (timer >= 16000)
     d3e:	21 f0       	breq	.+8      	; 0xd48 <uart_getc+0x12>
//
char uart_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR0A & (1 << RXC0)))
     d40:	5f 9b       	sbis	0x0b, 7	; 11
     d42:	fc cf       	rjmp	.-8      	; 0xd3c <uart_getc+0x6>
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
    // return -1;

  }              // Wait for byte to arrive
  return (UDR0); //return the received data
     d44:	8c b1       	in	r24, 0x0c	; 12
     d46:	08 95       	ret
  while (!(UCSR0A & (1 << RXC0)))
  {
    timer++;
    if (timer >= 16000)
    {
      return (0);
     d48:	80 e0       	ldi	r24, 0x00	; 0
    //return a -1 if no data comes back.
    // return -1;

  }              // Wait for byte to arrive
  return (UDR0); //return the received data
}
     d4a:	08 95       	ret

00000d4c <uart1_getc>:
//
char uart1_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR1A & (1 << RXC1)))
     d4c:	80 e8       	ldi	r24, 0x80	; 128
     d4e:	9e e3       	ldi	r25, 0x3E	; 62
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <uart1_getc+0xa>
     d52:	01 97       	sbiw	r24, 0x01	; 1
  {
    timer++;
    if (timer >= 16000)
     d54:	39 f0       	breq	.+14     	; 0xd64 <uart1_getc+0x18>
//
char uart1_getc(void)
{
  uint16_t timer = 0;

  while (!(UCSR1A & (1 << RXC1)))
     d56:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     d5a:	27 ff       	sbrs	r18, 7
     d5c:	fa cf       	rjmp	.-12     	; 0xd52 <uart1_getc+0x6>
    //what should we return if nothing comes in?
    //return the data into a global variable
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
  }              // Wait for byte to arrive
  return (UDR1); //return the received data
     d5e:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     d62:	08 95       	ret
  while (!(UCSR1A & (1 << RXC1)))
  {
    timer++;
    if (timer >= 16000)
    {
      return (0);
     d64:	80 e0       	ldi	r24, 0x00	; 0
    //return the data into a global variable
    //give uart_getc the address of the variable
    //return a -1 if no data comes back.
  }              // Wait for byte to arrive
  return (UDR1); //return the received data
}
     d66:	08 95       	ret

00000d68 <get_int_status>:
//TODO: update for interrupts
//
uint8_t get_int_status()
{

    si4734_wr_buf[0] = GET_INT_STATUS;
     d68:	84 e1       	ldi	r24, 0x14	; 20
     d6a:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1); //send get_int_status command
     d6e:	41 e0       	ldi	r20, 0x01	; 1
     d70:	63 ee       	ldi	r22, 0xE3	; 227
     d72:	72 e0       	ldi	r23, 0x02	; 2
     d74:	82 e2       	ldi	r24, 0x22	; 34
     d76:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (twi_busy())
     d7a:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     d7e:	81 11       	cpse	r24, r1
     d80:	fc cf       	rjmp	.-8      	; 0xd7a <get_int_status+0x12>
     d82:	8f ea       	ldi	r24, 0xAF	; 175
     d84:	94 e0       	ldi	r25, 0x04	; 4
     d86:	01 97       	sbiw	r24, 0x01	; 1
     d88:	f1 f7       	brne	.-4      	; 0xd86 <get_int_status+0x1e>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <get_int_status+0x24>
     d8c:	00 00       	nop
    {
    };                                              //spin while previous TWI transaction finshes
    _delay_us(300);                                 //si4734 process delay
    twi_start_rd(SI4734_ADDRESS, si4734_rd_buf, 1); //get the interrupt status
     d8e:	41 e0       	ldi	r20, 0x01	; 1
     d90:	6d e0       	ldi	r22, 0x0D	; 13
     d92:	73 e0       	ldi	r23, 0x03	; 3
     d94:	82 e2       	ldi	r24, 0x22	; 34
     d96:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_start_rd>
    while (twi_busy())
     d9a:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     d9e:	81 11       	cpse	r24, r1
     da0:	fc cf       	rjmp	.-8      	; 0xd9a <get_int_status+0x32>
    {
    }; //spin while previous TWI transaction finshes
    return (si4734_rd_buf[0]);
}
     da2:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <si4734_rd_buf>
     da6:	08 95       	ret

00000da8 <fm_tune_freq>:
//takes current_fm_freq and sends it to the radio chip
//

void fm_tune_freq()
{
    si4734_wr_buf[0] = 0x20;                            //fm tune command
     da8:	80 e2       	ldi	r24, 0x20	; 32
     daa:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    si4734_wr_buf[1] = 0x00;                            //no FREEZE and no FAST tune
     dae:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <si4734_wr_buf+0x1>
    si4734_wr_buf[2] = (uint8_t)(current_fm_freq >> 8); //freq high byte
     db2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     db6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     dba:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <si4734_wr_buf+0x2>
    si4734_wr_buf[3] = (uint8_t)(current_fm_freq);      //freq low byte
     dbe:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <si4734_wr_buf+0x3>
    si4734_wr_buf[4] = 0x00;                            //antenna tuning capactior
     dc2:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <si4734_wr_buf+0x4>
    //send fm tune command
    STC_interrupt = FALSE;
     dc6:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <STC_interrupt>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 5);
     dca:	45 e0       	ldi	r20, 0x05	; 5
     dcc:	63 ee       	ldi	r22, 0xE3	; 227
     dce:	72 e0       	ldi	r23, 0x02	; 2
     dd0:	82 e2       	ldi	r24, 0x22	; 34
     dd2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (!STC_interrupt)
     dd6:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <STC_interrupt>
     dda:	88 23       	and	r24, r24
     ddc:	e1 f3       	breq	.-8      	; 0xdd6 <fm_tune_freq+0x2e>
    {
    }; //spin until the tune command finishes
}
     dde:	08 95       	ret

00000de0 <am_tune_freq>:
//takes current_am_freq and sends it to the radio chip
//

void am_tune_freq()
{
    si4734_wr_buf[0] = AM_TUNE_FREQ;                    //am tune command
     de0:	80 e4       	ldi	r24, 0x40	; 64
     de2:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    si4734_wr_buf[1] = 0x00;                            //no FAST tune
     de6:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <si4734_wr_buf+0x1>
    si4734_wr_buf[2] = (uint8_t)(current_am_freq >> 8); //freq high byte
     dea:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <current_am_freq>
     dee:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <current_am_freq+0x1>
     df2:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <si4734_wr_buf+0x2>
    si4734_wr_buf[3] = (uint8_t)(current_am_freq);      //freq low byte
     df6:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <si4734_wr_buf+0x3>
    si4734_wr_buf[4] = 0x00;                            //antenna tuning capactior high byte
     dfa:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <si4734_wr_buf+0x4>
    si4734_wr_buf[5] = 0x00;                            //antenna tuning capactior low byte
     dfe:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <si4734_wr_buf+0x5>
    //send am tune command
    STC_interrupt = FALSE;
     e02:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <STC_interrupt>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     e06:	46 e0       	ldi	r20, 0x06	; 6
     e08:	63 ee       	ldi	r22, 0xE3	; 227
     e0a:	72 e0       	ldi	r23, 0x02	; 2
     e0c:	82 e2       	ldi	r24, 0x22	; 34
     e0e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (!STC_interrupt)
     e12:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <STC_interrupt>
     e16:	88 23       	and	r24, r24
     e18:	e1 f3       	breq	.-8      	; 0xe12 <am_tune_freq+0x32>
    {
    }; //spin until the tune command finishes
}
     e1a:	08 95       	ret

00000e1c <sw_tune_freq>:
//takes current_sw_freq and sends it to the radio chip
//antcap low byte is 0x01 as per datasheet

void sw_tune_freq()
{
    si4734_wr_buf[0] = 0x40;                            //am tune command
     e1c:	e3 ee       	ldi	r30, 0xE3	; 227
     e1e:	f2 e0       	ldi	r31, 0x02	; 2
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x00;                            //no FAST tune
     e24:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(current_sw_freq >> 8); //freq high byte
     e26:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <current_sw_freq>
     e2a:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <current_sw_freq+0x1>
     e2e:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(current_sw_freq);      //freq low byte
     e30:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = 0x00;                            //antenna tuning capactior high byte
     e32:	14 82       	std	Z+4, r1	; 0x04
    si4734_wr_buf[5] = 0x01;                            //antenna tuning capactior low byte
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	85 83       	std	Z+5, r24	; 0x05
    //send am tune command
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     e38:	46 e0       	ldi	r20, 0x06	; 6
     e3a:	bf 01       	movw	r22, r30
     e3c:	82 e2       	ldi	r24, 0x22	; 34
     e3e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e42:	2f ef       	ldi	r18, 0xFF	; 255
     e44:	87 ee       	ldi	r24, 0xE7	; 231
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	21 50       	subi	r18, 0x01	; 1
     e4a:	80 40       	sbci	r24, 0x00	; 0
     e4c:	90 40       	sbci	r25, 0x00	; 0
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <sw_tune_freq+0x2c>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <sw_tune_freq+0x36>
     e52:	00 00       	nop
     e54:	08 95       	ret

00000e56 <radio_pwr_dwn>:

void radio_pwr_dwn()
{

    //save current frequency to EEPROM
    switch (current_radio_band)
     e56:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <current_radio_band>
     e5a:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <current_radio_band+0x1>
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	91 05       	cpc	r25, r1
     e62:	51 f1       	breq	.+84     	; 0xeb8 <radio_pwr_dwn+0x62>
     e64:	00 f1       	brcs	.+64     	; 0xea6 <radio_pwr_dwn+0x50>
     e66:	02 97       	sbiw	r24, 0x02	; 2
     e68:	41 f4       	brne	.+16     	; 0xe7a <radio_pwr_dwn+0x24>
        break;
    case (AM):
        eeprom_write_word(&eeprom_am_freq, current_am_freq);
        break;
    case (SW):
        eeprom_write_word(&eeprom_sw_freq, current_sw_freq);
     e6a:	60 91 09 03 	lds	r22, 0x0309	; 0x800309 <current_sw_freq>
     e6e:	70 91 0a 03 	lds	r23, 0x030A	; 0x80030a <current_sw_freq+0x1>
     e72:	8b e0       	ldi	r24, 0x0B	; 11
     e74:	93 e0       	ldi	r25, 0x03	; 3
     e76:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <eeprom_write_word>
        break;
    default:
        break;
    } //switch

    eeprom_write_byte(&eeprom_volume, current_volume); //save current volume level
     e7a:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <current_volume>
     e7e:	8e ed       	ldi	r24, 0xDE	; 222
     e80:	92 e0       	ldi	r25, 0x02	; 2
     e82:	0e 94 67 0a 	call	0x14ce	; 0x14ce <eeprom_write_byte>

    //send fm power down command
    si4734_wr_buf[0] = 0x11;
     e86:	81 e1       	ldi	r24, 0x11	; 17
     e88:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	63 ee       	ldi	r22, 0xE3	; 227
     e90:	72 e0       	ldi	r23, 0x02	; 2
     e92:	82 e2       	ldi	r24, 0x22	; 34
     e94:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e98:	87 ed       	ldi	r24, 0xD7	; 215
     e9a:	94 e0       	ldi	r25, 0x04	; 4
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	f1 f7       	brne	.-4      	; 0xe9c <radio_pwr_dwn+0x46>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <radio_pwr_dwn+0x4c>
     ea2:	00 00       	nop
     ea4:	08 95       	ret

    //save current frequency to EEPROM
    switch (current_radio_band)
    {
    case (FM):
        eeprom_write_word(&eeprom_fm_freq, current_fm_freq);
     ea6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     eaa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     eae:	8f ed       	ldi	r24, 0xDF	; 223
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <eeprom_write_word>
        break;
     eb6:	e1 cf       	rjmp	.-62     	; 0xe7a <radio_pwr_dwn+0x24>
    case (AM):
        eeprom_write_word(&eeprom_am_freq, current_am_freq);
     eb8:	60 91 06 03 	lds	r22, 0x0306	; 0x800306 <current_am_freq>
     ebc:	70 91 07 03 	lds	r23, 0x0307	; 0x800307 <current_am_freq+0x1>
     ec0:	84 ef       	ldi	r24, 0xF4	; 244
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <eeprom_write_word>
        break;
     ec8:	d8 cf       	rjmp	.-80     	; 0xe7a <radio_pwr_dwn+0x24>

00000eca <fm_rsq_status>:
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_rsq_status()
{

    si4734_wr_buf[0] = FM_RSQ_STATUS;           //fm_rsq_status command
     eca:	83 e2       	ldi	r24, 0x23	; 35
     ecc:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_RSQ_STATUS_IN_INTACK; //clear STCINT bit if set
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     ed6:	42 e0       	ldi	r20, 0x02	; 2
     ed8:	63 ee       	ldi	r22, 0xE3	; 227
     eda:	72 e0       	ldi	r23, 0x02	; 2
     edc:	82 e2       	ldi	r24, 0x22	; 34
     ede:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (twi_busy())
     ee2:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     ee6:	81 11       	cpse	r24, r1
     ee8:	fc cf       	rjmp	.-8      	; 0xee2 <fm_rsq_status+0x18>
     eea:	8f ea       	ldi	r24, 0xAF	; 175
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <fm_rsq_status+0x24>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <fm_rsq_status+0x2a>
     ef4:	00 00       	nop
    };              //spin while previous TWI transaction finshes
    _delay_us(300); //delay for si4734 to process
    //This is a blind wait. Waiting for CTS interrupt here would tell you
    //when the command is received and has been processed.
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     ef6:	48 e0       	ldi	r20, 0x08	; 8
     ef8:	6c ee       	ldi	r22, 0xEC	; 236
     efa:	72 e0       	ldi	r23, 0x02	; 2
     efc:	82 e2       	ldi	r24, 0x22	; 34
     efe:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_start_rd>
    while (twi_busy())
     f02:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     f06:	81 11       	cpse	r24, r1
     f08:	fc cf       	rjmp	.-8      	; 0xf02 <fm_rsq_status+0x38>
    {
    }; //spin while previous TWI transaction finshes
}
     f0a:	08 95       	ret

00000f0c <fm_tune_status>:
//TODO: Dang, thats a big delay, could cause problems, best check out.
//
void fm_tune_status()
{

    si4734_wr_buf[0] = FM_TUNE_STATUS;           //fm_tune_status command
     f0c:	82 e2       	ldi	r24, 0x22	; 34
     f0e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    si4734_wr_buf[1] = FM_TUNE_STATUS_IN_INTACK; //clear STCINT bit if set
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f18:	42 e0       	ldi	r20, 0x02	; 2
     f1a:	63 ee       	ldi	r22, 0xE3	; 227
     f1c:	72 e0       	ldi	r23, 0x02	; 2
     f1e:	82 e2       	ldi	r24, 0x22	; 34
     f20:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (twi_busy())
     f24:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     f28:	81 11       	cpse	r24, r1
     f2a:	fc cf       	rjmp	.-8      	; 0xf24 <fm_tune_status+0x18>
     f2c:	8f ea       	ldi	r24, 0xAF	; 175
     f2e:	94 e0       	ldi	r25, 0x04	; 4
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <fm_tune_status+0x24>
     f34:	00 c0       	rjmp	.+0      	; 0xf36 <fm_tune_status+0x2a>
     f36:	00 00       	nop
    {
    };              //spin while previous TWI transaction finshes
    _delay_us(300); //delay for si4734 to process
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f38:	48 e0       	ldi	r20, 0x08	; 8
     f3a:	6c ee       	ldi	r22, 0xEC	; 236
     f3c:	72 e0       	ldi	r23, 0x02	; 2
     f3e:	82 e2       	ldi	r24, 0x22	; 34
     f40:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_start_rd>
    while (twi_busy())
     f44:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     f48:	81 11       	cpse	r24, r1
     f4a:	fc cf       	rjmp	.-8      	; 0xf44 <fm_tune_status+0x38>
    {
    }; //spin till TWI read transaction finshes
}
     f4c:	08 95       	ret

00000f4e <am_tune_status>:
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_tune_status()
{

    si4734_wr_buf[0] = AM_TUNE_STATUS;           //fm_tune_status command
     f4e:	82 e4       	ldi	r24, 0x42	; 66
     f50:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_TUNE_STATUS_IN_INTACK; //clear STCINT bit if set
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f5a:	42 e0       	ldi	r20, 0x02	; 2
     f5c:	63 ee       	ldi	r22, 0xE3	; 227
     f5e:	72 e0       	ldi	r23, 0x02	; 2
     f60:	82 e2       	ldi	r24, 0x22	; 34
     f62:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (twi_busy())
     f66:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     f6a:	81 11       	cpse	r24, r1
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <am_tune_status+0x18>
     f6e:	8f ea       	ldi	r24, 0xAF	; 175
     f70:	94 e0       	ldi	r25, 0x04	; 4
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <am_tune_status+0x24>
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <am_tune_status+0x2a>
     f78:	00 00       	nop
    {
    };              //spin while previous TWI transaction finshes
    _delay_us(300); //delay for si4734 to process command
    //get the am tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     f7a:	48 e0       	ldi	r20, 0x08	; 8
     f7c:	6c ee       	ldi	r22, 0xEC	; 236
     f7e:	72 e0       	ldi	r23, 0x02	; 2
     f80:	82 e2       	ldi	r24, 0x22	; 34
     f82:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <twi_start_rd>

00000f86 <am_rsq_status>:
//TODO: Dang, thats a big delay, could cause problems, best check out.

void am_rsq_status()
{

    si4734_wr_buf[0] = AM_RSQ_STATUS;           //am_rsq_status command
     f86:	83 e4       	ldi	r24, 0x43	; 67
     f88:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    si4734_wr_buf[1] = AM_RSQ_STATUS_IN_INTACK; //clear STCINT bit if set
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <si4734_wr_buf+0x1>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 2);
     f92:	42 e0       	ldi	r20, 0x02	; 2
     f94:	63 ee       	ldi	r22, 0xE3	; 227
     f96:	72 e0       	ldi	r23, 0x02	; 2
     f98:	82 e2       	ldi	r24, 0x22	; 34
     f9a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (twi_busy())
     f9e:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
     fa2:	81 11       	cpse	r24, r1
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <am_rsq_status+0x18>
     fa6:	8f ea       	ldi	r24, 0xAF	; 175
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <am_rsq_status+0x24>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <am_rsq_status+0x2a>
     fb0:	00 00       	nop
    {
    };              //spin while previous TWI transaction finshes
    _delay_us(300); //delay for si4734 to process command
    //get the fm tune status
    twi_start_rd(SI4734_ADDRESS, si4734_tune_status_buf, 8);
     fb2:	48 e0       	ldi	r20, 0x08	; 8
     fb4:	6c ee       	ldi	r22, 0xEC	; 236
     fb6:	72 e0       	ldi	r23, 0x02	; 2
     fb8:	82 e2       	ldi	r24, 0x22	; 34
     fba:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <twi_start_rd>

00000fbe <set_property>:
//command is guarnteed by design to finish in 10ms.
//
void set_property(uint16_t property, uint16_t property_value)
{

    si4734_wr_buf[0] = SET_PROPERTY;                   //set property command
     fbe:	e3 ee       	ldi	r30, 0xE3	; 227
     fc0:	f2 e0       	ldi	r31, 0x02	; 2
     fc2:	22 e1       	ldi	r18, 0x12	; 18
     fc4:	20 83       	st	Z, r18
    si4734_wr_buf[1] = 0x00;                           //all zeros
     fc6:	11 82       	std	Z+1, r1	; 0x01
    si4734_wr_buf[2] = (uint8_t)(property >> 8);       //property high byte
     fc8:	92 83       	std	Z+2, r25	; 0x02
    si4734_wr_buf[3] = (uint8_t)(property);            //property low byte
     fca:	83 83       	std	Z+3, r24	; 0x03
    si4734_wr_buf[4] = (uint8_t)(property_value >> 8); //property value high byte
     fcc:	74 83       	std	Z+4, r23	; 0x04
    si4734_wr_buf[5] = (uint8_t)(property_value);      //property value low byte
     fce:	65 83       	std	Z+5, r22	; 0x05
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 6);
     fd0:	46 e0       	ldi	r20, 0x06	; 6
     fd2:	bf 01       	movw	r22, r30
     fd4:	82 e2       	ldi	r24, 0x22	; 34
     fd6:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fda:	8f e3       	ldi	r24, 0x3F	; 63
     fdc:	9c e9       	ldi	r25, 0x9C	; 156
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	f1 f7       	brne	.-4      	; 0xfde <set_property+0x20>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <set_property+0x26>
     fe4:	00 00       	nop
     fe6:	08 95       	ret

00000fe8 <fm_pwr_up>:
//                            fm_pwr_up()
//
void fm_pwr_up()
{
    //restore the previous fm frequency
    current_fm_freq = eeprom_read_word(&eeprom_fm_freq); //TODO: only this one does not work
     fe8:	8f ed       	ldi	r24, 0xDF	; 223
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <eeprom_read_word>
     ff0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ff4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    current_volume = eeprom_read_byte(&eeprom_volume);   //TODO: only this one does not work
     ff8:	8e ed       	ldi	r24, 0xDE	; 222
     ffa:	92 e0       	ldi	r25, 0x02	; 2
     ffc:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <eeprom_read_byte>
    1000:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <current_volume>

    //send fm power up command
    si4734_wr_buf[0] = FM_PWR_UP; //powerup command byte
    1004:	e3 ee       	ldi	r30, 0xE3	; 227
    1006:	f2 e0       	ldi	r31, 0x02	; 2
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x50;      //GPO2O enabled, STCINT enabled, use ext. 32khz osc.
    100c:	80 e5       	ldi	r24, 0x50	; 80
    100e:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;      //OPMODE = 0x05; analog audio output
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1014:	43 e0       	ldi	r20, 0x03	; 3
    1016:	bf 01       	movw	r22, r30
    1018:	82 e2       	ldi	r24, 0x22	; 34
    101a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	8b ed       	ldi	r24, 0xDB	; 219
    1022:	95 e0       	ldi	r25, 0x05	; 5
    1024:	21 50       	subi	r18, 0x01	; 1
    1026:	80 40       	sbci	r24, 0x00	; 0
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	e1 f7       	brne	.-8      	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <__DATA_REGION_LENGTH__+0x2e>
    102e:	00 00       	nop
    _delay_ms(120); //startup delay as specified
    //The seek/tune interrupt is enabled here. If the STCINT bit is set, a 1.5us
    //low pulse will be output from GPIO2/INT when tune or seek is completed.
    set_property(GPO_IEN, GPO_IEN_STCIEN); //seek_tune complete interrupt
    1030:	61 e0       	ldi	r22, 0x01	; 1
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <set_property>

0000103c <am_pwr_up>:
//                            am_pwr_up()
//
void am_pwr_up()
{
    //restore the previous am frequency
    current_am_freq = eeprom_read_word(&eeprom_am_freq);
    103c:	84 ef       	ldi	r24, 0xF4	; 244
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <eeprom_read_word>
    1044:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <current_am_freq+0x1>
    1048:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <current_am_freq>
    current_volume = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work
    104c:	8e ed       	ldi	r24, 0xDE	; 222
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <eeprom_read_byte>
    1054:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <current_volume>

    //send am power up command
    si4734_wr_buf[0] = AM_PWR_UP;
    1058:	e3 ee       	ldi	r30, 0xE3	; 227
    105a:	f2 e0       	ldi	r31, 0x02	; 2
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51; //GPO2OEN and XOSCEN selected
    1060:	81 e5       	ldi	r24, 0x51	; 81
    1062:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    1064:	85 e0       	ldi	r24, 0x05	; 5
    1066:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    1068:	43 e0       	ldi	r20, 0x03	; 3
    106a:	bf 01       	movw	r22, r30
    106c:	82 e2       	ldi	r24, 0x22	; 34
    106e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    1072:	2f ef       	ldi	r18, 0xFF	; 255
    1074:	8b ed       	ldi	r24, 0xDB	; 219
    1076:	95 e0       	ldi	r25, 0x05	; 5
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	80 40       	sbci	r24, 0x00	; 0
    107c:	90 40       	sbci	r25, 0x00	; 0
    107e:	e1 f7       	brne	.-8      	; 0x1078 <am_pwr_up+0x3c>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <am_pwr_up+0x46>
    1082:	00 00       	nop
    _delay_ms(120);
    set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <set_property>

00001090 <sw_pwr_up>:
//

void sw_pwr_up()
{
    //restore the previous sw frequency
    current_sw_freq = eeprom_read_word(&eeprom_sw_freq);
    1090:	8b e0       	ldi	r24, 0x0B	; 11
    1092:	93 e0       	ldi	r25, 0x03	; 3
    1094:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <eeprom_read_word>
    1098:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <current_sw_freq+0x1>
    109c:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <current_sw_freq>
    current_volume = eeprom_read_byte(&eeprom_volume); //TODO: only this one does not work
    10a0:	8e ed       	ldi	r24, 0xDE	; 222
    10a2:	92 e0       	ldi	r25, 0x02	; 2
    10a4:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <eeprom_read_byte>
    10a8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <current_volume>

    //send sw power up command (same as am, only tuning rate is different)
    si4734_wr_buf[0] = AM_PWR_UP; //same cmd as for AM
    10ac:	e3 ee       	ldi	r30, 0xE3	; 227
    10ae:	f2 e0       	ldi	r31, 0x02	; 2
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 83       	st	Z, r24
    si4734_wr_buf[1] = 0x51;
    10b4:	81 e5       	ldi	r24, 0x51	; 81
    10b6:	81 83       	std	Z+1, r24	; 0x01
    si4734_wr_buf[2] = 0x05;
    10b8:	85 e0       	ldi	r24, 0x05	; 5
    10ba:	82 83       	std	Z+2, r24	; 0x02
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 3);
    10bc:	43 e0       	ldi	r20, 0x03	; 3
    10be:	bf 01       	movw	r22, r30
    10c0:	82 e2       	ldi	r24, 0x22	; 34
    10c2:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    10c6:	2f ef       	ldi	r18, 0xFF	; 255
    10c8:	8b ed       	ldi	r24, 0xDB	; 219
    10ca:	95 e0       	ldi	r25, 0x05	; 5
    10cc:	21 50       	subi	r18, 0x01	; 1
    10ce:	80 40       	sbci	r24, 0x00	; 0
    10d0:	90 40       	sbci	r25, 0x00	; 0
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <sw_pwr_up+0x3c>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <sw_pwr_up+0x46>
    10d6:	00 00       	nop
    _delay_ms(120); //start up delay

    //set property to disable soft muting for shortwave broadcasts
    set_property(AM_SOFT_MUTE_MAX_ATTENUATION, 0x0000); //cut off soft mute
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	93 e3       	ldi	r25, 0x33	; 51
    10e0:	0e 94 df 07 	call	0xfbe	; 0xfbe <set_property>
    //select 4khz filter BW and engage power line filter
    set_property(AM_CHANNEL_FILTER, (AM_CHFILT_4KHZ | AM_PWR_LINE_NOISE_REJT_FILTER));
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	71 e0       	ldi	r23, 0x01	; 1
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	91 e3       	ldi	r25, 0x31	; 49
    10ec:	0e 94 df 07 	call	0xfbe	; 0xfbe <set_property>
    set_property(GPO_IEN, GPO_IEN_STCIEN); //Seek/Tune Complete interrupt
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <set_property>

000010fc <get_rev>:
//Report the chip revision info via uart1. UART1 be setup and connected to
//a dumb terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//
void get_rev()
{
    si4734_wr_buf[0] = GET_REV; //get rev command
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <si4734_wr_buf>
    twi_start_wr(SI4734_ADDRESS, si4734_wr_buf, 1);
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	63 ee       	ldi	r22, 0xE3	; 227
    1106:	72 e0       	ldi	r23, 0x02	; 2
    1108:	82 e2       	ldi	r24, 0x22	; 34
    110a:	0e 94 0e 06 	call	0xc1c	; 0xc1c <twi_start_wr>
    while (twi_busy())
    110e:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
    1112:	81 11       	cpse	r24, r1
    1114:	fc cf       	rjmp	.-8      	; 0x110e <__stack+0xf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1116:	8f ea       	ldi	r24, 0xAF	; 175
    1118:	94 e0       	ldi	r25, 0x04	; 4
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <__stack+0x1b>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <__stack+0x21>
    1120:	00 00       	nop
    {
    };              //spin till TWI read transaction finshes
    _delay_us(300); //wait for processing delay
                    //get the revision info
    twi_start_rd(SI4734_ADDRESS, si4734_revision_buf, 8);
    1122:	48 e0       	ldi	r20, 0x08	; 8
    1124:	66 ef       	ldi	r22, 0xF6	; 246
    1126:	72 e0       	ldi	r23, 0x02	; 2
    1128:	82 e2       	ldi	r24, 0x22	; 34
    112a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <twi_start_rd>
    while (twi_busy())
    112e:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
    1132:	81 11       	cpse	r24, r1
    1134:	fc cf       	rjmp	.-8      	; 0x112e <__stack+0x2f>
    {
    }; //spin till TWI read transaction finshes
       //use TABs instead?
    uart1_puts("Si4734 Rev:  last 2 digits of part no.   chip rev     \n\r");
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("             -------------------------   --------     \n\r");
    113e:	8b e3       	ldi	r24, 0x3B	; 59
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("                          ");
    1146:	84 e7       	ldi	r24, 0x74	; 116
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    114e:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <si4734_revision_buf+0x1>
    1152:	4a e0       	ldi	r20, 0x0A	; 10
    1154:	66 e6       	ldi	r22, 0x66	; 102
    1156:	72 e0       	ldi	r23, 0x02	; 2
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa((int)si4734_revision_buf[1], uart1_tx_buf, 10);
    uart1_puts(uart1_tx_buf);
    115e:	86 e6       	ldi	r24, 0x66	; 102
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("             ");
    1166:	81 e8       	ldi	r24, 0x81	; 129
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    116e:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <si4734_revision_buf+0x2>
    1172:	4a e0       	ldi	r20, 0x0A	; 10
    1174:	66 e6       	ldi	r22, 0x66	; 102
    1176:	72 e0       	ldi	r23, 0x02	; 2
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa((int)si4734_revision_buf[2], uart1_tx_buf, 10);
    uart1_puts(uart1_tx_buf);
    117e:	86 e6       	ldi	r24, 0x66	; 102
    1180:	92 e0       	ldi	r25, 0x02	; 2
    1182:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    1186:	81 e7       	ldi	r24, 0x71	; 113
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <uart1_puts>

0000118e <get_fm_rsq_status>:
//Report the fm rsq status via uart1. Requires that UART1 be setup and connected to
//a terminal. e.g.: screen /dev/cu.usbserial-A800fh27 9600
//Also requires that a fm_tune_status has been previously called.

void get_fm_rsq_status()
{
    118e:	ff 92       	push	r15
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	a8 97       	sbiw	r28, 0x28	; 40
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    uint8_t disp_freq; //temp holding variable
    char str[40];      //temp for building strings

    uart1_puts("FM_RSQ_STATUS: ");
    11a8:	8f e8       	ldi	r24, 0x8F	; 143
    11aa:	91 e0       	ldi	r25, 0x01	; 1
    11ac:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("status byte   :");
    11b0:	8f e9       	ldi	r24, 0x9F	; 159
    11b2:	91 e0       	ldi	r25, 0x01	; 1
    11b4:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    itoa((int)si4734_tune_status_buf[0], uart1_tx_buf, 16);
    11b8:	0c ee       	ldi	r16, 0xEC	; 236
    11ba:	12 e0       	ldi	r17, 0x02	; 2
    11bc:	f8 01       	movw	r30, r16
    11be:	80 81       	ld	r24, Z
    11c0:	40 e1       	ldi	r20, 0x10	; 16
    11c2:	66 e6       	ldi	r22, 0x66	; 102
    11c4:	72 e0       	ldi	r23, 0x02	; 2
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    uart1_puts(uart1_tx_buf);
    11cc:	86 e6       	ldi	r24, 0x66	; 102
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    11d4:	81 e7       	ldi	r24, 0x71	; 113
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("resp1         :");
    11dc:	8f ea       	ldi	r24, 0xAF	; 175
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    11e4:	f8 01       	movw	r30, r16
    11e6:	81 81       	ldd	r24, Z+1	; 0x01
    11e8:	4a e0       	ldi	r20, 0x0A	; 10
    11ea:	66 e6       	ldi	r22, 0x66	; 102
    11ec:	72 e0       	ldi	r23, 0x02	; 2
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa((int)si4734_tune_status_buf[1], uart1_tx_buf, 10);
    uart1_puts(uart1_tx_buf);
    11f4:	86 e6       	ldi	r24, 0x66	; 102
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    11fc:	81 e7       	ldi	r24, 0x71	; 113
    11fe:	91 e0       	ldi	r25, 0x01	; 1
    1200:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    disp_freq = si4734_tune_status_buf[2];  //load high frequency byte
    disp_freq = (disp_freq << 8);           //shift upper byte to upper 8 bits
    disp_freq |= si4734_tune_status_buf[3]; //load low high frequency byte
    1204:	f8 01       	movw	r30, r16
    1206:	f3 80       	ldd	r15, Z+3	; 0x03
    uart1_puts("freq          :");
    1208:	8f eb       	ldi	r24, 0xBF	; 191
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    1210:	4a e0       	ldi	r20, 0x0A	; 10
    1212:	66 e6       	ldi	r22, 0x66	; 102
    1214:	72 e0       	ldi	r23, 0x02	; 2
    1216:	8f 2d       	mov	r24, r15
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa(disp_freq, uart1_tx_buf, 10);
    uart1_puts(uart1_tx_buf);
    121e:	86 e6       	ldi	r24, 0x66	; 102
    1220:	92 e0       	ldi	r25, 0x02	; 2
    1222:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    1226:	81 e7       	ldi	r24, 0x71	; 113
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("freq high     :");
    122e:	8f ec       	ldi	r24, 0xCF	; 207
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    1236:	f8 01       	movw	r30, r16
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	40 e1       	ldi	r20, 0x10	; 16
    123c:	be 01       	movw	r22, r28
    123e:	6f 5f       	subi	r22, 0xFF	; 255
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa((int)si4734_tune_status_buf[2], str, 16);
    uart1_puts(str);
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    1250:	81 e7       	ldi	r24, 0x71	; 113
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("freq low      :");
    1258:	8f ed       	ldi	r24, 0xDF	; 223
    125a:	91 e0       	ldi	r25, 0x01	; 1
    125c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    1260:	f8 01       	movw	r30, r16
    1262:	83 81       	ldd	r24, Z+3	; 0x03
    1264:	40 e1       	ldi	r20, 0x10	; 16
    1266:	be 01       	movw	r22, r28
    1268:	6f 5f       	subi	r22, 0xFF	; 255
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa((int)si4734_tune_status_buf[3], str, 16);
    uart1_puts(str);
    1272:	ce 01       	movw	r24, r28
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    127a:	81 e7       	ldi	r24, 0x71	; 113
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("rssi          :");
    1282:	8f ee       	ldi	r24, 0xEF	; 239
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    128a:	f8 01       	movw	r30, r16
    128c:	84 81       	ldd	r24, Z+4	; 0x04
    128e:	40 e1       	ldi	r20, 0x10	; 16
    1290:	66 e6       	ldi	r22, 0x66	; 102
    1292:	72 e0       	ldi	r23, 0x02	; 2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 24 0a 	call	0x1448	; 0x1448 <__itoa_ncheck>
    itoa((int)si4734_tune_status_buf[4], uart1_tx_buf, 16);
    uart1_puts(uart1_tx_buf);
    129a:	86 e6       	ldi	r24, 0x66	; 102
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    uart1_puts("\n\r");
    12a2:	81 e7       	ldi	r24, 0x71	; 113
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 58 06 	call	0xcb0	; 0xcb0 <uart1_puts>
    12aa:	a8 96       	adiw	r28, 0x28	; 40
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	08 95       	ret

000012c2 <main>:
//******************************************************************************
int main()
{
    init_twi();
    12c2:	0e 94 30 06 	call	0xc60	; 0xc60 <init_twi>

    DDRE = 0xFF;
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	82 b9       	out	0x02, r24	; 2
    DDRC = 0x08;
    12ca:	88 e0       	ldi	r24, 0x08	; 8
    12cc:	84 bb       	out	0x14, r24	; 20
    sei();
    12ce:	78 94       	sei
    PORTE |= 0x04; //radio reset is on at powerup (active high)
    12d0:	1a 9a       	sbi	0x03, 2	; 3



    // ****************************************************************************
    //Fast PWM, set on compare match
    TCCR3A |= (1 << WGM31) | (1 << COM3A1) | (1 << COM3A0);                               // inverting mode
    12d2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    12d6:	82 6c       	ori	r24, 0xC2	; 194
    12d8:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    TCCR3B |= /*(1 << ICES3) |*/ (1 << WGM33) | (1 << WGM32) | (1 << CS30) | (1 << CS31); //No prescale
    12dc:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    12e0:	8b 61       	ori	r24, 0x1B	; 27
    12e2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    TCCR3C = 0x00;                                                                        //no force compare
    12e6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>

    // OCR3A = 0xFFFF; // initally no volume
    OCR3A = 0x1000;
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e1       	ldi	r25, 0x10	; 16
    12ee:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    12f2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    ICR3 = 0xF000; // top value
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 ef       	ldi	r25, 0xF0	; 240
    12fa:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    12fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>



    //TCNT1 (Alarm PWM)
    //	TCCR1A |= 0x00;
    TCCR1B |= (1 << WGM12) | (1 << CS10);
    1302:	8e b5       	in	r24, 0x2e	; 46
    1304:	89 60       	ori	r24, 0x09	; 9
    1306:	8e bd       	out	0x2e, r24	; 46
    //	TCCR1C |= 0x00;
    TIMSK |= (1 << OCIE1A);
    1308:	87 b7       	in	r24, 0x37	; 55
    130a:	80 61       	ori	r24, 0x10	; 16
    130c:	87 bf       	out	0x37, r24	; 55
    //set frequency
    OCR1A = 0x3210;
    130e:	80 e1       	ldi	r24, 0x10	; 16
    1310:	92 e3       	ldi	r25, 0x32	; 50
    1312:	9b bd       	out	0x2b, r25	; 43
    1314:	8a bd       	out	0x2a, r24	; 42
    hi = 0;
    1316:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <hi+0x1>
    131a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <hi>
    EICRB |= (1 << ISC71) | (1 < ISC70);
    131e:	8a b7       	in	r24, 0x3a	; 58
    1320:	81 68       	ori	r24, 0x81	; 129
    1322:	8a bf       	out	0x3a, r24	; 58
    EIMSK |= (1 << INT7);
    1324:	89 b7       	in	r24, 0x39	; 57
    1326:	80 68       	ori	r24, 0x80	; 128
    1328:	89 bf       	out	0x39, r24	; 57
    //hardware reset of Si4734
    PORTE &= ~(1 << PE7); //int2 initially low to sense TWI mode
    132a:	1f 98       	cbi	0x03, 7	; 3
    DDRE |= 0x80;         //turn on Port E bit 7 to drive it low
    132c:	17 9a       	sbi	0x02, 7	; 2
    PORTE |= (1 << PE2);  //hardware reset Si4734
    132e:	1a 9a       	sbi	0x03, 2	; 3
    1330:	8f e1       	ldi	r24, 0x1F	; 31
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <main+0x72>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <main+0x78>
    133a:	00 00       	nop
    _delay_us(200);       //hold for 200us, 100us by spec
    PORTE &= ~(1 << PE2); //release reset
    133c:	1a 98       	cbi	0x03, 2	; 3
    133e:	90 ea       	ldi	r25, 0xA0	; 160
    1340:	9a 95       	dec	r25
    1342:	f1 f7       	brne	.-4      	; 0x1340 <main+0x7e>
    _delay_us(30);        //5us required because of my slow I2C translators I suspect
                          //Si code in "low" has 30us delay...no explaination given
    DDRE &= ~(0x80);      //now Port E bit 7 becomes input from the radio interrupt
    1344:	17 98       	cbi	0x02, 7	; 2

    fm_pwr_up(); //power up radio
    1346:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <fm_pwr_up>
    while (twi_busy())
    134a:	0e 94 0a 06 	call	0xc14	; 0xc14 <twi_busy>
    134e:	81 11       	cpse	r24, r1
    1350:	fc cf       	rjmp	.-8      	; 0x134a <main+0x88>
    {
    } //spin while TWI is busy
    current_fm_freq = 9990;
    1352:	86 e0       	ldi	r24, 0x06	; 6
    1354:	97 e2       	ldi	r25, 0x27	; 39
    1356:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    135a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    fm_tune_freq(); //tune to frequency
    135e:	0e 94 d4 06 	call	0xda8	; 0xda8 <fm_tune_freq>
    1362:	ff cf       	rjmp	.-2      	; 0x1362 <main+0xa0>

00001364 <__divmodhi4>:
    1364:	97 fb       	bst	r25, 7
    1366:	07 2e       	mov	r0, r23
    1368:	16 f4       	brtc	.+4      	; 0x136e <__divmodhi4+0xa>
    136a:	00 94       	com	r0
    136c:	07 d0       	rcall	.+14     	; 0x137c <__divmodhi4_neg1>
    136e:	77 fd       	sbrc	r23, 7
    1370:	09 d0       	rcall	.+18     	; 0x1384 <__divmodhi4_neg2>
    1372:	0e 94 ee 09 	call	0x13dc	; 0x13dc <__udivmodhi4>
    1376:	07 fc       	sbrc	r0, 7
    1378:	05 d0       	rcall	.+10     	; 0x1384 <__divmodhi4_neg2>
    137a:	3e f4       	brtc	.+14     	; 0x138a <__divmodhi4_exit>

0000137c <__divmodhi4_neg1>:
    137c:	90 95       	com	r25
    137e:	81 95       	neg	r24
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__divmodhi4_neg2>:
    1384:	70 95       	com	r23
    1386:	61 95       	neg	r22
    1388:	7f 4f       	sbci	r23, 0xFF	; 255

0000138a <__divmodhi4_exit>:
    138a:	08 95       	ret

0000138c <__divmodsi4>:
    138c:	05 2e       	mov	r0, r21
    138e:	97 fb       	bst	r25, 7
    1390:	1e f4       	brtc	.+6      	; 0x1398 <__divmodsi4+0xc>
    1392:	00 94       	com	r0
    1394:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__negsi2>
    1398:	57 fd       	sbrc	r21, 7
    139a:	07 d0       	rcall	.+14     	; 0x13aa <__divmodsi4_neg2>
    139c:	0e 94 02 0a 	call	0x1404	; 0x1404 <__udivmodsi4>
    13a0:	07 fc       	sbrc	r0, 7
    13a2:	03 d0       	rcall	.+6      	; 0x13aa <__divmodsi4_neg2>
    13a4:	4e f4       	brtc	.+18     	; 0x13b8 <__divmodsi4_exit>
    13a6:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__negsi2>

000013aa <__divmodsi4_neg2>:
    13aa:	50 95       	com	r21
    13ac:	40 95       	com	r20
    13ae:	30 95       	com	r19
    13b0:	21 95       	neg	r18
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	4f 4f       	sbci	r20, 0xFF	; 255
    13b6:	5f 4f       	sbci	r21, 0xFF	; 255

000013b8 <__divmodsi4_exit>:
    13b8:	08 95       	ret

000013ba <__negsi2>:
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	08 95       	ret

000013ca <__tablejump2__>:
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	00 24       	eor	r0, r0
    13d0:	00 1c       	adc	r0, r0
    13d2:	0b be       	out	0x3b, r0	; 59
    13d4:	07 90       	elpm	r0, Z+
    13d6:	f6 91       	elpm	r31, Z
    13d8:	e0 2d       	mov	r30, r0
    13da:	09 94       	ijmp

000013dc <__udivmodhi4>:
    13dc:	aa 1b       	sub	r26, r26
    13de:	bb 1b       	sub	r27, r27
    13e0:	51 e1       	ldi	r21, 0x11	; 17
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <__udivmodhi4_ep>

000013e4 <__udivmodhi4_loop>:
    13e4:	aa 1f       	adc	r26, r26
    13e6:	bb 1f       	adc	r27, r27
    13e8:	a6 17       	cp	r26, r22
    13ea:	b7 07       	cpc	r27, r23
    13ec:	10 f0       	brcs	.+4      	; 0x13f2 <__udivmodhi4_ep>
    13ee:	a6 1b       	sub	r26, r22
    13f0:	b7 0b       	sbc	r27, r23

000013f2 <__udivmodhi4_ep>:
    13f2:	88 1f       	adc	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	5a 95       	dec	r21
    13f8:	a9 f7       	brne	.-22     	; 0x13e4 <__udivmodhi4_loop>
    13fa:	80 95       	com	r24
    13fc:	90 95       	com	r25
    13fe:	bc 01       	movw	r22, r24
    1400:	cd 01       	movw	r24, r26
    1402:	08 95       	ret

00001404 <__udivmodsi4>:
    1404:	a1 e2       	ldi	r26, 0x21	; 33
    1406:	1a 2e       	mov	r1, r26
    1408:	aa 1b       	sub	r26, r26
    140a:	bb 1b       	sub	r27, r27
    140c:	fd 01       	movw	r30, r26
    140e:	0d c0       	rjmp	.+26     	; 0x142a <__udivmodsi4_ep>

00001410 <__udivmodsi4_loop>:
    1410:	aa 1f       	adc	r26, r26
    1412:	bb 1f       	adc	r27, r27
    1414:	ee 1f       	adc	r30, r30
    1416:	ff 1f       	adc	r31, r31
    1418:	a2 17       	cp	r26, r18
    141a:	b3 07       	cpc	r27, r19
    141c:	e4 07       	cpc	r30, r20
    141e:	f5 07       	cpc	r31, r21
    1420:	20 f0       	brcs	.+8      	; 0x142a <__udivmodsi4_ep>
    1422:	a2 1b       	sub	r26, r18
    1424:	b3 0b       	sbc	r27, r19
    1426:	e4 0b       	sbc	r30, r20
    1428:	f5 0b       	sbc	r31, r21

0000142a <__udivmodsi4_ep>:
    142a:	66 1f       	adc	r22, r22
    142c:	77 1f       	adc	r23, r23
    142e:	88 1f       	adc	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	1a 94       	dec	r1
    1434:	69 f7       	brne	.-38     	; 0x1410 <__udivmodsi4_loop>
    1436:	60 95       	com	r22
    1438:	70 95       	com	r23
    143a:	80 95       	com	r24
    143c:	90 95       	com	r25
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
    1442:	bd 01       	movw	r22, r26
    1444:	cf 01       	movw	r24, r30
    1446:	08 95       	ret

00001448 <__itoa_ncheck>:
    1448:	bb 27       	eor	r27, r27
    144a:	4a 30       	cpi	r20, 0x0A	; 10
    144c:	31 f4       	brne	.+12     	; 0x145a <__itoa_ncheck+0x12>
    144e:	99 23       	and	r25, r25
    1450:	22 f4       	brpl	.+8      	; 0x145a <__itoa_ncheck+0x12>
    1452:	bd e2       	ldi	r27, 0x2D	; 45
    1454:	90 95       	com	r25
    1456:	81 95       	neg	r24
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__utoa_common>

0000145e <__utoa_ncheck>:
    145e:	bb 27       	eor	r27, r27

00001460 <__utoa_common>:
    1460:	fb 01       	movw	r30, r22
    1462:	55 27       	eor	r21, r21
    1464:	aa 27       	eor	r26, r26
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	aa 1f       	adc	r26, r26
    146c:	a4 17       	cp	r26, r20
    146e:	10 f0       	brcs	.+4      	; 0x1474 <__utoa_common+0x14>
    1470:	a4 1b       	sub	r26, r20
    1472:	83 95       	inc	r24
    1474:	50 51       	subi	r21, 0x10	; 16
    1476:	b9 f7       	brne	.-18     	; 0x1466 <__utoa_common+0x6>
    1478:	a0 5d       	subi	r26, 0xD0	; 208
    147a:	aa 33       	cpi	r26, 0x3A	; 58
    147c:	08 f0       	brcs	.+2      	; 0x1480 <__utoa_common+0x20>
    147e:	a9 5d       	subi	r26, 0xD9	; 217
    1480:	a1 93       	st	Z+, r26
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	79 f7       	brne	.-34     	; 0x1464 <__utoa_common+0x4>
    1486:	b1 11       	cpse	r27, r1
    1488:	b1 93       	st	Z+, r27
    148a:	11 92       	st	Z+, r1
    148c:	cb 01       	movw	r24, r22
    148e:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <strrev>

00001492 <strrev>:
    1492:	dc 01       	movw	r26, r24
    1494:	fc 01       	movw	r30, r24
    1496:	67 2f       	mov	r22, r23
    1498:	71 91       	ld	r23, Z+
    149a:	77 23       	and	r23, r23
    149c:	e1 f7       	brne	.-8      	; 0x1496 <strrev+0x4>
    149e:	32 97       	sbiw	r30, 0x02	; 2
    14a0:	04 c0       	rjmp	.+8      	; 0x14aa <strrev+0x18>
    14a2:	7c 91       	ld	r23, X
    14a4:	6d 93       	st	X+, r22
    14a6:	70 83       	st	Z, r23
    14a8:	62 91       	ld	r22, -Z
    14aa:	ae 17       	cp	r26, r30
    14ac:	bf 07       	cpc	r27, r31
    14ae:	c8 f3       	brcs	.-14     	; 0x14a2 <strrev+0x10>
    14b0:	08 95       	ret

000014b2 <eeprom_read_byte>:
    14b2:	e1 99       	sbic	0x1c, 1	; 28
    14b4:	fe cf       	rjmp	.-4      	; 0x14b2 <eeprom_read_byte>
    14b6:	9f bb       	out	0x1f, r25	; 31
    14b8:	8e bb       	out	0x1e, r24	; 30
    14ba:	e0 9a       	sbi	0x1c, 0	; 28
    14bc:	99 27       	eor	r25, r25
    14be:	8d b3       	in	r24, 0x1d	; 29
    14c0:	08 95       	ret

000014c2 <eeprom_read_word>:
    14c2:	a8 e1       	ldi	r26, 0x18	; 24
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	42 e0       	ldi	r20, 0x02	; 2
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <eeprom_read_blraw>

000014ce <eeprom_write_byte>:
    14ce:	26 2f       	mov	r18, r22

000014d0 <eeprom_write_r18>:
    14d0:	e1 99       	sbic	0x1c, 1	; 28
    14d2:	fe cf       	rjmp	.-4      	; 0x14d0 <eeprom_write_r18>
    14d4:	9f bb       	out	0x1f, r25	; 31
    14d6:	8e bb       	out	0x1e, r24	; 30
    14d8:	2d bb       	out	0x1d, r18	; 29
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	e2 9a       	sbi	0x1c, 2	; 28
    14e0:	e1 9a       	sbi	0x1c, 1	; 28
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	08 95       	ret

000014e8 <eeprom_write_word>:
    14e8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <eeprom_write_byte>
    14ec:	27 2f       	mov	r18, r23
    14ee:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <eeprom_write_r18>

000014f2 <eeprom_read_block>:
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22

000014f6 <eeprom_read_blraw>:
    14f6:	fc 01       	movw	r30, r24
    14f8:	e1 99       	sbic	0x1c, 1	; 28
    14fa:	fe cf       	rjmp	.-4      	; 0x14f8 <eeprom_read_blraw+0x2>
    14fc:	06 c0       	rjmp	.+12     	; 0x150a <eeprom_read_blraw+0x14>
    14fe:	ff bb       	out	0x1f, r31	; 31
    1500:	ee bb       	out	0x1e, r30	; 30
    1502:	e0 9a       	sbi	0x1c, 0	; 28
    1504:	31 96       	adiw	r30, 0x01	; 1
    1506:	0d b2       	in	r0, 0x1d	; 29
    1508:	0d 92       	st	X+, r0
    150a:	41 50       	subi	r20, 0x01	; 1
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	b8 f7       	brcc	.-18     	; 0x14fe <eeprom_read_blraw+0x8>
    1510:	08 95       	ret

00001512 <_exit>:
    1512:	f8 94       	cli

00001514 <__stop_program>:
    1514:	ff cf       	rjmp	.-2      	; 0x1514 <__stop_program>
