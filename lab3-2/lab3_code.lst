
lab3_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005d2  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800104  00800104  0000066a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000069c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d07  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e3  00000000  00000000  00001e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000022ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000489  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000404  00000000  00000000  00002895  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 33       	cpi	r26, 0x34	; 52
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
  c6:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_dec_to_7seg>:
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
  ce:	e3 e2       	ldi	r30, 0x23	; 35
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	80 ec       	ldi	r24, 0xC0	; 192
  d4:	80 83       	st	Z, r24
    dec_to_7seg[1] = ~(ONE);
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	81 83       	std	Z+1, r24	; 0x01
    dec_to_7seg[2] = ~(TWO);
  da:	84 ea       	ldi	r24, 0xA4	; 164
  dc:	82 83       	std	Z+2, r24	; 0x02
    dec_to_7seg[3] = ~(THREE);
  de:	80 eb       	ldi	r24, 0xB0	; 176
  e0:	83 83       	std	Z+3, r24	; 0x03
    dec_to_7seg[4] = ~(FOUR);
  e2:	89 e9       	ldi	r24, 0x99	; 153
  e4:	84 83       	std	Z+4, r24	; 0x04
    dec_to_7seg[5] = ~(FIVE);
  e6:	82 e9       	ldi	r24, 0x92	; 146
  e8:	85 83       	std	Z+5, r24	; 0x05
    dec_to_7seg[6] = ~(SIX);
  ea:	82 e8       	ldi	r24, 0x82	; 130
  ec:	86 83       	std	Z+6, r24	; 0x06
    dec_to_7seg[7] = ~(SEVEN);
  ee:	88 ef       	ldi	r24, 0xF8	; 248
  f0:	87 83       	std	Z+7, r24	; 0x07
    dec_to_7seg[8] = ~(EIGHT);
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 87       	std	Z+8, r24	; 0x08
    dec_to_7seg[9] = ~(NINE);
  f6:	88 e9       	ldi	r24, 0x98	; 152
  f8:	81 87       	std	Z+9, r24	; 0x09
    dec_to_7seg[10] = ~(COLON);
  fa:	8c ef       	ldi	r24, 0xFC	; 252
  fc:	82 87       	std	Z+10, r24	; 0x0a
    dec_to_7seg[11] = ~(BLANK);
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	83 87       	std	Z+11, r24	; 0x0b
 102:	08 95       	ret

00000104 <set_decoder>:
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
 104:	eb e1       	ldi	r30, 0x1B	; 27
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	10 82       	st	Z, r1
    decoder[1] = DIGIT3;
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	81 83       	std	Z+1, r24	; 0x01
    decoder[2] = DIS_COLON;
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	82 83       	std	Z+2, r24	; 0x02
    decoder[3] = DIGIT2;
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	83 83       	std	Z+3, r24	; 0x03
    decoder[4] = DIGIT1;
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	84 83       	std	Z+4, r24	; 0x04
    decoder[7] = TRI_BUFFER;
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	87 83       	std	Z+7, r24	; 0x07
 11e:	08 95       	ret

00000120 <chk_buttons>:
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
int8_t chk_buttons(int button)
{
 120:	ac 01       	movw	r20, r24
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
 122:	99 b3       	in	r25, 0x19	; 25
 124:	fa 01       	movw	r30, r20
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e8 5f       	subi	r30, 0xF8	; 248
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	20 81       	ld	r18, Z
 130:	31 81       	ldd	r19, Z+1	; 0x01
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	30 6e       	ori	r19, 0xE0	; 224
 138:	89 2f       	mov	r24, r25
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <chk_buttons+0x22>
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	4a 95       	dec	r20
 144:	e2 f7       	brpl	.-8      	; 0x13e <chk_buttons+0x1e>
 146:	81 70       	andi	r24, 0x01	; 1
 148:	99 27       	eor	r25, r25
 14a:	28 2b       	or	r18, r24
 14c:	39 2b       	or	r19, r25
 14e:	31 83       	std	Z+1, r19	; 0x01
 150:	20 83       	st	Z, r18
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	21 15       	cp	r18, r1
 156:	30 4f       	sbci	r19, 0xF0	; 240
 158:	09 f0       	breq	.+2      	; 0x15c <chk_buttons+0x3c>
 15a:	80 e0       	ldi	r24, 0x00	; 0

    if (state[button] == 0xF000)
        return 1;

    return 0;
}
 15c:	08 95       	ret

0000015e <segsum>:
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum)
{
 15e:	ac 01       	movw	r20, r24
    //break up decimal sum into 4 digit-segments
    //blank out leading zero digits
    //now move data to right place for misplaced colon position
    int i;//, leading_zero;

    segment_data[0] = sum % 10;
 160:	9c 01       	movw	r18, r24
 162:	ad ec       	ldi	r26, 0xCD	; 205
 164:	bc ec       	ldi	r27, 0xCC	; 204
 166:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	9c 01       	movw	r18, r24
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	9a 01       	movw	r18, r20
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
 192:	20 93 2f 01 	sts	0x012F, r18	; 0x80012f <segment_data>
    segment_data[1] = (sum % 100) / 10;
 196:	9a 01       	movw	r18, r20
 198:	36 95       	lsr	r19
 19a:	27 95       	ror	r18
 19c:	36 95       	lsr	r19
 19e:	27 95       	ror	r18
 1a0:	ab e7       	ldi	r26, 0x7B	; 123
 1a2:	b4 e1       	ldi	r27, 0x14	; 20
 1a4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	64 e6       	ldi	r22, 0x64	; 100
 1ae:	68 9f       	mul	r22, r24
 1b0:	90 01       	movw	r18, r0
 1b2:	69 9f       	mul	r22, r25
 1b4:	30 0d       	add	r19, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	ca 01       	movw	r24, r20
 1ba:	82 1b       	sub	r24, r18
 1bc:	93 0b       	sbc	r25, r19
 1be:	9c 01       	movw	r18, r24
 1c0:	ad ec       	ldi	r26, 0xCD	; 205
 1c2:	bc ec       	ldi	r27, 0xCC	; 204
 1c4:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <segment_data+0x1>
    segment_data[2] = 11; // doesn't turn on the colon, blank
 1d8:	8b e0       	ldi	r24, 0x0B	; 11
 1da:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <segment_data+0x2>
    segment_data[3] = (sum % 1000) / 100;
 1de:	9a 01       	movw	r18, r20
 1e0:	36 95       	lsr	r19
 1e2:	27 95       	ror	r18
 1e4:	36 95       	lsr	r19
 1e6:	27 95       	ror	r18
 1e8:	36 95       	lsr	r19
 1ea:	27 95       	ror	r18
 1ec:	a5 ec       	ldi	r26, 0xC5	; 197
 1ee:	b0 e2       	ldi	r27, 0x20	; 32
 1f0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 1f4:	fc 01       	movw	r30, r24
 1f6:	f2 95       	swap	r31
 1f8:	e2 95       	swap	r30
 1fa:	ef 70       	andi	r30, 0x0F	; 15
 1fc:	ef 27       	eor	r30, r31
 1fe:	ff 70       	andi	r31, 0x0F	; 15
 200:	ef 27       	eor	r30, r31
 202:	28 ee       	ldi	r18, 0xE8	; 232
 204:	33 e0       	ldi	r19, 0x03	; 3
 206:	e2 9f       	mul	r30, r18
 208:	c0 01       	movw	r24, r0
 20a:	e3 9f       	mul	r30, r19
 20c:	90 0d       	add	r25, r0
 20e:	f2 9f       	mul	r31, r18
 210:	90 0d       	add	r25, r0
 212:	11 24       	eor	r1, r1
 214:	9a 01       	movw	r18, r20
 216:	28 1b       	sub	r18, r24
 218:	39 0b       	sbc	r19, r25
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	ab e7       	ldi	r26, 0x7B	; 123
 224:	b4 e1       	ldi	r27, 0x14	; 20
 226:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <segment_data+0x3>
    segment_data[4] = sum / 1000;
 232:	e0 93 33 01 	sts	0x0133, r30	; 0x800133 <segment_data+0x4>
 236:	ef e2       	ldi	r30, 0x2F	; 47
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	90 e0       	ldi	r25, 0x00	; 0
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
            continue;
        if(segment_data[i] == 0)
            segment_data[i] = 11; // replace it with a blank
 23e:	3b e0       	ldi	r19, 0x0B	; 11
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	31 f0       	breq	.+12     	; 0x252 <segsum+0xf4>
            continue;
        if(segment_data[i] == 0)
 246:	24 81       	ldd	r18, Z+4	; 0x04
 248:	21 11       	cpse	r18, r1
 24a:	0b c0       	rjmp	.+22     	; 0x262 <segsum+0x104>
            segment_data[i] = 11; // replace it with a blank
 24c:	34 83       	std	Z+4, r19	; 0x04
    segment_data[3] = (sum % 1000) / 100;
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	41 f0       	breq	.+16     	; 0x262 <segsum+0x104>
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	31 97       	sbiw	r30, 0x01	; 1
        if(i == 2)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	91 05       	cpc	r25, r1
 25a:	d9 f3       	breq	.-10     	; 0x252 <segsum+0xf4>
            continue;
        if(segment_data[i] == 0)
 25c:	24 81       	ldd	r18, Z+4	; 0x04
 25e:	22 23       	and	r18, r18
 260:	a9 f3       	breq	.-22     	; 0x24c <segsum+0xee>
 262:	08 95       	ret

00000264 <setDigit>:
// The cases set the value on PORTA to the right segments and PORTB
// to decoder.
/***************************************************************/

void setDigit()
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
    DDRA = 0xFF; // setting PORT A as an output
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	8a bb       	out	0x1a, r24	; 26
 26c:	ab e1       	ldi	r26, 0x1B	; 27
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	cf e2       	ldi	r28, 0x2F	; 47
 272:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
 274:	8d 91       	ld	r24, X+
 276:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
 278:	e9 91       	ld	r30, Y+
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	ed 5d       	subi	r30, 0xDD	; 221
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f ec       	ldi	r24, 0xCF	; 207
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <setDigit+0x24>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <setDigit+0x2a>
 28e:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	a0 32       	cpi	r26, 0x20	; 32
 294:	b9 07       	cpc	r27, r25
 296:	71 f7       	brne	.-36     	; 0x274 <setDigit+0x10>
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
        _delay_ms(0.5);
    }
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 29e:	87 b3       	in	r24, 0x17	; 23
 2a0:	87 60       	ori	r24, 0x07	; 7
 2a2:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 2a4:	8d b1       	in	r24, 0x0d	; 13
 2a6:	80 65       	ori	r24, 0x50	; 80
 2a8:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 2aa:	70 9a       	sbi	0x0e, 0	; 14
 2ac:	08 95       	ret

000002ae <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 2ae:	80 b7       	in	r24, 0x30	; 48
 2b0:	88 60       	ori	r24, 0x08	; 8
 2b2:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 2b4:	87 b7       	in	r24, 0x37	; 55
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 2ba:	83 b7       	in	r24, 0x33	; 51
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	83 bf       	out	0x33, r24	; 51
 2c0:	08 95       	ret

000002c2 <encoderRead>:
    static uint8_t new_A = -1;
    static uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 2c2:	66 23       	and	r22, r22
 2c4:	19 f1       	breq	.+70     	; 0x30c <encoderRead+0x4a>
 2c6:	94 e0       	ldi	r25, 0x04	; 4
    b = (knob == 0) ? 2 : 8; // where the position of b is
 2c8:	38 e0       	ldi	r19, 0x08	; 8

    
    new_A = (data & a) ? 1 : 0; // most LSB
 2ca:	98 23       	and	r25, r24
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <encoderRead+0x10>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
    new_B = (data & b) ? 1 : 0; // 2nd LSB
 2d2:	83 23       	and	r24, r19
 2d4:	31 e0       	ldi	r19, 0x01	; 1
 2d6:	09 f4       	brne	.+2      	; 0x2da <encoderRead+0x18>
 2d8:	30 e0       	ldi	r19, 0x00	; 0


    return_val = -1; // default return value, no change

    if ((new_A != old_state[knob]) || (new_B != old_state[knob + 1])){ // if change occured
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	fb 01       	movw	r30, r22
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	40 81       	ld	r20, Z
 2e4:	db 01       	movw	r26, r22
 2e6:	af 5f       	subi	r26, 0xFF	; 255
 2e8:	be 4f       	sbci	r27, 0xFE	; 254
 2ea:	24 17       	cp	r18, r20
 2ec:	f9 f0       	breq	.+62     	; 0x32c <encoderRead+0x6a>
        if((new_A == 0) && (new_B == 0)){
 2ee:	91 11       	cpse	r25, r1
 2f0:	10 c0       	rjmp	.+32     	; 0x312 <encoderRead+0x50>
 2f2:	88 23       	and	r24, r24
 2f4:	81 f0       	breq	.+32     	; 0x316 <encoderRead+0x54>
            else{
                count--;
            }
        }
        else if ((new_A == 0) && (new_B == 1)){
            if (old_state[knob] == 0){
 2f6:	44 23       	and	r20, r20
 2f8:	81 f0       	breq	.+32     	; 0x31a <encoderRead+0x58>
        if((new_A == 0) && (new_B == 0)){
            if (old_state[knob] == 1){
                count++;
            }
            else{
                count--;
 2fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count.1809>
 2fe:	81 50       	subi	r24, 0x01	; 1
 300:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count.1809>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 304:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[knob] = new_A; // save what are now old values
 306:	20 83       	st	Z, r18
        old_state[knob + 1] = new_B;
 308:	3c 93       	st	X, r19
 30a:	08 95       	ret
    static uint8_t new_A = -1;
    static uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 30c:	91 e0       	ldi	r25, 0x01	; 1
    b = (knob == 0) ? 2 : 8; // where the position of b is
 30e:	32 e0       	ldi	r19, 0x02	; 2
 310:	dc cf       	rjmp	.-72     	; 0x2ca <encoderRead+0x8>
            }
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
 312:	81 11       	cpse	r24, r1
 314:	10 c0       	rjmp	.+32     	; 0x336 <encoderRead+0x74>

    return_val = -1; // default return value, no change

    if ((new_A != old_state[knob]) || (new_B != old_state[knob + 1])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[knob] == 1){
 316:	41 30       	cpi	r20, 0x01	; 1
 318:	81 f7       	brne	.-32     	; 0x2fa <encoderRead+0x38>
                count++;
 31a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count.1809>
 31e:	8f 5f       	subi	r24, 0xFF	; 255
 320:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count.1809>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 324:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[knob] = new_A; // save what are now old values
 326:	20 83       	st	Z, r18
        old_state[knob + 1] = new_B;
 328:	3c 93       	st	X, r19
 32a:	08 95       	ret
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change

    if ((new_A != old_state[knob]) || (new_B != old_state[knob + 1])){ // if change occured
 32c:	5c 91       	ld	r21, X
 32e:	35 13       	cpse	r19, r21
 330:	de cf       	rjmp	.-68     	; 0x2ee <encoderRead+0x2c>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 332:	8f ef       	ldi	r24, 0xFF	; 255
        old_state[knob + 1] = new_B;

    } // if changed occured
    // if return value is still -1 then nothing happen
    return (return_val); // return coder state
}
 334:	08 95       	ret
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[knob] == 0){ // one direction 
 336:	41 11       	cpse	r20, r1
 338:	04 c0       	rjmp	.+8      	; 0x342 <encoderRead+0x80>
                if (count == 3){
 33a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count.1809>
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	21 f0       	breq	.+8      	; 0x34a <encoderRead+0x88>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 342:	8f ef       	ldi	r24, 0xFF	; 255
                        current_num += 4;
                    }

                }
            }
            count = 0; // count is always reset in detent position
 344:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count.1809>
 348:	de cf       	rjmp	.-68     	; 0x306 <encoderRead+0x44>
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[knob] == 0){ // one direction 
                if (count == 3){
                    return_val = 0;
                    if(incDec2 == 1){
 34a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <incDec2>
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	31 f0       	breq	.+12     	; 0x35e <encoderRead+0x9c>
                        current_num -= 2;
                    }
                    if(incDec4 == 1){
 352:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <incDec4>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	61 f0       	breq	.+24     	; 0x372 <encoderRead+0xb0>
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[knob] == 0){ // one direction 
                if (count == 3){
                    return_val = 0;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	f3 cf       	rjmp	.-26     	; 0x344 <encoderRead+0x82>
                    if(incDec2 == 1){
                        current_num -= 2;
 35e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 362:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 366:	02 97       	sbiw	r24, 0x02	; 2
 368:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 36c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 370:	f0 cf       	rjmp	.-32     	; 0x352 <encoderRead+0x90>
                    }
                    if(incDec4 == 1){
                        current_num -= 4;
 372:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 376:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 37a:	04 97       	sbiw	r24, 0x04	; 4
 37c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 380:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[knob] == 0){ // one direction 
                if (count == 3){
                    return_val = 0;
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	de cf       	rjmp	.-68     	; 0x344 <encoderRead+0x82>

00000388 <__vector_16>:
    ASSR   |=  (1 << AS0); //ext osc TOSC
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
}

ISR(TIMER0_OVF_vect){
 388:	1f 92       	push	r1
 38a:	0f 92       	push	r0
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	0f 92       	push	r0
 390:	11 24       	eor	r1, r1
 392:	0b b6       	in	r0, 0x3b	; 59
 394:	0f 92       	push	r0
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ef 93       	push	r30
 3b0:	ff 93       	push	r31
    
    //insert loop demake lay for debounce

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;
 3b2:	88 b3       	in	r24, 0x18	; 24
 3b4:	80 67       	ori	r24, 0x70	; 112
 3b6:	88 bb       	out	0x18, r24	; 24
 3b8:	4c e0       	ldi	r20, 0x0C	; 12
 3ba:	50 e0       	ldi	r21, 0x00	; 0
 3bc:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <state.1765+0x2>
 3c0:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <state.1765+0x3>
 3c4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state.1765+0x4>
 3c8:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <state.1765+0x5>
    for (i = 0; i < 12; i++)
    { // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
        PORTA = 0xFF; // set port A as pull ups
 3cc:	cf ef       	ldi	r28, 0xFF	; 255
        

        // checking what button is being pressed
        if (chk_buttons(1)) // set the increment mode on 
        {
            incDec2 ^= 1; // flip the bits for the flag
 3ce:	b1 e0       	ldi	r27, 0x01	; 1

        }
        if (chk_buttons(2)) // set the decrement mode on
        {
            incDec4 ^= 1; // flip the bits for the flag
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
 3d0:	d2 e0       	ldi	r29, 0x02	; 2

    for (i = 0; i < 12; i++)
    { // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
 3d2:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF; // set port A as pull ups
 3d4:	cb bb       	out	0x1b, r28	; 27
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
 3d6:	a9 b3       	in	r26, 0x19	; 25
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	30 6e       	ori	r19, 0xE0	; 224
 3de:	a1 fb       	bst	r26, 1
 3e0:	66 27       	eor	r22, r22
 3e2:	60 f9       	bld	r22, 0
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	26 2b       	or	r18, r22
 3e8:	37 2b       	or	r19, r23
 3ea:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <state.1765+0x3>
 3ee:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <state.1765+0x2>

    // debuging to see how state debouncing works
    // PORTB = state[button];
    // _delay_ms(1000);

    if (state[button] == 0xF000)
 3f2:	21 15       	cp	r18, r1
 3f4:	a0 ef       	ldi	r26, 0xF0	; 240
 3f6:	3a 07       	cpc	r19, r26
 3f8:	51 f4       	brne	.+20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        

        // checking what button is being pressed
        if (chk_buttons(1)) // set the increment mode on 
        {
            incDec2 ^= 1; // flip the bits for the flag
 3fa:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <incDec2>
 3fe:	ab 27       	eor	r26, r27
 400:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <incDec2>
            barGraphDisplay ^= 1 << 0; // show up on the first led
 404:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <barGraphDisplay>
 408:	ab 27       	eor	r26, r27
 40a:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <barGraphDisplay>
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
 40e:	a9 b3       	in	r26, 0x19	; 25
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	90 6e       	ori	r25, 0xE0	; 224
 416:	a2 fb       	bst	r26, 2
 418:	ee 27       	eor	r30, r30
 41a:	e0 f9       	bld	r30, 0
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	8e 2b       	or	r24, r30
 420:	9f 2b       	or	r25, r31
 422:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <state.1765+0x5>
 426:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state.1765+0x4>

    // debuging to see how state debouncing works
    // PORTB = state[button];
    // _delay_ms(1000);

    if (state[button] == 0xF000)
 42a:	81 15       	cp	r24, r1
 42c:	a0 ef       	ldi	r26, 0xF0	; 240
 42e:	9a 07       	cpc	r25, r26
 430:	51 f4       	brne	.+20     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
            barGraphDisplay ^= 1 << 0; // show up on the first led

        }
        if (chk_buttons(2)) // set the decrement mode on
        {
            incDec4 ^= 1; // flip the bits for the flag
 432:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <incDec4>
 436:	ab 27       	eor	r26, r27
 438:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <incDec4>
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
 43c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <barGraphDisplay>
 440:	ad 27       	eor	r26, r29
 442:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <barGraphDisplay>
 446:	41 50       	subi	r20, 0x01	; 1
 448:	51 09       	sbc	r21, r1

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;

    for (i = 0; i < 12; i++)
 44a:	19 f6       	brne	.-122    	; 0x3d2 <__vector_16+0x4a>
            incDec4 ^= 1; // flip the bits for the flag
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
        }
        
    }
    PORTB &= ~(TRI_BUFFER); // turn off the tri state buffer 
 44c:	88 b3       	in	r24, 0x18	; 24
 44e:	8f 78       	andi	r24, 0x8F	; 143
 450:	88 bb       	out	0x18, r24	; 24

   

    // data = SPDR; // reading what the encoder was

    PORTE &= ~(1 << PORTE6); // turning SH/LD low
 452:	1e 98       	cbi	0x03, 6	; 3
    PORTE |= 1 << PORTE6;// turing SH/LD high
 454:	1e 9a       	sbi	0x03, 6	; 3
    SPDR = 0; // give the bargraph garabage
 456:	1f b8       	out	0x0f, r1	; 15

    data = SPDR;
 458:	8f b1       	in	r24, 0x0f	; 15
 45a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <data.1793>
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 45e:	77 9b       	sbis	0x0e, 7	; 14
 460:	fe cf       	rjmp	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
    
    PORTD |= 1 << PORTD3; // turning on clk_inh
 462:	93 9a       	sbi	0x12, 3	; 18
    PORTD &= ~(1 << PORTD3); // turning off clk_inh
 464:	93 98       	cbi	0x12, 3	; 18
}

void barGraph(){
    

    SPDR = barGraphDisplay;
 466:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <barGraphDisplay>
 46a:	8f b9       	out	0x0f, r24	; 15
    // barGraphOutput = display_mode;               //send to display 
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 46c:	77 9b       	sbis	0x0e, 7	; 14
 46e:	fe cf       	rjmp	.-4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 470:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 472:	82 b3       	in	r24, 0x12	; 18
 474:	12 ba       	out	0x12, r1	; 18
    PORTD &= ~(1 << PORTD3); // turning off clk_inh

    barGraph();


    uint8_t enc1 = encoderRead(data, 0);
 476:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <data.1793>
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	8c 2f       	mov	r24, r28
 47e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <encoderRead>
    uint8_t enc2 = encoderRead(data, 1);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	8c 2f       	mov	r24, r28
 486:	0e 94 61 01 	call	0x2c2	; 0x2c2 <encoderRead>
    // }

 


}
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0b be       	out	0x3b, r0	; 59
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <barGraph>:
}

void barGraph(){
    

    SPDR = barGraphDisplay;
 4b4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <barGraphDisplay>
 4b8:	8f b9       	out	0x0f, r24	; 15
    // barGraphOutput = display_mode;               //send to display 
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 4ba:	77 9b       	sbis	0x0e, 7	; 14
 4bc:	fe cf       	rjmp	.-4      	; 0x4ba <barGraph+0x6>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 4be:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 4c0:	82 b3       	in	r24, 0x12	; 18
 4c2:	12 ba       	out	0x12, r1	; 18
 4c4:	08 95       	ret

000004c6 <main>:
void tcnt0_init(void);
ISR(TIMER0_OVF_vect);

int main()
{
    DDRB = 0xF0; //set port B bits 4-7 B as outputs
 4c6:	80 ef       	ldi	r24, 0xF0	; 240
 4c8:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
 4ca:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
 4cc:	81 b3       	in	r24, 0x11	; 17
 4ce:	8c 60       	ori	r24, 0x0C	; 12
 4d0:	81 bb       	out	0x11, r24	; 17

    PORTB &= ~(1 << PORTB7); 
 4d2:	c7 98       	cbi	0x18, 7	; 24
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 4d4:	80 b7       	in	r24, 0x30	; 48
 4d6:	88 60       	ori	r24, 0x08	; 8
 4d8:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 4da:	87 b7       	in	r24, 0x37	; 55
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 4e0:	83 b7       	in	r24, 0x33	; 51
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 4e6:	87 b3       	in	r24, 0x17	; 23
 4e8:	87 60       	ori	r24, 0x07	; 7
 4ea:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 4ec:	8d b1       	in	r24, 0x0d	; 13
 4ee:	80 65       	ori	r24, 0x50	; 80
 4f0:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 4f2:	70 9a       	sbi	0x0e, 0	; 14

    PORTB &= ~(1 << PORTB7); 

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
 4f4:	78 94       	sei
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
 4f6:	80 ec       	ldi	r24, 0xC0	; 192
 4f8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <dec_to_7seg>
    dec_to_7seg[1] = ~(ONE);
 4fc:	89 ef       	ldi	r24, 0xF9	; 249
 4fe:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <dec_to_7seg+0x1>
    dec_to_7seg[2] = ~(TWO);
 502:	84 ea       	ldi	r24, 0xA4	; 164
 504:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <dec_to_7seg+0x2>
    dec_to_7seg[3] = ~(THREE);
 508:	80 eb       	ldi	r24, 0xB0	; 176
 50a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <dec_to_7seg+0x3>
    dec_to_7seg[4] = ~(FOUR);
 50e:	89 e9       	ldi	r24, 0x99	; 153
 510:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <dec_to_7seg+0x4>
    dec_to_7seg[5] = ~(FIVE);
 514:	82 e9       	ldi	r24, 0x92	; 146
 516:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <dec_to_7seg+0x5>
    dec_to_7seg[6] = ~(SIX);
 51a:	82 e8       	ldi	r24, 0x82	; 130
 51c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <dec_to_7seg+0x6>
    dec_to_7seg[7] = ~(SEVEN);
 520:	88 ef       	ldi	r24, 0xF8	; 248
 522:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dec_to_7seg+0x7>
    dec_to_7seg[8] = ~(EIGHT);
 526:	80 e8       	ldi	r24, 0x80	; 128
 528:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <dec_to_7seg+0x8>
    dec_to_7seg[9] = ~(NINE);
 52c:	88 e9       	ldi	r24, 0x98	; 152
 52e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dec_to_7seg+0x9>
    dec_to_7seg[10] = ~(COLON);
 532:	8c ef       	ldi	r24, 0xFC	; 252
 534:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <dec_to_7seg+0xa>
    dec_to_7seg[11] = ~(BLANK);
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dec_to_7seg+0xb>
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
 53e:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <decoder>
    decoder[1] = DIGIT3;
 542:	80 e1       	ldi	r24, 0x10	; 16
 544:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <decoder+0x1>
    decoder[2] = DIS_COLON;
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <decoder+0x2>
    decoder[3] = DIGIT2;
 54e:	80 e3       	ldi	r24, 0x30	; 48
 550:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <decoder+0x3>
    decoder[4] = DIGIT1;
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <decoder+0x4>
    decoder[7] = TRI_BUFFER;
 55a:	80 e7       	ldi	r24, 0x70	; 112
 55c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <decoder+0x7>
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
 560:	1f ef       	ldi	r17, 0xFF	; 255

    while (1)
    {


        if (current_num > 1023)
 562:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 566:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 56a:	81 15       	cp	r24, r1
 56c:	24 e0       	ldi	r18, 0x04	; 4
 56e:	92 07       	cpc	r25, r18
 570:	28 f0       	brcs	.+10     	; 0x57c <main+0xb6>
            current_num -= 1024;
 572:	94 50       	subi	r25, 0x04	; 4
 574:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 578:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

        segsum(current_num); // set each digit
 57c:	0e 94 af 00 	call	0x15e	; 0x15e <segsum>
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
 580:	1a bb       	out	0x1a, r17	; 26
 582:	ab e1       	ldi	r26, 0x1B	; 27
 584:	b1 e0       	ldi	r27, 0x01	; 1
 586:	cf e2       	ldi	r28, 0x2F	; 47
 588:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
 58a:	8d 91       	ld	r24, X+
 58c:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
 58e:	e9 91       	ld	r30, Y+
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	ed 5d       	subi	r30, 0xDD	; 221
 594:	fe 4f       	sbci	r31, 0xFE	; 254
 596:	80 81       	ld	r24, Z
 598:	8b bb       	out	0x1b, r24	; 27
 59a:	8f ec       	ldi	r24, 0xCF	; 207
 59c:	97 e0       	ldi	r25, 0x07	; 7
 59e:	01 97       	sbiw	r24, 0x01	; 1
 5a0:	f1 f7       	brne	.-4      	; 0x59e <main+0xd8>
 5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <main+0xde>
 5a4:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	a0 32       	cpi	r26, 0x20	; 32
 5aa:	b9 07       	cpc	r27, r25
 5ac:	71 f7       	brne	.-36     	; 0x58a <main+0xc4>
 5ae:	d9 cf       	rjmp	.-78     	; 0x562 <main+0x9c>

000005b0 <__umulhisi3>:
 5b0:	a2 9f       	mul	r26, r18
 5b2:	b0 01       	movw	r22, r0
 5b4:	b3 9f       	mul	r27, r19
 5b6:	c0 01       	movw	r24, r0
 5b8:	a3 9f       	mul	r26, r19
 5ba:	70 0d       	add	r23, r0
 5bc:	81 1d       	adc	r24, r1
 5be:	11 24       	eor	r1, r1
 5c0:	91 1d       	adc	r25, r1
 5c2:	b2 9f       	mul	r27, r18
 5c4:	70 0d       	add	r23, r0
 5c6:	81 1d       	adc	r24, r1
 5c8:	11 24       	eor	r1, r1
 5ca:	91 1d       	adc	r25, r1
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
