
lab3_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006b8  0000074c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000032  00800104  00800104  00000750  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d84  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009d2  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c0  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  000024fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054a  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 b1 01 	jmp	0x362	; 0x362 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 33       	cpi	r26, 0x36	; 54
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c3 02 	call	0x586	; 0x586 <main>
  c6:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <set_dec_to_7seg>:
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
  ce:	e5 e2       	ldi	r30, 0x25	; 37
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	80 ec       	ldi	r24, 0xC0	; 192
  d4:	80 83       	st	Z, r24
    dec_to_7seg[1] = ~(ONE);
  d6:	89 ef       	ldi	r24, 0xF9	; 249
  d8:	81 83       	std	Z+1, r24	; 0x01
    dec_to_7seg[2] = ~(TWO);
  da:	84 ea       	ldi	r24, 0xA4	; 164
  dc:	82 83       	std	Z+2, r24	; 0x02
    dec_to_7seg[3] = ~(THREE);
  de:	80 eb       	ldi	r24, 0xB0	; 176
  e0:	83 83       	std	Z+3, r24	; 0x03
    dec_to_7seg[4] = ~(FOUR);
  e2:	89 e9       	ldi	r24, 0x99	; 153
  e4:	84 83       	std	Z+4, r24	; 0x04
    dec_to_7seg[5] = ~(FIVE);
  e6:	82 e9       	ldi	r24, 0x92	; 146
  e8:	85 83       	std	Z+5, r24	; 0x05
    dec_to_7seg[6] = ~(SIX);
  ea:	82 e8       	ldi	r24, 0x82	; 130
  ec:	86 83       	std	Z+6, r24	; 0x06
    dec_to_7seg[7] = ~(SEVEN);
  ee:	88 ef       	ldi	r24, 0xF8	; 248
  f0:	87 83       	std	Z+7, r24	; 0x07
    dec_to_7seg[8] = ~(EIGHT);
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 87       	std	Z+8, r24	; 0x08
    dec_to_7seg[9] = ~(NINE);
  f6:	88 e9       	ldi	r24, 0x98	; 152
  f8:	81 87       	std	Z+9, r24	; 0x09
    dec_to_7seg[10] = ~(COLON);
  fa:	8c ef       	ldi	r24, 0xFC	; 252
  fc:	82 87       	std	Z+10, r24	; 0x0a
    dec_to_7seg[11] = ~(BLANK);
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	83 87       	std	Z+11, r24	; 0x0b
 102:	08 95       	ret

00000104 <set_decoder>:
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
 104:	ed e1       	ldi	r30, 0x1D	; 29
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	10 82       	st	Z, r1
    decoder[1] = DIGIT3;
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	81 83       	std	Z+1, r24	; 0x01
    decoder[2] = DIS_COLON;
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	82 83       	std	Z+2, r24	; 0x02
    decoder[3] = DIGIT2;
 112:	80 e3       	ldi	r24, 0x30	; 48
 114:	83 83       	std	Z+3, r24	; 0x03
    decoder[4] = DIGIT1;
 116:	80 e4       	ldi	r24, 0x40	; 64
 118:	84 83       	std	Z+4, r24	; 0x04
    decoder[7] = TRI_BUFFER;
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	87 83       	std	Z+7, r24	; 0x07
 11e:	08 95       	ret

00000120 <chk_buttons>:
//Adapted to check all buttons from Ganssel's "Guide to Debouncing"
//Expects active low pushbuttons on PINA port.  Debounce time is determined by
//external loop delay times 12.
//
int8_t chk_buttons(int button)
{
 120:	ac 01       	movw	r20, r24
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
 122:	99 b3       	in	r25, 0x19	; 25
 124:	fa 01       	movw	r30, r20
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e7 5f       	subi	r30, 0xF7	; 247
 12c:	fe 4f       	sbci	r31, 0xFE	; 254
 12e:	20 81       	ld	r18, Z
 130:	31 81       	ldd	r19, Z+1	; 0x01
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	30 6e       	ori	r19, 0xE0	; 224
 138:	89 2f       	mov	r24, r25
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <chk_buttons+0x22>
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	4a 95       	dec	r20
 144:	e2 f7       	brpl	.-8      	; 0x13e <chk_buttons+0x1e>
 146:	81 70       	andi	r24, 0x01	; 1
 148:	99 27       	eor	r25, r25
 14a:	28 2b       	or	r18, r24
 14c:	39 2b       	or	r19, r25
 14e:	31 83       	std	Z+1, r19	; 0x01
 150:	20 83       	st	Z, r18
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	21 15       	cp	r18, r1
 156:	30 4f       	sbci	r19, 0xF0	; 240
 158:	09 f0       	breq	.+2      	; 0x15c <chk_buttons+0x3c>
 15a:	80 e0       	ldi	r24, 0x00	; 0

    if (state[button] == 0xF000)
        return 1;

    return 0;
}
 15c:	08 95       	ret

0000015e <segsum>:
//                                   segment_sum
//takes a 16-bit binary input value and places the appropriate equivalent 4 digit
//BCD segment code in the array segment_data for display.
//array is loaded at exit as:  |digit3|digit2|colon|digit1|digit0|
void segsum(uint16_t sum)
{
 15e:	ac 01       	movw	r20, r24
    //break up decimal sum into 4 digit-segments
    //blank out leading zero digits
    //now move data to right place for misplaced colon position
    int i;//, leading_zero;

    segment_data[0] = sum % 10;
 160:	9c 01       	movw	r18, r24
 162:	ad ec       	ldi	r26, 0xCD	; 205
 164:	bc ec       	ldi	r27, 0xCC	; 204
 166:	0e 94 4b 03 	call	0x696	; 0x696 <__umulhisi3>
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	96 95       	lsr	r25
 174:	87 95       	ror	r24
 176:	9c 01       	movw	r18, r24
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	9a 01       	movw	r18, r20
 18e:	28 1b       	sub	r18, r24
 190:	39 0b       	sbc	r19, r25
 192:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <segment_data>
    segment_data[1] = (sum % 100) / 10;
 196:	9a 01       	movw	r18, r20
 198:	36 95       	lsr	r19
 19a:	27 95       	ror	r18
 19c:	36 95       	lsr	r19
 19e:	27 95       	ror	r18
 1a0:	ab e7       	ldi	r26, 0x7B	; 123
 1a2:	b4 e1       	ldi	r27, 0x14	; 20
 1a4:	0e 94 4b 03 	call	0x696	; 0x696 <__umulhisi3>
 1a8:	96 95       	lsr	r25
 1aa:	87 95       	ror	r24
 1ac:	64 e6       	ldi	r22, 0x64	; 100
 1ae:	68 9f       	mul	r22, r24
 1b0:	90 01       	movw	r18, r0
 1b2:	69 9f       	mul	r22, r25
 1b4:	30 0d       	add	r19, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	ca 01       	movw	r24, r20
 1ba:	82 1b       	sub	r24, r18
 1bc:	93 0b       	sbc	r25, r19
 1be:	9c 01       	movw	r18, r24
 1c0:	ad ec       	ldi	r26, 0xCD	; 205
 1c2:	bc ec       	ldi	r27, 0xCC	; 204
 1c4:	0e 94 4b 03 	call	0x696	; 0x696 <__umulhisi3>
 1c8:	96 95       	lsr	r25
 1ca:	87 95       	ror	r24
 1cc:	96 95       	lsr	r25
 1ce:	87 95       	ror	r24
 1d0:	96 95       	lsr	r25
 1d2:	87 95       	ror	r24
 1d4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <segment_data+0x1>
    segment_data[2] = 11; // doesn't turn on the colon, blank
 1d8:	8b e0       	ldi	r24, 0x0B	; 11
 1da:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <segment_data+0x2>
    segment_data[3] = (sum % 1000) / 100;
 1de:	9a 01       	movw	r18, r20
 1e0:	36 95       	lsr	r19
 1e2:	27 95       	ror	r18
 1e4:	36 95       	lsr	r19
 1e6:	27 95       	ror	r18
 1e8:	36 95       	lsr	r19
 1ea:	27 95       	ror	r18
 1ec:	a5 ec       	ldi	r26, 0xC5	; 197
 1ee:	b0 e2       	ldi	r27, 0x20	; 32
 1f0:	0e 94 4b 03 	call	0x696	; 0x696 <__umulhisi3>
 1f4:	fc 01       	movw	r30, r24
 1f6:	f2 95       	swap	r31
 1f8:	e2 95       	swap	r30
 1fa:	ef 70       	andi	r30, 0x0F	; 15
 1fc:	ef 27       	eor	r30, r31
 1fe:	ff 70       	andi	r31, 0x0F	; 15
 200:	ef 27       	eor	r30, r31
 202:	28 ee       	ldi	r18, 0xE8	; 232
 204:	33 e0       	ldi	r19, 0x03	; 3
 206:	e2 9f       	mul	r30, r18
 208:	c0 01       	movw	r24, r0
 20a:	e3 9f       	mul	r30, r19
 20c:	90 0d       	add	r25, r0
 20e:	f2 9f       	mul	r31, r18
 210:	90 0d       	add	r25, r0
 212:	11 24       	eor	r1, r1
 214:	9a 01       	movw	r18, r20
 216:	28 1b       	sub	r18, r24
 218:	39 0b       	sbc	r19, r25
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	36 95       	lsr	r19
 220:	27 95       	ror	r18
 222:	ab e7       	ldi	r26, 0x7B	; 123
 224:	b4 e1       	ldi	r27, 0x14	; 20
 226:	0e 94 4b 03 	call	0x696	; 0x696 <__umulhisi3>
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <segment_data+0x3>
    segment_data[4] = sum / 1000;
 232:	e0 93 35 01 	sts	0x0135, r30	; 0x800135 <segment_data+0x4>
 236:	e1 e3       	ldi	r30, 0x31	; 49
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	90 e0       	ldi	r25, 0x00	; 0
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
            continue;
        if(segment_data[i] == 0)
            segment_data[i] = 11; // replace it with a blank
 23e:	3b e0       	ldi	r19, 0x0B	; 11
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
        if(i == 2)
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	91 05       	cpc	r25, r1
 244:	31 f0       	breq	.+12     	; 0x252 <segsum+0xf4>
            continue;
        if(segment_data[i] == 0)
 246:	24 81       	ldd	r18, Z+4	; 0x04
 248:	21 11       	cpse	r18, r1
 24a:	0b c0       	rjmp	.+22     	; 0x262 <segsum+0x104>
            segment_data[i] = 11; // replace it with a blank
 24c:	34 83       	std	Z+4, r19	; 0x04
    segment_data[3] = (sum % 1000) / 100;
    segment_data[4] = sum / 1000;

    // remove the leading zeros
    // leading_zero = 1;
    for(i = 4; i >0; i--){
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	41 f0       	breq	.+16     	; 0x262 <segsum+0x104>
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	31 97       	sbiw	r30, 0x01	; 1
        if(i == 2)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	91 05       	cpc	r25, r1
 25a:	d9 f3       	breq	.-10     	; 0x252 <segsum+0xf4>
            continue;
        if(segment_data[i] == 0)
 25c:	24 81       	ldd	r18, Z+4	; 0x04
 25e:	22 23       	and	r18, r18
 260:	a9 f3       	breq	.-22     	; 0x24c <segsum+0xee>
 262:	08 95       	ret

00000264 <setDigit>:
// The cases set the value on PORTA to the right segments and PORTB
// to decoder.
/***************************************************************/

void setDigit()
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
    DDRA = 0xFF; // setting PORT A as an output
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	8a bb       	out	0x1a, r24	; 26
 26c:	ad e1       	ldi	r26, 0x1D	; 29
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	c1 e3       	ldi	r28, 0x31	; 49
 272:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
 274:	8d 91       	ld	r24, X+
 276:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
 278:	e9 91       	ld	r30, Y+
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	eb 5d       	subi	r30, 0xDB	; 219
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	8f ec       	ldi	r24, 0xCF	; 207
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <setDigit+0x24>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <setDigit+0x2a>
 28e:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	a2 32       	cpi	r26, 0x22	; 34
 294:	b9 07       	cpc	r27, r25
 296:	71 f7       	brne	.-36     	; 0x274 <setDigit+0x10>
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
        _delay_ms(0.5);
    }
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <spi_init>:
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 29e:	87 b3       	in	r24, 0x17	; 23
 2a0:	87 60       	ori	r24, 0x07	; 7
 2a2:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 2a4:	8d b1       	in	r24, 0x0d	; 13
 2a6:	80 65       	ori	r24, 0x50	; 80
 2a8:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 2aa:	70 9a       	sbi	0x0e, 0	; 14
 2ac:	08 95       	ret

000002ae <tcnt0_init>:
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 2ae:	80 b7       	in	r24, 0x30	; 48
 2b0:	88 60       	ori	r24, 0x08	; 8
 2b2:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 2b4:	87 b7       	in	r24, 0x37	; 55
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 2ba:	83 b7       	in	r24, 0x33	; 51
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	83 bf       	out	0x33, r24	; 51
 2c0:	08 95       	ret

000002c2 <encoderRead>:
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 2c2:	61 11       	cpse	r22, r1
 2c4:	24 c0       	rjmp	.+72     	; 0x30e <encoderRead+0x4c>
 2c6:	a1 e0       	ldi	r26, 0x01	; 1
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
    b = (knob == 0) ? 2 : 8; // where the position of b is
 2ce:	22 e0       	ldi	r18, 0x02	; 2
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 2d0:	91 e0       	ldi	r25, 0x01	; 1
    b = (knob == 0) ? 2 : 8; // where the position of b is

    a_index = (knob == 0) ? 0 : 2;
    b_index = (knob == 0) ? 1 : 3;
    
    new_A = (data & a) ? 1 : 0; // most LSB
 2d2:	98 23       	and	r25, r24
 2d4:	31 e0       	ldi	r19, 0x01	; 1
 2d6:	09 f4       	brne	.+2      	; 0x2da <encoderRead+0x18>
 2d8:	30 e0       	ldi	r19, 0x00	; 0
    new_B = (data & b) ? 1 : 0; // 2nd LSB
 2da:	82 23       	and	r24, r18
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	09 f4       	brne	.+2      	; 0x2e2 <encoderRead+0x20>
 2e0:	20 e0       	ldi	r18, 0x00	; 0


    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
 2e2:	e0 50       	subi	r30, 0x00	; 0
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	40 81       	ld	r20, Z
 2e8:	a0 50       	subi	r26, 0x00	; 0
 2ea:	bf 4f       	sbci	r27, 0xFF	; 255
 2ec:	34 17       	cp	r19, r20
 2ee:	19 f1       	breq	.+70     	; 0x336 <encoderRead+0x74>
        if((new_A == 0) && (new_B == 0)){
 2f0:	91 11       	cpse	r25, r1
 2f2:	14 c0       	rjmp	.+40     	; 0x31c <encoderRead+0x5a>
 2f4:	88 23       	and	r24, r24
 2f6:	a1 f0       	breq	.+40     	; 0x320 <encoderRead+0x5e>
            else{
                count--;
            }
        }
        else if ((new_A == 0) && (new_B == 1)){
            if (old_state[a_index] == 0){
 2f8:	41 11       	cpse	r20, r1
 2fa:	14 c0       	rjmp	.+40     	; 0x324 <encoderRead+0x62>
    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[a_index] == 1){
                count++;
 2fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1810>
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1810>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 306:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
 308:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
 30a:	2c 93       	st	X, r18
 30c:	08 95       	ret
 30e:	a3 e0       	ldi	r26, 0x03	; 3
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e2 e0       	ldi	r30, 0x02	; 2
 314:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
    b = (knob == 0) ? 2 : 8; // where the position of b is
 316:	28 e0       	ldi	r18, 0x08	; 8
    uint8_t new_A = -1;
    uint8_t new_B = -1;
    static uint8_t count = 0; 
    uint8_t return_val, a, b, a_index, b_index; 

    a = (knob == 0) ? 1 : 4; // where the position of a is
 318:	94 e0       	ldi	r25, 0x04	; 4
 31a:	db cf       	rjmp	.-74     	; 0x2d2 <encoderRead+0x10>
            }
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
 31c:	81 11       	cpse	r24, r1
 31e:	10 c0       	rjmp	.+32     	; 0x340 <encoderRead+0x7e>

    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
        if((new_A == 0) && (new_B == 0)){
            if (old_state[a_index] == 1){
 320:	41 30       	cpi	r20, 0x01	; 1
 322:	61 f3       	breq	.-40     	; 0x2fc <encoderRead+0x3a>
                count++;
            }
            else{
                count--;
 324:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <count.1810>
 328:	81 50       	subi	r24, 0x01	; 1
 32a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <count.1810>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 32e:	8f ef       	ldi	r24, 0xFF	; 255
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
 330:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
 332:	2c 93       	st	X, r18
 334:	08 95       	ret
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change

    if ((new_A != old_state[a_index]) || (new_B != old_state[b_index])){ // if change occured
 336:	5c 91       	ld	r21, X
 338:	25 13       	cpse	r18, r21
 33a:	da cf       	rjmp	.-76     	; 0x2f0 <encoderRead+0x2e>
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 33c:	8f ef       	ldi	r24, 0xFF	; 255
        old_state[b_index] = new_B;

    } // if changed occured
    // if return value is still -1 then nothing happen
    return (return_val); // return coder state
}
 33e:	08 95       	ret
            else{
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[a_index] == 0){ // one direction 
 340:	41 11       	cpse	r20, r1
 342:	0b c0       	rjmp	.+22     	; 0x35a <encoderRead+0x98>
                if (count == 3){
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <count.1810>
 34a:	93 30       	cpi	r25, 0x03	; 3
 34c:	41 f0       	breq	.+16     	; 0x35e <encoderRead+0x9c>
 34e:	81 95       	neg	r24
                    //     current_num += 4;
                    // }

                }
            }
            count = 0; // count is always reset in detent position
 350:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <count.1810>
            else{ 
                count--;
            }
        }

        old_state[a_index] = new_A; // save what are now old values
 354:	30 83       	st	Z, r19
        old_state[b_index] = new_B;
 356:	2c 93       	st	X, r18
 358:	08 95       	ret
    
    new_A = (data & a) ? 1 : 0; // most LSB
    new_B = (data & b) ? 1 : 0; // 2nd LSB


    return_val = -1; // default return value, no change
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	f9 cf       	rjmp	.-14     	; 0x350 <encoderRead+0x8e>
                count--;     
            }
        }
        else if ((new_A == 1) && (new_B == 1)){ // detent position
            if (old_state[a_index] == 0){ // one direction 
                if (count == 3){
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	f6 cf       	rjmp	.-20     	; 0x34e <encoderRead+0x8c>

00000362 <__vector_16>:
    ASSR   |=  (1 << AS0); //ext osc TOSC
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
}

ISR(TIMER0_OVF_vect){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	0b b6       	in	r0, 0x3b	; 59
 36e:	0f 92       	push	r0
 370:	2f 93       	push	r18
 372:	3f 93       	push	r19
 374:	4f 93       	push	r20
 376:	5f 93       	push	r21
 378:	6f 93       	push	r22
 37a:	7f 93       	push	r23
 37c:	8f 93       	push	r24
 37e:	9f 93       	push	r25
 380:	af 93       	push	r26
 382:	bf 93       	push	r27
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
    
    //insert loop demake lay for debounce

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;
 38c:	88 b3       	in	r24, 0x18	; 24
 38e:	80 67       	ori	r24, 0x70	; 112
 390:	88 bb       	out	0x18, r24	; 24
 392:	4c e0       	ldi	r20, 0x0C	; 12
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <state.1771+0x2>
 39a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <state.1771+0x3>
 39e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <state.1771+0x4>
 3a2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <state.1771+0x5>
    for (i = 0; i < 12; i++)
    { // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
        PORTA = 0xFF; // set port A as pull ups
 3a6:	cf ef       	ldi	r28, 0xFF	; 255
        

        // checking what button is being pressed
        if (chk_buttons(1)) // set the increment mode on 
        {
            incDec2 ^= 1; // flip the bits for the flag
 3a8:	b1 e0       	ldi	r27, 0x01	; 1

        }
        if (chk_buttons(2)) // set the decrement mode on
        {
            incDec4 ^= 1; // flip the bits for the flag
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
 3aa:	d2 e0       	ldi	r29, 0x02	; 2

    for (i = 0; i < 12; i++)
    { // for the debounce
        
        //make PORTA an input port with pullups
        DDRA = 0x00;  // set port A as inputs
 3ac:	1a ba       	out	0x1a, r1	; 26
        PORTA = 0xFF; // set port A as pull ups
 3ae:	cb bb       	out	0x1b, r28	; 27
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
 3b0:	a9 b3       	in	r26, 0x19	; 25
 3b2:	22 0f       	add	r18, r18
 3b4:	33 1f       	adc	r19, r19
 3b6:	30 6e       	ori	r19, 0xE0	; 224
 3b8:	a1 fb       	bst	r26, 1
 3ba:	66 27       	eor	r22, r22
 3bc:	60 f9       	bld	r22, 0
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	26 2b       	or	r18, r22
 3c2:	37 2b       	or	r19, r23
 3c4:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <state.1771+0x3>
 3c8:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <state.1771+0x2>

    // debuging to see how state debouncing works
    // PORTB = state[button];
    // _delay_ms(1000);

    if (state[button] == 0xF000)
 3cc:	21 15       	cp	r18, r1
 3ce:	a0 ef       	ldi	r26, 0xF0	; 240
 3d0:	3a 07       	cpc	r19, r26
 3d2:	51 f4       	brne	.+20     	; 0x3e8 <__vector_16+0x86>
        

        // checking what button is being pressed
        if (chk_buttons(1)) // set the increment mode on 
        {
            incDec2 ^= 1; // flip the bits for the flag
 3d4:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <incDec2>
 3d8:	ab 27       	eor	r26, r27
 3da:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <incDec2>
            barGraphDisplay ^= 1 << 0; // show up on the first led
 3de:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <barGraphDisplay>
 3e2:	ab 27       	eor	r26, r27
 3e4:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <barGraphDisplay>
    // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
    // if the but is clear, and 0 if the bit is set
    // handling multiple inputs
    // https://www.avrfreaks.net/sites/default/files/debouncing.pdf'

    state[button] = (state[button] << 1) | (!bit_is_clear(PINA, button)) | 0xE000; // when the second button is pressed
 3e8:	a9 b3       	in	r26, 0x19	; 25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	90 6e       	ori	r25, 0xE0	; 224
 3f0:	a2 fb       	bst	r26, 2
 3f2:	ee 27       	eor	r30, r30
 3f4:	e0 f9       	bld	r30, 0
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	8e 2b       	or	r24, r30
 3fa:	9f 2b       	or	r25, r31
 3fc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <state.1771+0x5>
 400:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <state.1771+0x4>

    // debuging to see how state debouncing works
    // PORTB = state[button];
    // _delay_ms(1000);

    if (state[button] == 0xF000)
 404:	81 15       	cp	r24, r1
 406:	a0 ef       	ldi	r26, 0xF0	; 240
 408:	9a 07       	cpc	r25, r26
 40a:	51 f4       	brne	.+20     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            barGraphDisplay ^= 1 << 0; // show up on the first led

        }
        if (chk_buttons(2)) // set the decrement mode on
        {
            incDec4 ^= 1; // flip the bits for the flag
 40c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <incDec4>
 410:	ab 27       	eor	r26, r27
 412:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <incDec4>
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
 416:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <barGraphDisplay>
 41a:	ad 27       	eor	r26, r29
 41c:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <barGraphDisplay>
 420:	41 50       	subi	r20, 0x01	; 1
 422:	51 09       	sbc	r21, r1

    // checking the push buttons 
    // for loop for each phase of the digit
    PORTB |= TRI_BUFFER;

    for (i = 0; i < 12; i++)
 424:	19 f6       	brne	.-122    	; 0x3ac <__vector_16+0x4a>
            incDec4 ^= 1; // flip the bits for the flag
            barGraphDisplay ^= 1 << 1; // show up on the 2nd led
        }
        
    }
    PORTB &= ~(TRI_BUFFER); // turn off the tri state buffer 
 426:	88 b3       	in	r24, 0x18	; 24
 428:	8f 78       	andi	r24, 0x8F	; 143
 42a:	88 bb       	out	0x18, r24	; 24

    //
    uint8_t enc1 = encoderRead(data, 0);
 42c:	c0 91 19 01 	lds	r28, 0x0119	; 0x800119 <data>
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	8c 2f       	mov	r24, r28
 434:	0e 94 61 01 	call	0x2c2	; 0x2c2 <encoderRead>
 438:	d8 2f       	mov	r29, r24
    uint8_t enc2 = encoderRead(data, 1);
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	8c 2f       	mov	r24, r28
 43e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <encoderRead>


    if (incDec2 == 1 && incDec4 == 1){
 442:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <incDec2>
 446:	91 30       	cpi	r25, 0x01	; 1
 448:	c9 f1       	breq	.+114    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
        current_num = current_num;

    }
    else if (incDec2 == 0 && incDec4 == 0){
 44a:	91 11       	cpse	r25, r1
 44c:	1e c0       	rjmp	.+60     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 44e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <incDec4>
 452:	91 11       	cpse	r25, r1
 454:	1c c0       	rjmp	.+56     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
        if(enc1 == 0 || enc2 == 0)
 456:	d1 11       	cpse	r29, r1
 458:	4f c0       	rjmp	.+158    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
            current_num -= 1;
 45a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 45e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 462:	21 50       	subi	r18, 0x01	; 1
 464:	31 09       	sbc	r19, r1
 466:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 46a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
        if (enc1 == 1 || enc2 == 1)
 46e:	d1 30       	cpi	r29, 0x01	; 1
 470:	11 f0       	breq	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	71 f4       	brne	.+28     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
            current_num += 1;
 476:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 47a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 484:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 488:	04 c0       	rjmp	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 48a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <incDec4>
        if(enc1 == 0 || enc2 == 0)
            current_num -= 2;
        if (enc1 == 1 || enc2 == 1)
            current_num += 2;
    }
    else if (incDec4 == 1){
 48e:	91 30       	cpi	r25, 0x01	; 1
 490:	c9 f1       	breq	.+114    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
    }
    



}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0b be       	out	0x3b, r0	; 59
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti
    //
    uint8_t enc1 = encoderRead(data, 0);
    uint8_t enc2 = encoderRead(data, 1);


    if (incDec2 == 1 && incDec4 == 1){
 4bc:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <incDec4>
 4c0:	91 30       	cpi	r25, 0x01	; 1
 4c2:	39 f3       	breq	.-50     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
            current_num -= 1;
        if (enc1 == 1 || enc2 == 1)
            current_num += 1;
    }
    else if (incDec2 == 1){
        if(enc1 == 0 || enc2 == 0)
 4c4:	d1 11       	cpse	r29, r1
 4c6:	1b c0       	rjmp	.+54     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
            current_num -= 2;
 4c8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 4cc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 4d0:	22 50       	subi	r18, 0x02	; 2
 4d2:	31 09       	sbc	r19, r1
 4d4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 4d8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
        if (enc1 == 1 || enc2 == 1)
 4dc:	d1 30       	cpi	r29, 0x01	; 1
 4de:	11 f0       	breq	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	b9 f6       	brne	.-82     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
            current_num += 2;
 4e4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 4e8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 4ec:	02 96       	adiw	r24, 0x02	; 2
 4ee:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 4f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 4f6:	cd cf       	rjmp	.-102    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
    if (incDec2 == 1 && incDec4 == 1){
        current_num = current_num;

    }
    else if (incDec2 == 0 && incDec4 == 0){
        if(enc1 == 0 || enc2 == 0)
 4f8:	81 11       	cpse	r24, r1
 4fa:	b9 cf       	rjmp	.-142    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 4fc:	ae cf       	rjmp	.-164    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
            current_num -= 1;
        if (enc1 == 1 || enc2 == 1)
            current_num += 1;
    }
    else if (incDec2 == 1){
        if(enc1 == 0 || enc2 == 0)
 4fe:	81 11       	cpse	r24, r1
 500:	ed cf       	rjmp	.-38     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 502:	e2 cf       	rjmp	.-60     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
            current_num -= 2;
        if (enc1 == 1 || enc2 == 1)
            current_num += 2;
    }
    else if (incDec4 == 1){
        if (enc1 == 0 || enc2 == 0)
 504:	dd 23       	and	r29, r29
 506:	89 f0       	breq	.+34     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
 508:	88 23       	and	r24, r24
 50a:	79 f0       	breq	.+30     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
            current_num -= 4;
        if (enc1 == 1 || enc2 == 1)
 50c:	d1 30       	cpi	r29, 0x01	; 1
 50e:	19 f0       	breq	.+6      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	09 f0       	breq	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
 514:	be cf       	rjmp	.-132    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
            current_num += 4;
 516:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 51a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 51e:	04 96       	adiw	r24, 0x04	; 4
 520:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 524:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
    }
    



}
 528:	b4 cf       	rjmp	.-152    	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
        if (enc1 == 1 || enc2 == 1)
            current_num += 2;
    }
    else if (incDec4 == 1){
        if (enc1 == 0 || enc2 == 0)
            current_num -= 4;
 52a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 52e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x1>
 532:	24 50       	subi	r18, 0x04	; 4
 534:	31 09       	sbc	r19, r1
 536:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <__data_end+0x1>
 53a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <__data_end>
 53e:	e6 cf       	rjmp	.-52     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>

00000540 <barGraph>:
}

void barGraph(){
    

    SPDR = barGraphDisplay;
 540:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <barGraphDisplay>
 544:	8f b9       	out	0x0f, r24	; 15
    // SPDR = data;
    // barGraphOutput = display_mode;               //send to display 
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 546:	77 9b       	sbis	0x0e, 7	; 14
 548:	fe cf       	rjmp	.-4      	; 0x546 <barGraph+0x6>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 54a:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 54c:	82 b3       	in	r24, 0x12	; 18
 54e:	12 ba       	out	0x12, r1	; 18
 550:	08 95       	ret

00000552 <encoder_chk>:
    static uint16_t state = {0}; // holds bits from encoder
    uint8_t a_pin, b_pin;        // encoder pin states

    // a_pin and b_pin are asserted TRUE when low
    a_pin = ((encoder_var & 0x01) == 0) ? 0 : 1;
    b_pin = ((encoder_var & 0x02) == 0) ? 0 : 1;
 552:	81 fb       	bst	r24, 1
 554:	99 27       	eor	r25, r25
 556:	90 f9       	bld	r25, 0

    // update shift using only the A pin
    state = (state << 1) | a_pin | 0xE0;
 558:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <state.1824>
 55c:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <state.1824+0x1>
 560:	44 0f       	add	r20, r20
 562:	55 1f       	adc	r21, r21
 564:	40 6e       	ori	r20, 0xE0	; 224
 566:	28 2f       	mov	r18, r24
 568:	21 70       	andi	r18, 0x01	; 1
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	24 2b       	or	r18, r20
 56e:	35 2b       	or	r19, r21
 570:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <state.1824+0x1>
 574:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <state.1824>

    // check for falling edge on A pin
    // if it did, then B pin state indicates direction
    // of rotation. Return 1 for CW, 0 for CCW
    if (state == 0xF0){
 578:	20 3f       	cpi	r18, 0xF0	; 240
 57a:	31 05       	cpc	r19, r1
 57c:	11 f4       	brne	.+4      	; 0x582 <encoder_chk+0x30>
        return (b_pin) ? 1 : 0;
 57e:	89 2f       	mov	r24, r25
 580:	08 95       	ret
    }
    else 
        return -1; // no movement detected
 582:	8f ef       	ldi	r24, 0xFF	; 255

 584:	08 95       	ret

00000586 <main>:
ISR(TIMER0_OVF_vect);
int8_t encoder_chk(uint8_t encoder_var);

int main()
{
    DDRB = 0xF0; //set port B bits 4-7 B as outputs
 586:	80 ef       	ldi	r24, 0xF0	; 240
 588:	87 bb       	out	0x17, r24	; 23
    DDRE |= 0b01000000; // set E6 to output
 58a:	16 9a       	sbi	0x02, 6	; 2
    DDRD |= 0b00001100; // slave select pins
 58c:	81 b3       	in	r24, 0x11	; 17
 58e:	8c 60       	ori	r24, 0x0C	; 12
 590:	81 bb       	out	0x11, r24	; 17

    PORTB &= ~(1 << PORTB7); 
 592:	c7 98       	cbi	0x18, 7	; 24
//Initalizes timer/counter0 (TCNT0). TCNT0 is running in async mode
//with external 32khz crystal.  Runs in normal mode with no prescaling.
//Interrupt occurs at overflow 0xFF.
//
void tcnt0_init(void){
    ASSR   |=  (1 << AS0); //ext osc TOSC
 594:	80 b7       	in	r24, 0x30	; 48
 596:	88 60       	ori	r24, 0x08	; 8
 598:	80 bf       	out	0x30, r24	; 48
    TIMSK  |=  (1 << TOIE0); //enable TCNT0 overflow interrupt
 59a:	87 b7       	in	r24, 0x37	; 55
 59c:	81 60       	ori	r24, 0x01	; 1
 59e:	87 bf       	out	0x37, r24	; 55
    TCCR0  |=  (1 << CS00); //normal mode, no prescale
 5a0:	83 b7       	in	r24, 0x33	; 51
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	83 bf       	out	0x33, r24	; 51
//external device specific initalizations.  Sets up SPI to be:                        
//master mode, clock=clk/2, cycle half phase, low polarity, MSB first
//interrupts disabled, poll SPIF bit in SPSR to check xmit completion
/***********************************************************************/
void spi_init(void){
    DDRB  |=   0x07; //Turn on SS, MOSI, SCLK
 5a6:	87 b3       	in	r24, 0x17	; 23
 5a8:	87 60       	ori	r24, 0x07	; 7
 5aa:	87 bb       	out	0x17, r24	; 23
    SPCR  |=   (1 << SPE) | (1 << MSTR); //enable SPI, master mode 
 5ac:	8d b1       	in	r24, 0x0d	; 13
 5ae:	80 65       	ori	r24, 0x50	; 80
 5b0:	8d b9       	out	0x0d, r24	; 13
    SPSR  |=   (1 << SPI2X); // double speed operation
 5b2:	70 9a       	sbi	0x0e, 0	; 14

    PORTB &= ~(1 << PORTB7); 

    tcnt0_init();  //initalize counter timer zero
    spi_init();    //initalize SPI port
    sei();         //enable interrupts before entering loop
 5b4:	78 94       	sei
// setting the dec_to_7seg array for which segment to turn off in order to see
// the digit on the LED display. 
/******************************************************************************/
void set_dec_to_7seg()
{
    dec_to_7seg[0] = ~(ZERO);
 5b6:	80 ec       	ldi	r24, 0xC0	; 192
 5b8:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <dec_to_7seg>
    dec_to_7seg[1] = ~(ONE);
 5bc:	89 ef       	ldi	r24, 0xF9	; 249
 5be:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <dec_to_7seg+0x1>
    dec_to_7seg[2] = ~(TWO);
 5c2:	84 ea       	ldi	r24, 0xA4	; 164
 5c4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <dec_to_7seg+0x2>
    dec_to_7seg[3] = ~(THREE);
 5c8:	80 eb       	ldi	r24, 0xB0	; 176
 5ca:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <dec_to_7seg+0x3>
    dec_to_7seg[4] = ~(FOUR);
 5ce:	89 e9       	ldi	r24, 0x99	; 153
 5d0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <dec_to_7seg+0x4>
    dec_to_7seg[5] = ~(FIVE);
 5d4:	82 e9       	ldi	r24, 0x92	; 146
 5d6:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <dec_to_7seg+0x5>
    dec_to_7seg[6] = ~(SIX);
 5da:	82 e8       	ldi	r24, 0x82	; 130
 5dc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <dec_to_7seg+0x6>
    dec_to_7seg[7] = ~(SEVEN);
 5e0:	88 ef       	ldi	r24, 0xF8	; 248
 5e2:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <dec_to_7seg+0x7>
    dec_to_7seg[8] = ~(EIGHT);
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <dec_to_7seg+0x8>
    dec_to_7seg[9] = ~(NINE);
 5ec:	88 e9       	ldi	r24, 0x98	; 152
 5ee:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <dec_to_7seg+0x9>
    dec_to_7seg[10] = ~(COLON);
 5f2:	8c ef       	ldi	r24, 0xFC	; 252
 5f4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <dec_to_7seg+0xa>
    dec_to_7seg[11] = ~(BLANK);
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dec_to_7seg+0xb>
// This function sets the right value for decoder so that it display the right 
// digit. The index value of the decoder represents the Yx output of the decoder.
/******************************************************************************/
void set_decoder()
{
    decoder[0] = DIGIT4;
 5fe:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <decoder>
    decoder[1] = DIGIT3;
 602:	80 e1       	ldi	r24, 0x10	; 16
 604:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <decoder+0x1>
    decoder[2] = DIS_COLON;
 608:	80 e2       	ldi	r24, 0x20	; 32
 60a:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <decoder+0x2>
    decoder[3] = DIGIT2;
 60e:	80 e3       	ldi	r24, 0x30	; 48
 610:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <decoder+0x3>
    decoder[4] = DIGIT1;
 614:	80 e4       	ldi	r24, 0x40	; 64
 616:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <decoder+0x4>
    decoder[7] = TRI_BUFFER;
 61a:	80 e7       	ldi	r24, 0x70	; 112
 61c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <decoder+0x7>
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
 620:	1f ef       	ldi	r17, 0xFF	; 255
        // data = SPDR;
        // while (bit_is_clear(SPSR,SPIF)){}

        // end of new block

        PORTD |= 1 << PORTD3; // clock_inh = 1
 622:	93 9a       	sbi	0x12, 3	; 18
        PORTE &= 0 << PORTE6; // load 
 624:	83 b1       	in	r24, 0x03	; 3
 626:	13 b8       	out	0x03, r1	; 3

        PORTE |= 1 << PORTE6;
 628:	1e 9a       	sbi	0x03, 6	; 3
        PORTD &= ~(1 << PORTD3);
 62a:	93 98       	cbi	0x12, 3	; 18

        SPDR = 0;
 62c:	1f b8       	out	0x0f, r1	; 15
       
        while (bit_is_clear(SPSR,SPIF)){}
 62e:	77 9b       	sbis	0x0e, 7	; 14
 630:	fe cf       	rjmp	.-4      	; 0x62e <main+0xa8>
        data = SPDR;
 632:	8f b1       	in	r24, 0x0f	; 15
 634:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <data>
}

void barGraph(){
    

    SPDR = barGraphDisplay;
 638:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <barGraphDisplay>
 63c:	8f b9       	out	0x0f, r24	; 15
    // SPDR = data;
    // barGraphOutput = display_mode;               //send to display 
    while (bit_is_clear(SPSR,SPIF)){}               //wait till data sent out (while loop)
 63e:	77 9b       	sbis	0x0e, 7	; 14
 640:	fe cf       	rjmp	.-4      	; 0x63e <main+0xb8>
    PORTD |= (1 << PORTD2);          //HC595 output reg - rising edge...
 642:	92 9a       	sbi	0x12, 2	; 18
    PORTD &= (0 << PORTD2);          //and falling edge
 644:	82 b3       	in	r24, 0x12	; 18
 646:	12 ba       	out	0x12, r1	; 18
        barGraph();




        if (current_num > 1023)
 648:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 64c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 650:	81 15       	cp	r24, r1
 652:	24 e0       	ldi	r18, 0x04	; 4
 654:	92 07       	cpc	r25, r18
 656:	28 f0       	brcs	.+10     	; 0x662 <main+0xdc>
            current_num -= 1024;
 658:	94 50       	subi	r25, 0x04	; 4
 65a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 65e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

        segsum(current_num); // set each digit
 662:	0e 94 af 00 	call	0x15e	; 0x15e <segsum>
// to decoder.
/***************************************************************/

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
 666:	1a bb       	out	0x1a, r17	; 26
 668:	ad e1       	ldi	r26, 0x1D	; 29
 66a:	b1 e0       	ldi	r27, 0x01	; 1
 66c:	c1 e3       	ldi	r28, 0x31	; 49
 66e:	d1 e0       	ldi	r29, 0x01	; 1
    int i;
    for (i = 0; i < 5; i++)
    { // looping through the segment data and assigning the port the right values.
        PORTB = decoder[i]; // enable the right digit to turn on
 670:	8d 91       	ld	r24, X+
 672:	88 bb       	out	0x18, r24	; 24
        PORTA = dec_to_7seg[segment_data[i]]; // turn on the right segments
 674:	e9 91       	ld	r30, Y+
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	eb 5d       	subi	r30, 0xDB	; 219
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	80 81       	ld	r24, Z
 67e:	8b bb       	out	0x1b, r24	; 27
 680:	8f ec       	ldi	r24, 0xCF	; 207
 682:	97 e0       	ldi	r25, 0x07	; 7
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	f1 f7       	brne	.-4      	; 0x684 <main+0xfe>
 688:	00 c0       	rjmp	.+0      	; 0x68a <main+0x104>
 68a:	00 00       	nop

void setDigit()
{
    DDRA = 0xFF; // setting PORT A as an output
    int i;
    for (i = 0; i < 5; i++)
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	a2 32       	cpi	r26, 0x22	; 34
 690:	b9 07       	cpc	r27, r25
 692:	71 f7       	brne	.-36     	; 0x670 <main+0xea>
 694:	c6 cf       	rjmp	.-116    	; 0x622 <main+0x9c>

00000696 <__umulhisi3>:
 696:	a2 9f       	mul	r26, r18
 698:	b0 01       	movw	r22, r0
 69a:	b3 9f       	mul	r27, r19
 69c:	c0 01       	movw	r24, r0
 69e:	a3 9f       	mul	r26, r19
 6a0:	70 0d       	add	r23, r0
 6a2:	81 1d       	adc	r24, r1
 6a4:	11 24       	eor	r1, r1
 6a6:	91 1d       	adc	r25, r1
 6a8:	b2 9f       	mul	r27, r18
 6aa:	70 0d       	add	r23, r0
 6ac:	81 1d       	adc	r24, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	91 1d       	adc	r25, r1
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
