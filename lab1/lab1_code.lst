
lab1_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000166  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  000001fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096d  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000837  00000000  00000000  00000bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000120  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c0  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000050  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 31       	cpi	r26, 0x10	; 16
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ac:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <debounce_switch>:
// Checks the state of pushbutton S0 It shifts in ones till the button is pushed.
// Function returns a 1 only once per debounced button push so a debounce and toggle
// function can be implemented at the same time.  Expects active low pushbutton on
// Port D bit zero.  Debounce time is determined by external loop delay times 12.
//*******************************************************************************
int8_t debounce_switch(int button) {
  b4:	ac 01       	movw	r20, r24
  
  // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
  // if the but is clear, and 0 if the bit is set
  // handling multiple inputs
  // https://www.avrfreaks.net/sites/default/files/debouncing.pdf
  state[button] = (state[button] << 1) | (!bit_is_clear(PIND, button)) | 0xE000; // when the second button is pressed
  b6:	90 b3       	in	r25, 0x10	; 16
  b8:	fa 01       	movw	r30, r20
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e0 50       	subi	r30, 0x00	; 0
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	20 81       	ld	r18, Z
  c4:	31 81       	ldd	r19, Z+1	; 0x01
  c6:	22 0f       	add	r18, r18
  c8:	33 1f       	adc	r19, r19
  ca:	30 6e       	ori	r19, 0xE0	; 224
  cc:	89 2f       	mov	r24, r25
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <debounce_switch+0x22>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	4a 95       	dec	r20
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <debounce_switch+0x1e>
  da:	81 70       	andi	r24, 0x01	; 1
  dc:	99 27       	eor	r25, r25
  de:	28 2b       	or	r18, r24
  e0:	39 2b       	or	r19, r25
  e2:	31 83       	std	Z+1, r19	; 0x01
  e4:	20 83       	st	Z, r18
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	21 15       	cp	r18, r1
  ea:	30 4f       	sbci	r19, 0xF0	; 240
  ec:	09 f0       	breq	.+2      	; 0xf0 <debounce_switch+0x3c>
  ee:	80 e0       	ldi	r24, 0x00	; 0
    return 1;

  

  return 0;
}
  f0:	08 95       	ret

000000f2 <main>:
//*******************************************************************************
// Check switch S0.  When found low for 12 passes of "debounce_switch(), increment
// PORTB.  This will make an incrementing count on the port B LEDS.
//*******************************************************************************
int main() {
  DDRB = 0xFF; //set port B to all outputs
  f2:	8f ef       	ldi	r24, 0xFF	; 255
  f4:	87 bb       	out	0x17, r24	; 23
  
  // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
  // if the but is clear, and 0 if the bit is set
  // handling multiple inputs
  // https://www.avrfreaks.net/sites/default/files/debouncing.pdf
  state[button] = (state[button] << 1) | (!bit_is_clear(PIND, button)) | 0xE000; // when the second button is pressed
  f6:	60 b3       	in	r22, 0x10	; 16
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	90 6e       	ori	r25, 0xE0	; 224
 106:	26 2f       	mov	r18, r22
 108:	21 70       	andi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	82 2b       	or	r24, r18
 10e:	93 2b       	or	r25, r19
 110:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  // PORTB = state[button];
  // _delay_ms(1000);
  if (state[button] == 0xF000)
 118:	81 15       	cp	r24, r1
 11a:	90 4f       	sbci	r25, 0xF0	; 240
 11c:	19 f4       	brne	.+6      	; 0x124 <main+0x32>
    //   PORTB++;
    // if (!bit_is_clear(PIND, 1))
    //   PORTB--;

    if(debounce_switch(0)){
      PORTB++;
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	88 bb       	out	0x18, r24	; 24
  
  // bit_is_clear: test whether but but in IO register sfr is clear. This will return non zero
  // if the but is clear, and 0 if the bit is set
  // handling multiple inputs
  // https://www.avrfreaks.net/sites/default/files/debouncing.pdf
  state[button] = (state[button] << 1) | (!bit_is_clear(PIND, button)) | 0xE000; // when the second button is pressed
 124:	60 b3       	in	r22, 0x10	; 16
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	90 6e       	ori	r25, 0xE0	; 224
 134:	61 fb       	bst	r22, 1
 136:	44 27       	eor	r20, r20
 138:	40 f9       	bld	r20, 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	84 2b       	or	r24, r20
 13e:	95 2b       	or	r25, r21
 140:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
  // PORTB = state[button];
  // _delay_ms(1000);
  if (state[button] == 0xF000)
 148:	81 15       	cp	r24, r1
 14a:	90 4f       	sbci	r25, 0xF0	; 240
 14c:	19 f4       	brne	.+6      	; 0x154 <main+0x62>

    if(debounce_switch(0)){
      PORTB++;
    }
    if (debounce_switch(1)){
      PORTB--;
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	81 50       	subi	r24, 0x01	; 1
 152:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e3       	ldi	r24, 0x3F	; 63
 156:	9f e1       	ldi	r25, 0x1F	; 31
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x66>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x6c>
 15e:	00 00       	nop
 160:	ca cf       	rjmp	.-108    	; 0xf6 <main+0x4>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
